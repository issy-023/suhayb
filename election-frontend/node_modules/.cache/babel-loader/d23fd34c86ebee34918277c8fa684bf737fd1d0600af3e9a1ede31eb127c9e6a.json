{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { API_URL } from \"@/config\";\nimport jwtDecode from \"jwt-decode\";\nexport default {\n  name: \"CommunityChatComponent\",\n  props: [\"communityId\"],\n  data() {\n    return {\n      chatMessages: [],\n      comments: [],\n      newMessage: \"\",\n      selectedFile: null,\n      openComments: {},\n      newComments: \"\"\n    };\n  },\n  methods: {\n    async fetchPosts() {\n      try {\n        const token = localStorage.getItem(\"token\");\n        const response = await fetch(`${API_URL}/api/communities/${this.communityId}/posts`, {\n          method: \"GET\",\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n        if (!response.ok) throw new Error(\"Failed to fetch posts\");\n        const posts = await response.json();\n        this.chatMessages = posts.map(post => ({\n          id: post.id,\n          text: post.content,\n          username: post.user?.username || \"Anonymous\",\n          image: post.image ? `data:image/jpeg;base64,${post.image}` : null,\n          comments: post.comments || []\n        }));\n      } catch (error) {\n        console.error(\"Error fetching posts:\", error);\n      }\n    },\n    // Fetch comments for a specific post\n    async fetchComments(postId) {\n      const token = localStorage.getItem(\"token\");\n      try {\n        const response = await fetch(`${API_URL}/api/comments/${postId}/getComments`, {\n          method: \"GET\",\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n        if (!response.ok) throw new Error(\"Failed to fetch comments\");\n        const post_comments = await response.json();\n        this.comments = post_comments;\n        console.log(this.comments);\n        console.log(\"edsaws\");\n      } catch (error) {\n        console.error(\"Error fetching comments:\", error);\n      }\n    },\n    // Add a comment to a post\n    async addComment(messageId) {\n      const token = localStorage.getItem(\"token\");\n      if (!token) {\n        alert(\"User not authenticated. Please log in.\");\n        return;\n      }\n      let userId;\n      try {\n        const decodedToken = jwtDecode(token);\n        userId = decodedToken.id;\n      } catch (error) {\n        console.error(\"Error decoding token:\", error);\n        alert(\"Invalid token. Please log in again.\");\n        return;\n      }\n      try {\n        const response = await fetch(`${API_URL}/api/comments/${messageId}/saveComments`, {\n          method: \"POST\",\n          headers: {\n            Authorization: `Bearer ${token}`,\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            content: this.newComments,\n            userId: userId\n          })\n        });\n        if (!response.ok) {\n          throw new Error(\"Failed to add comment\");\n        }\n\n        // Fetch updated comments for the post\n        await this.fetchComments(messageId);\n\n        // Clear comment input field\n        this.newComments = \"\";\n      } catch (error) {\n        console.error(\"Error adding comment:\", error);\n      }\n    },\n    // Post a new message\n    async postMessage() {\n      const token = localStorage.getItem(\"token\"); // Retrieve token\n      if (!token) {\n        alert(\"User not authenticated. Please log in.\");\n        return;\n      }\n      let userId;\n      try {\n        const decodedToken = jwtDecode(token);\n        userId = decodedToken.id;\n      } catch (error) {\n        console.error(\"Error decoding token:\", error);\n        alert(\"Invalid token. Please log in again.\");\n        return;\n      }\n      const formData = new FormData();\n      formData.append(\"content\", this.newMessage);\n      formData.append(\"userid\", userId);\n      if (this.selectedFile) {\n        formData.append(\"image\", this.selectedFile);\n      }\n      try {\n        const response = await fetch(`${API_URL}/api/communities/${this.communityId}/posts/create`, {\n          method: \"POST\",\n          headers: {\n            Authorization: `Bearer ${token}`\n          },\n          body: formData\n        });\n        if (!response.ok) throw new Error(\"Failed to send message\");\n        this.newMessage = \"\";\n        this.selectedFile = null;\n        this.fetchPosts();\n      } catch (error) {\n        console.error(\"Error sending message:\", error);\n      }\n    },\n    // Toggle comment visibility\n    toggleComments(messageId) {\n      this.openComments[messageId] = !this.openComments[messageId];\n      if (this.openComments[messageId]) {\n        this.fetchComments(messageId); // Fetch comments when showing\n      }\n    },\n    isCommentsOpen(messageId) {\n      return !!this.openComments[messageId];\n    },\n    async leaveCommunity() {\n      const token = localStorage.getItem(\"token\");\n      if (!token) {\n        alert(\"User not authenticated. Please log in.\");\n        return;\n      }\n      let userId;\n      try {\n        const decodedToken = jwtDecode(token);\n        userId = decodedToken.id;\n        if (!userId) throw new Error(\"User ID not found in token.\");\n      } catch (error) {\n        console.error(\"Error decoding token:\", error);\n        alert(\"Invalid token. Please log in again.\");\n        return;\n      }\n      try {\n        const response = await fetch(`${API_URL}/api/communities/${this.communityId}/leave?userId=${userId}`, {\n          method: \"DELETE\",\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n        if (!response.ok) {\n          throw new Error(\"Failed to leave community\");\n        }\n\n        // **Reset the joinedCommunityId in Vuex store**\n        this.updateJoinedCommunityId(null);\n        alert(\"You have left the community.\");\n\n        // Redirect to the Communities page\n        this.$router.push({\n          name: 'Communities'\n        });\n      } catch (error) {\n        console.error(\"Error leaving community:\", error);\n        alert(\"An error occurred while leaving the community. Please try again.\");\n      }\n    }\n  },\n  mounted() {\n    this.fetchPosts();\n  }\n};","map":{"version":3,"names":["API_URL","jwtDecode","name","props","data","chatMessages","comments","newMessage","selectedFile","openComments","newComments","methods","fetchPosts","token","localStorage","getItem","response","fetch","communityId","method","headers","Authorization","ok","Error","posts","json","map","post","id","text","content","username","user","image","error","console","fetchComments","postId","post_comments","log","addComment","messageId","alert","userId","decodedToken","body","JSON","stringify","postMessage","formData","FormData","append","toggleComments","isCommentsOpen","leaveCommunity","updateJoinedCommunityId","$router","push","mounted"],"sources":["/Users/suhayb/MijnProjecten/cuuruuvoovii16/election-frontend/src/components/CommunityChatPage.vue"],"sourcesContent":["<template>\n  <div class=\"community-chat\">\n    <div class=\"chat-header\">\n      <h2>Community Chat App</h2>\n      <button class=\"leave-button\" @click=\"leaveCommunity\">Leave</button>\n    </div>\n    <button @click=\"$router.push('/Communities')\">Go to Communities</button>\n\n    <div class=\"new-message-box\">\n      <textarea v-model=\"newMessage\" placeholder=\"Type message here...\"></textarea>\n      <input type=\"file\" @change=\"handleFileChange\" accept=\"image/*\" />\n      <button class=\"post-button\" @click=\"postMessage\">Post</button>\n    </div>\n\n    <div class=\"posts-container\">\n      <div v-for=\"message in chatMessages\" :key=\"message.id\" class=\"message-box\">\n        <div class=\"user-info\">\n          <span class=\"user-avatar\"></span>\n          <span class=\"username\">{{ message.username }}</span>\n        </div>\n        <img v-if=\"message.image\" :src=\"message.image\" alt=\"Post Image\" class=\"message-image\" />\n        <p class=\"message-area\">{{ message.text }}</p>\n\n        <div class=\"message-actions\">\n          <button @click=\"toggleComments(message.id)\">\n            {{ isCommentsOpen(message.id) ? \"Hide\" : \"Show\" }} Comments\n          </button>\n          <button @click=\"likeMessage(message.id)\">Like</button>\n          <button @click=\"shareMessage(message.id)\">Share</button>\n        </div>\n\n        <div v-if=\"isCommentsOpen(message.id)\" class=\"comments-section\">\n          <div v-for=\"comment in comments\" :key=\"comment.id\" class=\"comment\">\n            <span class=\"comment-username\">{{ comment.user?.username }}</span>\n            <p class=\"comment-text\">{{ comment.content }}</p>\n          </div>\n          <div class=\"new-comment-box\">\n            <textarea v-model=\"newComments\" placeholder=\"Add a comment...\" />\n            <button @click=\"addComment(message.id)\">Comment</button>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport {API_URL} from \"@/config\";\nimport jwtDecode from \"jwt-decode\";\n\nexport default {\n  name: \"CommunityChatComponent\",\n  props: [\"communityId\"],\n  data() {\n    return {\n      chatMessages: [],\n      comments: [],\n      newMessage: \"\",\n      selectedFile: null,\n      openComments: {},\n      newComments: \"\",\n    };\n  },\n  methods: {\n    async fetchPosts() {\n      try {\n        const token = localStorage.getItem(\"token\");\n        const response = await fetch(`${API_URL}/api/communities/${this.communityId}/posts`, {\n          method: \"GET\",\n          headers: {Authorization: `Bearer ${token}`},\n        });\n\n        if (!response.ok) throw new Error(\"Failed to fetch posts\");\n        const posts = await response.json();\n\n        this.chatMessages = posts.map(post => ({\n          id: post.id,\n          text: post.content,\n          username: post.user?.username || \"Anonymous\",\n          image: post.image ? `data:image/jpeg;base64,${post.image}` : null,\n          comments: post.comments || [],\n        }));\n\n      } catch (error) {\n        console.error(\"Error fetching posts:\", error);\n      }\n    },\n\n    // Fetch comments for a specific post\n    async fetchComments(postId) {\n      const token = localStorage.getItem(\"token\");\n      try {\n        const response = await fetch(`${API_URL}/api/comments/${postId}/getComments`, {\n          method: \"GET\",\n          headers: {Authorization: `Bearer ${token}`},\n        });\n\n        if (!response.ok) throw new Error(\"Failed to fetch comments\");\n\n        const post_comments = await response.json()\n\n        this.comments = post_comments\n\n        console.log(this.comments);\n        console.log(\"edsaws\")\n\n      } catch (error) {\n        console.error(\"Error fetching comments:\", error);\n      }\n    },\n\n    // Add a comment to a post\n    async addComment(messageId) {\n      const token = localStorage.getItem(\"token\");\n      if (!token) {\n        alert(\"User not authenticated. Please log in.\");\n        return;\n      }\n\n      let userId;\n      try {\n        const decodedToken = jwtDecode(token);\n        userId = decodedToken.id;\n      } catch (error) {\n        console.error(\"Error decoding token:\", error);\n        alert(\"Invalid token. Please log in again.\");\n        return;\n      }\n\n      try {\n        const response = await fetch(`${API_URL}/api/comments/${messageId}/saveComments`, {\n          method: \"POST\",\n          headers: {\n            Authorization: `Bearer ${token}`,\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({\n            content: this.newComments,\n            userId: userId,\n          }),\n        });\n\n        if (!response.ok) {\n          throw new Error(\"Failed to add comment\");\n        }\n\n        // Fetch updated comments for the post\n        await this.fetchComments(messageId);\n\n        // Clear comment input field\n        this.newComments = \"\";\n      } catch (error) {\n        console.error(\"Error adding comment:\", error);\n      }\n    },// Post a new message\n    async postMessage() {\n      const token = localStorage.getItem(\"token\"); // Retrieve token\n      if (!token) {\n        alert(\"User not authenticated. Please log in.\");\n        return;\n      }\n\n      let userId;\n      try {\n        const decodedToken = jwtDecode(token);\n        userId = decodedToken.id;\n\n      } catch (error) {\n        console.error(\"Error decoding token:\", error);\n        alert(\"Invalid token. Please log in again.\");\n        return;\n      }\n\n      const formData = new FormData();\n      formData.append(\"content\", this.newMessage);\n      formData.append(\"userid\", userId);\n      if (this.selectedFile) {\n        formData.append(\"image\", this.selectedFile);\n      }\n\n      try {\n        const response = await fetch(`${API_URL}/api/communities/${this.communityId}/posts/create`, {\n          method: \"POST\",\n          headers: {\n            Authorization: `Bearer ${token}`,\n          },\n          body: formData,\n        });\n\n        if (!response.ok) throw new Error(\"Failed to send message\");\n\n\n        this.newMessage = \"\";\n        this.selectedFile = null;\n        this.fetchPosts();\n      } catch (error) {\n        console.error(\"Error sending message:\", error);\n      }\n    },\n\n\n    // Toggle comment visibility\n    toggleComments(messageId) {\n      this.openComments[messageId] = !this.openComments[messageId];\n      if (this.openComments[messageId]) {\n        this.fetchComments(messageId); // Fetch comments when showing\n      }\n    },\n\n    isCommentsOpen(messageId) {\n      return !!this.openComments[messageId];\n    },\n    async leaveCommunity() {\n      const token = localStorage.getItem(\"token\");\n      if (!token) {\n        alert(\"User not authenticated. Please log in.\");\n        return;\n      }\n\n      let userId;\n      try {\n        const decodedToken = jwtDecode(token);\n        userId = decodedToken.id;\n        if (!userId) throw new Error(\"User ID not found in token.\");\n      } catch (error) {\n        console.error(\"Error decoding token:\", error);\n        alert(\"Invalid token. Please log in again.\");\n        return;\n      }\n\n      try {\n        const response = await fetch(`${API_URL}/api/communities/${this.communityId}/leave?userId=${userId}`, {\n          method: \"DELETE\",\n          headers: {\n            Authorization: `Bearer ${token}`,\n          },\n        });\n\n        if (!response.ok) {\n          throw new Error(\"Failed to leave community\");\n        }\n\n        // **Reset the joinedCommunityId in Vuex store**\n        this.updateJoinedCommunityId(null);\n\n        alert(\"You have left the community.\");\n\n        // Redirect to the Communities page\n        this.$router.push({ name: 'Communities' });\n      } catch (error) {\n        console.error(\"Error leaving community:\", error);\n        alert(\"An error occurred while leaving the community. Please try again.\");\n      }\n    },\n  \n\n  },\n  mounted() {\n    this.fetchPosts();\n  },\n};\n</script>\n\n\n\n<style>\n* {\n  font-family: \"Outfit\", sans-serif;\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\nhtml, body {\n  height: 100%;\n\n}\n\n.community-chat {\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n  align-items: center;\n  background-color: #F9F9F9;\n  color: #17003C;\n  width: 100vw;\n  height: 100vh;\n  padding: 1.5rem;\n  overflow: hidden;\n}\n\n.chat-header {\n  flex-shrink: 0;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  width: 100%;\n  max-width: 800px;\n  margin-bottom: 1rem;\n}\n\n.new-message-box {\n  flex-shrink: 0;\n  background-color: #17003C;\n  padding: 20px;\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n  margin-bottom: 20px;\n  width: 100%;\n  max-width: 800px;\n  border-radius: 10px;\n}\n\ntextarea {\n  width: 100%;\n  border-radius: 10px;\n  padding: 10px;\n  font-size: 1em;\n  margin: 10px 0;\n  border: none;\n  background-color: white;\n  color: black;\n}\n\n.post-button {\n  background-color: #FF9900;\n  color: white;\n  padding: 8px 20px;\n  border: none;\n  border-radius: 5px;\n  cursor: pointer;\n}\n\n.post-button:hover {\n  background-color: #E68A00;\n}\n\n.posts-container {\n  flex-grow: 1;\n  width: 100%;\n  max-width: 800px;\n  overflow-y: auto;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 10px;\n  padding: 10px 0;\n}\n\n.message-box {\n  background-color: #17003C;\n  color: white;\n  border-radius: 15px;\n  padding: 15px;\n  margin-bottom: 10px;\n  width: 90%;\n  max-width: 600px;\n}\n\n.user-info {\n  display: flex;\n  align-items: center;\n  margin-bottom: 10px;\n}\n\n.user-avatar {\n  width: 40px;\n  height: 40px;\n  border-radius: 50%;\n  background-color: gray;\n  margin-right: 10px;\n}\n\n.username {\n  font-weight: bold;\n  color: #FF9900;\n}\n\n.message-area {\n  background-color: white;\n  color: black;\n  padding: 10px;\n  border-radius: 10px;\n  font-size: 1em;\n  margin-top: 10px;\n}\n\n.message-image {\n  max-width: 50%;\n  border-radius: 10px;\n  margin-top: 10px;\n}\n\n.message-actions {\n  display: flex;\n  justify-content: space-around;\n  margin-top: 10px;\n}\n\n.message-actions button {\n  background: none;\n  border: none;\n  color: #FF9900;\n  cursor: pointer;\n  font-size: 1em;\n}\n\n.message-actions button:hover {\n  color: #E68A00;\n}\n\n.comments-section {\n  margin-top: 10px;\n  padding: 10px;\n  background-color: #2A1E54;\n  border-radius: 10px;\n}\n\n.comment {\n  margin-bottom: 5px;\n  padding: 10px;\n}\n\n.comment .username {\n  font-weight: bold;\n  color: #FF9900;\n}\n.comment-username{\n  color: yellow;\n  margin-top: 5px;\n  background-color: white;\n  border-radius: 8px;\n  padding: 10px;\n}\n\n.comment-text {\n  margin-top: 5px;\n  background-color: white;\n  color: black;\n  border-radius: 8px;\n  padding: 10px;\n}\n.comment-username{\n  color: #FF9900;\n}\n.new-comment-box input,button{\n  padding: 10px;\n}\n.new-comment-box button{\n  padding: 3px;\n  border-radius: 5px;\n}\n.leave-button {\n  background-color: #E74C3C;\n  color: white;\n  padding: 10px 20px;\n  border: none;\n  border-radius: 5px;\n  cursor: pointer;\n  font-size: 1em;\n}\n\n.leave-button:hover {\n  background-color: #C0392B;\n}\n\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}