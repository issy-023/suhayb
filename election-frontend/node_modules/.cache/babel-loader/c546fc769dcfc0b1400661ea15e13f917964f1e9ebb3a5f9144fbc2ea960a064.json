{"ast":null,"code":"import { createElementVNode as _createElementVNode, vModelText as _vModelText, withDirectives as _withDirectives, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, createCommentVNode as _createCommentVNode } from \"vue\";\nconst _hoisted_1 = {\n  class: \"community-chat\"\n};\nconst _hoisted_2 = {\n  class: \"new-message-box\"\n};\nconst _hoisted_3 = {\n  class: \"posts-container\"\n};\nconst _hoisted_4 = {\n  class: \"user-info\"\n};\nconst _hoisted_5 = {\n  class: \"username\"\n};\nconst _hoisted_6 = [\"src\"];\nconst _hoisted_7 = {\n  class: \"message-area\"\n};\nconst _hoisted_8 = {\n  class: \"message-actions\"\n};\nconst _hoisted_9 = [\"onClick\"];\nconst _hoisted_10 = [\"onClick\"];\nconst _hoisted_11 = [\"onClick\"];\nconst _hoisted_12 = {\n  key: 1,\n  class: \"comments-section\"\n};\nconst _hoisted_13 = {\n  class: \"comment-username\"\n};\nconst _hoisted_14 = {\n  class: \"comment-text\"\n};\nconst _hoisted_15 = {\n  class: \"new-comment-box\"\n};\nconst _hoisted_16 = [\"onClick\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_cache[5] || (_cache[5] = _createElementVNode(\"div\", {\n    class: \"chat-header\"\n  }, [_createElementVNode(\"h2\", null, \"Community Chat App\")], -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_2, [_withDirectives(_createElementVNode(\"textarea\", {\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.newMessage = $event),\n    placeholder: \"Type message here...\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $data.newMessage]]), _createElementVNode(\"input\", {\n    type: \"file\",\n    onChange: _cache[1] || (_cache[1] = (...args) => $options.handleFileChange && $options.handleFileChange(...args)),\n    accept: \"image/*\"\n  }, null, 32 /* NEED_HYDRATION */), _createElementVNode(\"button\", {\n    class: \"post-button\",\n    onClick: _cache[2] || (_cache[2] = (...args) => $options.postMessage && $options.postMessage(...args))\n  }, \"Post\")]), _createElementVNode(\"div\", _hoisted_3, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.chatMessages, message => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: message.id,\n      class: \"message-box\"\n    }, [_createElementVNode(\"div\", _hoisted_4, [_cache[4] || (_cache[4] = _createElementVNode(\"span\", {\n      class: \"user-avatar\"\n    }, null, -1 /* HOISTED */)), _createElementVNode(\"span\", _hoisted_5, _toDisplayString(message.username), 1 /* TEXT */)]), message.image ? (_openBlock(), _createElementBlock(\"img\", {\n      key: 0,\n      src: message.image,\n      alt: \"Post Image\",\n      class: \"message-image\"\n    }, null, 8 /* PROPS */, _hoisted_6)) : _createCommentVNode(\"v-if\", true), _createElementVNode(\"p\", _hoisted_7, _toDisplayString(message.text), 1 /* TEXT */), _createElementVNode(\"div\", _hoisted_8, [_createElementVNode(\"button\", {\n      onClick: $event => $options.toggleComments(message.id)\n    }, _toDisplayString($options.isCommentsOpen(message.id) ? \"Hide\" : \"Show\") + \" Comments \", 9 /* TEXT, PROPS */, _hoisted_9), _createElementVNode(\"button\", {\n      onClick: $event => _ctx.likeMessage(message.id)\n    }, \"Like\", 8 /* PROPS */, _hoisted_10), _createElementVNode(\"button\", {\n      onClick: $event => _ctx.shareMessage(message.id)\n    }, \"Share\", 8 /* PROPS */, _hoisted_11)]), $options.isCommentsOpen(message.id) ? (_openBlock(), _createElementBlock(\"div\", _hoisted_12, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList(message.comments, comment => {\n      return _openBlock(), _createElementBlock(\"div\", {\n        key: comment.id,\n        class: \"comment\"\n      }, [_createElementVNode(\"span\", _hoisted_13, _toDisplayString(comment.username), 1 /* TEXT */), _createElementVNode(\"p\", _hoisted_14, _toDisplayString(comment.text), 1 /* TEXT */)]);\n    }), 128 /* KEYED_FRAGMENT */)), _createElementVNode(\"div\", _hoisted_15, [_withDirectives(_createElementVNode(\"textarea\", {\n      \"onUpdate:modelValue\": _cache[3] || (_cache[3] = $event => $data.newComments = $event),\n      placeholder: \"Add a comment...\"\n    }, null, 512 /* NEED_PATCH */), [[_vModelText, $data.newComments]]), _createElementVNode(\"button\", {\n      onClick: $event => $options.addComment(message.id)\n    }, \"Comment\", 8 /* PROPS */, _hoisted_16)])])) : _createCommentVNode(\"v-if\", true)]);\n  }), 128 /* KEYED_FRAGMENT */))])]);\n}","map":{"version":3,"names":["class","key","_createElementBlock","_hoisted_1","_createElementVNode","_hoisted_2","_cache","$event","$data","newMessage","placeholder","type","onChange","args","$options","handleFileChange","accept","onClick","postMessage","_hoisted_3","_Fragment","_renderList","chatMessages","message","id","_hoisted_4","_hoisted_5","_toDisplayString","username","image","src","alt","_hoisted_6","_createCommentVNode","_hoisted_7","text","_hoisted_8","toggleComments","isCommentsOpen","_hoisted_9","_ctx","likeMessage","_hoisted_10","shareMessage","_hoisted_11","_hoisted_12","comments","comment","_hoisted_13","_hoisted_14","_hoisted_15","newComments","addComment","_hoisted_16"],"sources":["/Users/suhayb/Documenten/cuuruuvoovii16/election-frontend/src/components/CommunityChatPage.vue"],"sourcesContent":["<template>\n  <div class=\"community-chat\">\n    <div class=\"chat-header\">\n      <h2>Community Chat App</h2>\n    </div>\n\n    <div class=\"new-message-box\">\n      <textarea v-model=\"newMessage\" placeholder=\"Type message here...\"></textarea>\n      <input type=\"file\" @change=\"handleFileChange\" accept=\"image/*\" />\n      <button class=\"post-button\" @click=\"postMessage\">Post</button>\n    </div>\n\n    <div class=\"posts-container\">\n      <div v-for=\"message in chatMessages\" :key=\"message.id\" class=\"message-box\">\n        <div class=\"user-info\">\n          <span class=\"user-avatar\"></span>\n          <span class=\"username\">{{ message.username }}</span>\n        </div>\n        <img v-if=\"message.image\" :src=\"message.image\" alt=\"Post Image\" class=\"message-image\" />\n        <p class=\"message-area\">{{ message.text }}</p>\n\n        <div class=\"message-actions\">\n          <button @click=\"toggleComments(message.id)\">\n            {{ isCommentsOpen(message.id) ? \"Hide\" : \"Show\" }} Comments\n          </button>\n          <button @click=\"likeMessage(message.id)\">Like</button>\n          <button @click=\"shareMessage(message.id)\">Share</button>\n        </div>\n\n        <div v-if=\"isCommentsOpen(message.id)\" class=\"comments-section\">\n          <div v-for=\"comment in message.comments\" :key=\"comment.id\" class=\"comment\">\n            <span class=\"comment-username\">{{ comment.username }}</span>\n            <p class=\"comment-text\">{{ comment.text }}</p>\n          </div>\n          <div class=\"new-comment-box\">\n            <textarea v-model=\"newComments\" placeholder=\"Add a comment...\" />\n            <button @click=\"addComment(message.id)\">Comment</button>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { API_URL } from \"@/config\";\nimport jwtDecode from \"jwt-decode\";\n\nexport default {\n  name: \"CommunityChatComponent\",\n  props: [\"communityId\"],\n  data() {\n    return {\n      chatMessages: [],\n      newMessage: \"\",\n      selectedFile: null,\n      openComments: {},\n      newComments: \"\",\n    };\n  },\n  methods: {\n    async fetchPosts() {\n      try {\n        const token = localStorage.getItem(\"token\");\n        const response = await fetch(`${API_URL}/api/communities/${this.communityId}/posts`, {\n          method: \"GET\",\n          headers: { Authorization: `Bearer ${token}` },\n        });\n\n        if (!response.ok) throw new Error(\"Failed to fetch posts\");\n        const posts = await response.json();\n\n        this.chatMessages = posts.map(post => ({\n          id: post.id,\n          text: post.content,\n          username: post.user?.username || \"Anonymous\",\n          image: post.image ? `data:image/jpeg;base64,${post.image}` : null,\n          comments: post.comments || [],\n        }));\n      } catch (error) {\n        console.error(\"Error fetching posts:\", error);\n      }\n    },\n\n    handleFileChange(event) {\n      const file = event.target.files[0];\n      if (!file.type.startsWith(\"image/\")) {\n        alert(\"Please upload a valid image file.\");\n        return;\n      }\n      const maxSize = 5 * 1024 * 1024;\n      if (file.size > maxSize) {\n        alert(\"File size exceeds 5MB. Please upload a smaller file.\");\n        return;\n      }\n      this.selectedFile = file;\n    },\n\n    async postMessage() {\n      const token = localStorage.getItem(\"token\");\n      if (!token) {\n        alert(\"User not authenticated. Please log in.\");\n        return;\n      }\n\n      let userId;\n      try {\n        const decodedToken = jwtDecode(token);\n        userId = decodedToken.id;\n      } catch (error) {\n        console.error(\"Error decoding token:\", error);\n        alert(\"Invalid token. Please log in again.\");\n        return;\n      }\n\n      const formData = new FormData();\n      formData.append(\"content\", this.newMessage);\n      formData.append(\"userid\", userId);\n      if (this.selectedFile) {\n        formData.append(\"image\", this.selectedFile);\n      }\n\n      try {\n        const response = await fetch(`${API_URL}/api/communities/${this.communityId}/posts/create`, {\n          method: \"POST\",\n          headers: { Authorization: `Bearer ${token}` },\n          body: formData,\n        });\n\n        if (!response.ok) throw new Error(\"Failed to send message\");\n\n        this.newMessage = \"\";\n        this.selectedFile = null;\n        this.fetchPosts();\n      } catch (error) {\n        console.error(\"Error sending message:\", error);\n      }\n    },\n\n    toggleComments(messageId) {\n      this.openComments[messageId] = !this.openComments[messageId];\n    },\n\n    isCommentsOpen(messageId) {\n      return !!this.openComments[messageId];\n    },\n\n    async addComment(messageId) {\n      const token = localStorage.getItem(\"token\");\n      if (!token) {\n        alert(\"User not authenticated. Please log in.\");\n        return;\n      }\n\n      let userId;\n      try {\n        const decodedToken = jwtDecode(token);\n        userId = decodedToken.id;\n      } catch (error) {\n        console.error(\"Error decoding token:\", error);\n        alert(\"Invalid token. Please log in again.\");\n        return;\n      }\n      console.log(this.newComments);\n      console.log(userId);\n\n      const formData = new FormData();\n      formData.append(\"content\", this.newComments);\n      formData.append(\"userid\", userId);\n\n        try {\n          const response = await fetch(`${API_URL}/api/comments/${messageId}/saveComments`, {\n            method: \"POST\",\n            headers: {\n              Authorization: `Bearer ${token}`,\n              'Content-Type': 'application/json'\n            },\n            body:{\n            content : this.newComments, userId: userId\n          }\n\n          });\n          if (!response.ok) throw new Error(\"Failed to add comment\");\n\n          \n          this.newComments = \"\"; // Clear input field\n        } catch (error) {\n          console.error(\"Error adding comment:\", error);\n        }\n\n    },\n\n  },\n\n  mounted() {\n    this.fetchPosts();\n  },\n};\n</script>\n\n\n\n<style>\n* {\n  font-family: \"Outfit\", sans-serif;\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\nhtml, body {\n  height: 100%;\n  overflow: hidden;\n}\n\n.community-chat {\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n  align-items: center;\n  background-color: #F9F9F9;\n  color: #17003C;\n  width: 100vw;\n  height: 100vh;\n  padding: 1.5rem;\n  overflow: hidden;\n}\n\n.chat-header {\n  flex-shrink: 0;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  width: 100%;\n  max-width: 800px;\n  margin-bottom: 1rem;\n}\n\n.new-message-box {\n  flex-shrink: 0;\n  background-color: #17003C;\n  padding: 20px;\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n  margin-bottom: 20px;\n  width: 100%;\n  max-width: 800px;\n  border-radius: 10px;\n}\n\ntextarea {\n  width: 100%;\n  border-radius: 10px;\n  padding: 10px;\n  font-size: 1em;\n  margin: 10px 0;\n  border: none;\n  background-color: white;\n  color: black;\n}\n\n.post-button {\n  background-color: #FF9900;\n  color: white;\n  padding: 8px 20px;\n  border: none;\n  border-radius: 5px;\n  cursor: pointer;\n}\n\n.post-button:hover {\n  background-color: #E68A00;\n}\n\n.posts-container {\n  flex-grow: 1;\n  width: 100%;\n  max-width: 800px;\n  overflow-y: auto;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 10px;\n  padding: 10px 0;\n}\n\n.message-box {\n  background-color: #17003C;\n  color: white;\n  border-radius: 15px;\n  padding: 15px;\n  margin-bottom: 10px;\n  width: 90%;\n  max-width: 600px;\n}\n\n.user-info {\n  display: flex;\n  align-items: center;\n  margin-bottom: 10px;\n}\n\n.user-avatar {\n  width: 40px;\n  height: 40px;\n  border-radius: 50%;\n  background-color: gray;\n  margin-right: 10px;\n}\n\n.username {\n  font-weight: bold;\n  color: #FF9900;\n}\n\n.message-area {\n  background-color: white;\n  color: black;\n  padding: 10px;\n  border-radius: 10px;\n  font-size: 1em;\n  margin-top: 10px;\n}\n\n.message-image {\n  max-width: 50%;\n  border-radius: 10px;\n  margin-top: 10px;\n}\n\n.message-actions {\n  display: flex;\n  justify-content: space-around;\n  margin-top: 10px;\n}\n\n.message-actions button {\n  background: none;\n  border: none;\n  color: #FF9900;\n  cursor: pointer;\n  font-size: 1em;\n}\n\n.message-actions button:hover {\n  color: #E68A00;\n}\n\n.comments-section {\n  margin-top: 10px;\n  padding: 10px;\n  background-color: #2A1E54;\n  border-radius: 10px;\n}\n\n.comment {\n  margin-bottom: 5px;\n  padding: 10px;\n}\n\n.comment .username {\n  font-weight: bold;\n  color: #FF9900;\n}\n\n.comment-text {\n  margin-top: 5px;\n  background-color: white;\n  color: black;\n  border-radius: 8px;\n  padding: 10px;\n}\n.comment-username{\n  color: #FF9900;\n}\n.new-comment-box input,button{\n  padding: 10px;\n}\n.new-comment-box button{\n  padding: 3px;\n  border-radius: 5px;\n}\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}