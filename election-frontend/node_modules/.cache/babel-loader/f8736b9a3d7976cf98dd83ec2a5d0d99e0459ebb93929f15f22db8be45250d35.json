{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { mapGetters, mapActions } from 'vuex';\nexport default {\n  name: 'CommunityChatComponent',\n  props: ['communityId'],\n  data() {\n    return {\n      onlineUsers: [],\n      // Reactive data for users in the community\n      chatMessages: [],\n      // Reactive data for chat messages\n      newMessage: '' // For message input\n    };\n  },\n  computed: {\n    ...mapGetters(['userId'])\n  },\n  methods: {\n    ...mapActions(['leaveCommunity']),\n    async leaveCommunity() {\n      try {\n        const response = await fetch(`http://localhost:8084/api/communities/${this.communityId}/leave?userId=${this.userId}`, {\n          method: 'DELETE'\n        });\n        if (!response.ok) throw new Error('Failed to leave the community');\n        this.leaveCommunity(); // Call Vuex action to update store\n        this.$router.push({\n          name: 'Communities'\n        });\n      } catch (error) {\n        console.error('Error leaving community:', error);\n      }\n    },\n    async sendMessage() {\n      if (this.newMessage.trim()) {\n        const messageData = {\n          userId: this.userId,\n          text: this.newMessage,\n          color: '#f39c12',\n          communityId: this.communityId\n        };\n        try {\n          const response = await fetch(`http://localhost:8084/api/communities/${this.communityId}/messages`, {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(messageData)\n          });\n          if (!response.ok) throw new Error('Failed to send message');\n          const newMessage = await response.json();\n          this.chatMessages.push({\n            userId: this.userId,\n            username: 'You',\n            text: newMessage.text,\n            color: newMessage.color\n          });\n          this.newMessage = ''; // Clear input after sending\n        } catch (error) {\n          console.error('Error sending message:', error);\n        }\n      }\n    }\n  },\n  async created() {\n    // Fetch initial online users and chat messages\n    try {\n      const usersResponse = await fetch(`http://localhost:8084/api/communities/${this.communityId}/users`);\n      if (usersResponse.ok) this.onlineUsers = await usersResponse.json();\n      const messagesResponse = await fetch(`http://localhost:8084/api/communities/${this.communityId}/messages`);\n      if (messagesResponse.ok) this.chatMessages = await messagesResponse.json();\n    } catch (error) {\n      console.error('Error loading initial data:', error);\n    }\n  }\n};","map":{"version":3,"names":["mapGetters","mapActions","name","props","data","onlineUsers","chatMessages","newMessage","computed","methods","leaveCommunity","response","fetch","communityId","userId","method","ok","Error","$router","push","error","console","sendMessage","trim","messageData","text","color","headers","body","JSON","stringify","json","username","created","usersResponse","messagesResponse"],"sources":["/Users/suhayb/Documenten/cuuruuvoovii16/election-frontend/src/components/CommunityChatPage.vue"],"sourcesContent":["<template>\n  <div class=\"community-chat\">\n    <div class=\"chat-header\">\n      <h2>Community Chat App</h2>\n    </div>\n    <div class=\"users-online\">\n      <h4>{{ onlineUsers.length }} users online</h4>\n      <ul>\n        <li v-for=\"user in onlineUsers\" :key=\"user.id\" :class=\"{'current-user': user.id === userId}\">\n          <span :style=\"{ backgroundColor: user.color }\" class=\"user-avatar\"></span>\n          <span>{{ user.name }} <span v-if=\"user.id === userId\">(you)</span></span>\n        </li>\n      </ul>\n    </div>\n    <div class=\"chat-messages\">\n      <div v-for=\"(message, index) in chatMessages\" :key=\"index\" :class=\"{'own-message': message.userId === userId}\" class=\"chat-message\">\n        <span :style=\"{ backgroundColor: message.color }\" class=\"message-avatar\"></span>\n        <div class=\"message-content\">\n          <span class=\"message-user\">{{ message.username }}</span>\n          <p>{{ message.text }}</p>\n        </div>\n      </div>\n    </div>\n    <button @click=\"leaveCommunity\" class=\"leave-button\">Leave Community</button>\n    <div class=\"message-input\">\n      <input type=\"text\" v-model=\"newMessage\" @keyup.enter=\"sendMessage\" placeholder=\"Enter your message and press ENTER\" />\n      <button @click=\"sendMessage\" class=\"send-button\">Send</button>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { mapGetters, mapActions } from 'vuex';\n\nexport default {\n  name: 'CommunityChatComponent',\n  props: ['communityId'],\n  data() {\n    return {\n      onlineUsers: [], // Reactive data for users in the community\n      chatMessages: [], // Reactive data for chat messages\n      newMessage: '', // For message input\n    };\n  },\n  computed: {\n    ...mapGetters(['userId']),\n  },\n  methods: {\n    ...mapActions(['leaveCommunity']),\n\n    async leaveCommunity() {\n      try {\n        const response = await fetch(`http://localhost:8084/api/communities/${this.communityId}/leave?userId=${this.userId}`, {\n          method: 'DELETE',\n        });\n\n        if (!response.ok) throw new Error('Failed to leave the community');\n\n        this.leaveCommunity(); // Call Vuex action to update store\n        this.$router.push({ name: 'Communities' });\n      } catch (error) {\n        console.error('Error leaving community:', error);\n      }\n    },\n\n    async sendMessage() {\n      if (this.newMessage.trim()) {\n        const messageData = {\n          userId: this.userId,\n          text: this.newMessage,\n          color: '#f39c12',\n          communityId: this.communityId,\n        };\n\n        try {\n          const response = await fetch(`http://localhost:8084/api/communities/${this.communityId}/messages`, {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json',\n            },\n            body: JSON.stringify(messageData),\n          });\n\n          if (!response.ok) throw new Error('Failed to send message');\n\n          const newMessage = await response.json();\n          this.chatMessages.push({\n            userId: this.userId,\n            username: 'You',\n            text: newMessage.text,\n            color: newMessage.color,\n          });\n          this.newMessage = ''; // Clear input after sending\n        } catch (error) {\n          console.error('Error sending message:', error);\n        }\n      }\n    },\n  },\n\n  async created() {\n    // Fetch initial online users and chat messages\n    try {\n      const usersResponse = await fetch(`http://localhost:8084/api/communities/${this.communityId}/users`);\n      if (usersResponse.ok) this.onlineUsers = await usersResponse.json();\n\n      const messagesResponse = await fetch(`http://localhost:8084/api/communities/${this.communityId}/messages`);\n      if (messagesResponse.ok) this.chatMessages = await messagesResponse.json();\n    } catch (error) {\n      console.error('Error loading initial data:', error);\n    }\n  },\n};\n</script>\n\n<style scoped>\n* {\n  font-family: \"Outfit\", sans-serif;\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\nhtml, body {\n  height: 100%;\n  overflow: hidden;\n}\n\n.community-chat {\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n  align-items: center;\n  background-color: #F9F9F9;\n  color: #17003C;\n  width: 100vw;\n  height: 100vh;\n  padding: 1.5rem;\n  overflow: hidden;\n}\n\n.chat-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  width: 100%;\n  max-width: 800px;\n  margin-bottom: 1rem;\n}\n\n.leave-button {\n  background-color: #FF9900;\n  color: white;\n  border: 7px solid #17003C;\n  padding: 0.5rem 1rem;\n  font-size: 1.5rem;\n  cursor: pointer;\n  transition: background-color 0.3s ease, border-color 0.3s ease;\n  border-radius: 100px;\n}\n\n.leave-button:hover {\n  background-color: #17003C;\n  border-color: #FF9900;\n}\n\n.users-online {\n  background-color: #F1F1F1;\n  padding: 1rem;\n  border-radius: 12px;\n  margin-bottom: 1rem;\n  width: 100%;\n  max-width: 800px;\n}\n\n.users-online ul {\n  list-style: none;\n}\n\n.users-online li {\n  display: flex;\n  align-items: center;\n  margin-bottom: 0.5rem;\n  font-weight: 600;\n}\n\n.user-avatar {\n  width: 15px;\n  height: 15px;\n  border-radius: 50%;\n  margin-right: 0.5rem;\n}\n\n.chat-messages {\n  background-color: #F1F1F1;\n  padding: 1rem;\n  border-radius: 12px;\n  flex: 1;\n  width: 100%;\n  max-width: 800px;\n  overflow-y: auto;\n  margin-bottom: 1rem;\n}\n\n.chat-message {\n  display: flex;\n  align-items: center;\n  margin-bottom: 1rem;\n}\n\n.message-avatar {\n  width: 20px;\n  height: 20px;\n  border-radius: 50%;\n  margin-right: 0.75rem;\n}\n\n.message-content {\n  background-color: #E0E0E0;\n  padding: 0.5rem 1rem;\n  border-radius: 12px;\n}\n\n.own-message .message-content {\n  background-color: #D1EAFF;\n}\n\n.message-user {\n  font-weight: bold;\n  display: block;\n  margin-bottom: 0.3rem;\n}\n\n.message-input {\n  display: flex;\n  align-items: center;\n  width: 100%;\n  max-width: 800px;\n  padding-top: 1rem;\n  padding-bottom: 1rem;\n  background-color: #F9F9F9;\n  position: sticky;\n  bottom: 0;\n}\n\n.message-input input {\n  flex: 1;\n  padding: 1rem;\n  border-radius: 50px;\n  border: 1px solid #ccc;\n  margin-right: 1rem;\n  font-size: 1.2rem;\n}\n\n.send-button {\n  background-color: #FF9900;\n  color: white;\n  border: 7px solid #17003C;\n  padding: 0.8rem 1.5rem;\n  font-size: 1.5rem;\n  cursor: pointer;\n  border-radius: 50px;\n  transition: background-color 0.3s ease, border-color 0.3s ease;\n}\n\n.send-button:hover {\n  background-color: #17003C;\n  border-color: #FF9900;\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}