{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { API_URL } from \"@/config\";\nimport jwtDecode from \"jwt-decode\";\nexport default {\n  name: \"CommunityChatComponent\",\n  props: [\"communityId\"],\n  data() {\n    return {\n      chatMessages: [],\n      newMessage: \"\",\n      selectedFile: null,\n      openComments: {},\n      newComments: \"\"\n    };\n  },\n  methods: {\n    async fetchPosts() {\n      try {\n        const token = localStorage.getItem(\"token\");\n        const response = await fetch(`${API_URL}/api/communities/${this.communityId}/posts`, {\n          method: \"GET\",\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n        if (!response.ok) throw new Error(\"Failed to fetch posts\");\n        const posts = await response.json();\n        this.chatMessages = posts.map(post => ({\n          id: post.id,\n          text: post.content,\n          username: post.user?.username || \"Anonymous\",\n          image: post.image ? `data:image/jpeg;base64,${post.image}` : null,\n          likeCount: post.likeCount,\n          isLiked: post.likedbyuser,\n          comments: post.comments || []\n        }));\n      } catch (error) {\n        console.error(\"Error fetching posts:\", error);\n      }\n    },\n    async fetchComments(postId) {\n      const token = localStorage.getItem(\"token\");\n      try {\n        const response = await fetch(`${API_URL}/api/comments/${postId}/getComments`, {\n          method: \"GET\",\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n        if (!response.ok) throw new Error(\"Failed to fetch comments\");\n        const comments = await response.json();\n        const postIndex = this.chatMessages.findIndex(msg => msg.id === postId);\n        if (postIndex !== -1) {\n          this.chatMessages[postIndex].comments = comments;\n        }\n      } catch (error) {\n        console.error(\"Error fetching comments:\", error);\n      }\n    },\n    async addComment(messageId) {\n      const token = localStorage.getItem(\"token\");\n      if (!token) return alert(\"User not authenticated. Please log in.\");\n      try {\n        const decodedToken = jwtDecode(token);\n        const response = await fetch(`${API_URL}/api/comments/${messageId}/saveComments`, {\n          method: \"POST\",\n          headers: {\n            Authorization: `Bearer ${token}`,\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify({\n            content: this.newComments,\n            userId: decodedToken.id\n          })\n        });\n        if (!response.ok) throw new Error(\"Failed to add comment\");\n        this.newComments = \"\";\n        await this.fetchComments(messageId);\n      } catch (error) {\n        console.error(\"Error adding comment:\", error);\n      }\n    },\n    async postMessage() {\n      const token = localStorage.getItem(\"token\");\n      if (!token) return alert(\"User not authenticated. Please log in.\");\n      try {\n        const decodedToken = jwtDecode(token);\n        const formData = new FormData();\n        formData.append(\"content\", this.newMessage);\n        formData.append(\"userid\", decodedToken.id);\n        if (this.selectedFile) formData.append(\"image\", this.selectedFile);\n        const response = await fetch(`${API_URL}/api/communities/${this.communityId}/posts/create`, {\n          method: \"POST\",\n          headers: {\n            Authorization: `Bearer ${token}`\n          },\n          body: formData\n        });\n        if (!response.ok) throw new Error(\"Failed to post message\");\n        this.newMessage = \"\";\n        this.selectedFile = null;\n        this.fetchPosts();\n      } catch (error) {\n        console.error(\"Error posting message:\", error);\n      }\n    },\n    handleFileChange(event) {\n      const file = event.target.files[0];\n      if (!file.type.startsWith(\"image/\")) {\n        return alert(\"Please upload a valid image file.\");\n      }\n      if (file.size > 5 * 1024 * 1024) {\n        return alert(\"File size exceeds 5MB. Please upload a smaller file.\");\n      }\n      this.selectedFile = file;\n    },\n    async toggleLike(messageId) {\n      const token = localStorage.getItem(\"token\");\n      if (!token) return alert(\"Not authenticated.\");\n      const post = this.chatMessages.find(p => p.id === messageId);\n      if (!post) return;\n\n      // Bepaal of we gaan liken of unliken\n      const method = post.isLiked ? \"DELETE\" : \"POST\";\n      const userId = jwtDecode(token).id;\n      let endpoint;\n      if (post.isLiked) {\n        // UNLIKE\n        endpoint = `${API_URL}/api/communities/${this.communityId}/posts/${messageId}/unlike?userId=${userId}`;\n      } else {\n        // LIKE\n        endpoint = `${API_URL}/api/communities/${this.communityId}/posts/${messageId}/like?userId=${userId}`;\n      }\n      const response = await fetch(endpoint, {\n        method,\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      if (!response.ok) {\n        console.error(\"Error toggling like\");\n        return;\n      }\n\n      // Optimistic update\n      post.isLiked = !post.isLiked;\n      post.likeCount = post.isLiked ? post.likeCount + 1 : post.likeCount - 1;\n    },\n    toggleComments(messageId) {\n      this.openComments[messageId] = !this.openComments[messageId];\n      if (this.openComments[messageId]) {\n        this.fetchComments(messageId);\n      }\n    },\n    isCommentsOpen(messageId) {\n      return !!this.openComments[messageId];\n    },\n    async leaveCommunity() {\n      const token = localStorage.getItem(\"token\");\n      if (!token) return alert(\"User not authenticated. Please log in.\");\n      try {\n        const decodedToken = jwtDecode(token);\n        const response = await fetch(`${API_URL}/api/communities/${this.communityId}/leave?userId=${decodedToken.id}`, {\n          method: \"DELETE\",\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n        if (!response.ok) throw new Error(\"Failed to leave community\");\n        alert(\"You have left the community.\");\n        this.$router.push({\n          name: \"Communities\"\n        });\n      } catch (error) {\n        console.error(\"Error leaving community:\", error);\n      }\n    }\n  },\n  mounted() {\n    this.fetchPosts();\n  }\n};","map":{"version":3,"names":["API_URL","jwtDecode","name","props","data","chatMessages","newMessage","selectedFile","openComments","newComments","methods","fetchPosts","token","localStorage","getItem","response","fetch","communityId","method","headers","Authorization","ok","Error","posts","json","map","post","id","text","content","username","user","image","likeCount","isLiked","likedbyuser","comments","error","console","fetchComments","postId","postIndex","findIndex","msg","addComment","messageId","alert","decodedToken","body","JSON","stringify","userId","postMessage","formData","FormData","append","handleFileChange","event","file","target","files","type","startsWith","size","toggleLike","find","p","endpoint","toggleComments","isCommentsOpen","leaveCommunity","$router","push","mounted"],"sources":["/Users/suhayb/MijnProjecten/cuuruuvoovii16/election-frontend/src/components/CommunityChatPage.vue"],"sourcesContent":["<template>\n  <div class=\"community-chat\">\n    <div class=\"chat-header\">\n      <h2>Community Chat App</h2>\n      <button class=\"leave-button\" @click=\"leaveCommunity\">Leave</button>\n    </div>\n\n    <div class=\"new-message-box\">\n      <textarea v-model=\"newMessage\" placeholder=\"Type message here...\"></textarea>\n      <input type=\"file\" @change=\"handleFileChange\" accept=\"image/*\" />\n      <button class=\"post-button\" @click=\"postMessage\">Post</button>\n    </div>\n\n    <div class=\"posts-container\">\n      <div v-for=\"message in chatMessages\" :key=\"message.id\" class=\"message-box\">\n        <div class=\"user-info\">\n          <span class=\"user-avatar\"></span>\n          <span class=\"username\">{{ message.username }}</span>\n        </div>\n        <img v-if=\"message.image\" :src=\"message.image\" alt=\"Post Image\" class=\"message-image\" />\n        <p class=\"message-area\">{{ message.text }}</p>\n\n        <div class=\"message-actions\">\n          <button @click=\"toggleComments(message.id)\">\n            {{ isCommentsOpen(message.id) ? \"Hide\" : \"Show\" }} Comments\n          </button>\n          <button @click=\"toggleLike(message.id)\">\n            {{ message.isLiked ? \"Unlike\" : \"Like\" }}\n          </button>\n          <span>{{ message.likeCount }} Likes</span>\n          <!-- Weergave van het aantal likes -->\n          <button @click=\"shareMessage(message.id)\">Share</button>\n        </div>\n\n\n        <div v-if=\"isCommentsOpen(message.id)\" class=\"comments-section\">\n          <div v-for=\"comment in message.comments\" :key=\"comment.id\" class=\"comment\">\n            <span class=\"comment-username\">{{ comment.username }}</span>\n            <p class=\"comment-text\">{{ comment.content }}</p>\n          </div>\n          <div class=\"new-comment-box\">\n            <textarea v-model=\"newComments\" placeholder=\"Add a comment...\" />\n            <button @click=\"addComment(message.id)\">Comment</button>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { API_URL } from \"@/config\";\nimport jwtDecode from \"jwt-decode\";\n\nexport default {\n  name: \"CommunityChatComponent\",\n  props: [\"communityId\"],\n  data() {\n    return {\n      chatMessages: [],\n      newMessage: \"\",\n      selectedFile: null,\n      openComments: {},\n      newComments: \"\",\n    };\n  },\n  methods: {\n    async fetchPosts() {\n      try {\n        const token = localStorage.getItem(\"token\");\n        const response = await fetch(`${API_URL}/api/communities/${this.communityId}/posts`, {\n          method: \"GET\",\n          headers: { Authorization: `Bearer ${token}` },\n        });\n\n        if (!response.ok) throw new Error(\"Failed to fetch posts\");\n        const posts = await response.json();\n\n        this.chatMessages = posts.map((post) => ({\n          id: post.id,\n          text: post.content,\n          username: post.user?.username || \"Anonymous\",\n          image: post.image ? `data:image/jpeg;base64,${post.image}` : null,\n          likeCount: post.likeCount,\n          isLiked: post.likedbyuser,\n          comments: post.comments || [],\n        }));\n      } catch (error) {\n        console.error(\"Error fetching posts:\", error);\n      }\n    },\n\n    async fetchComments(postId) {\n      const token = localStorage.getItem(\"token\");\n      try {\n        const response = await fetch(`${API_URL}/api/comments/${postId}/getComments`, {\n          method: \"GET\",\n          headers: { Authorization: `Bearer ${token}` },\n        });\n\n        if (!response.ok) throw new Error(\"Failed to fetch comments\");\n        const comments = await response.json();\n\n        const postIndex = this.chatMessages.findIndex((msg) => msg.id === postId);\n        if (postIndex !== -1) {\n          this.chatMessages[postIndex].comments = comments;\n        }\n      } catch (error) {\n        console.error(\"Error fetching comments:\", error);\n      }\n    },\n\n    async addComment(messageId) {\n      const token = localStorage.getItem(\"token\");\n      if (!token) return alert(\"User not authenticated. Please log in.\");\n\n      try {\n        const decodedToken = jwtDecode(token);\n        const response = await fetch(`${API_URL}/api/comments/${messageId}/saveComments`, {\n          method: \"POST\",\n          headers: {\n            Authorization: `Bearer ${token}`,\n            \"Content-Type\": \"application/json\",\n          },\n          body: JSON.stringify({\n            content: this.newComments,\n            userId: decodedToken.id,\n          }),\n        });\n\n        if (!response.ok) throw new Error(\"Failed to add comment\");\n        this.newComments = \"\";\n        await this.fetchComments(messageId);\n      } catch (error) {\n        console.error(\"Error adding comment:\", error);\n      }\n    },\n\n    async postMessage() {\n      const token = localStorage.getItem(\"token\");\n      if (!token) return alert(\"User not authenticated. Please log in.\");\n\n      try {\n        const decodedToken = jwtDecode(token);\n        const formData = new FormData();\n        formData.append(\"content\", this.newMessage);\n        formData.append(\"userid\", decodedToken.id);\n        if (this.selectedFile) formData.append(\"image\", this.selectedFile);\n\n        const response = await fetch(`${API_URL}/api/communities/${this.communityId}/posts/create`, {\n          method: \"POST\",\n          headers: { Authorization: `Bearer ${token}` },\n          body: formData,\n        });\n\n        if (!response.ok) throw new Error(\"Failed to post message\");\n\n        this.newMessage = \"\";\n        this.selectedFile = null;\n        this.fetchPosts();\n      } catch (error) {\n        console.error(\"Error posting message:\", error);\n      }\n    },\n\n    handleFileChange(event) {\n      const file = event.target.files[0];\n      if (!file.type.startsWith(\"image/\")) {\n        return alert(\"Please upload a valid image file.\");\n      }\n      if (file.size > 5 * 1024 * 1024) {\n        return alert(\"File size exceeds 5MB. Please upload a smaller file.\");\n      }\n      this.selectedFile = file;\n    },\n    async toggleLike(messageId) {\n      const token = localStorage.getItem(\"token\");\n      if (!token) return alert(\"Not authenticated.\");\n\n      const post = this.chatMessages.find((p) => p.id === messageId);\n      if (!post) return;\n\n      // Bepaal of we gaan liken of unliken\n      const method = post.isLiked ? \"DELETE\" : \"POST\";\n      const userId = jwtDecode(token).id;\n\n      let endpoint;\n      if (post.isLiked) {\n        // UNLIKE\n        endpoint = `${API_URL}/api/communities/${this.communityId}/posts/${messageId}/unlike?userId=${userId}`;\n      } else {\n        // LIKE\n        endpoint = `${API_URL}/api/communities/${this.communityId}/posts/${messageId}/like?userId=${userId}`;\n      }\n\n      const response = await fetch(endpoint, {\n        method,\n        headers: { Authorization: `Bearer ${token}` },\n      });\n      if (!response.ok) {\n        console.error(\"Error toggling like\");\n        return;\n      }\n\n      // Optimistic update\n      post.isLiked = !post.isLiked;\n      post.likeCount = post.isLiked ? post.likeCount + 1 : post.likeCount - 1;\n    }\n\n\n    ,\n\n    toggleComments(messageId) {\n      this.openComments[messageId] = !this.openComments[messageId];\n      if (this.openComments[messageId]) {\n        this.fetchComments(messageId);\n      }\n    },\n\n    isCommentsOpen(messageId) {\n      return !!this.openComments[messageId];\n    },\n\n    async leaveCommunity() {\n      const token = localStorage.getItem(\"token\");\n      if (!token) return alert(\"User not authenticated. Please log in.\");\n\n      try {\n        const decodedToken = jwtDecode(token);\n        const response = await fetch(`${API_URL}/api/communities/${this.communityId}/leave?userId=${decodedToken.id}`, {\n          method: \"DELETE\",\n          headers: {Authorization: `Bearer ${token}`},\n        });\n\n        if (!response.ok) throw new Error(\"Failed to leave community\");\n        alert(\"You have left the community.\");\n        this.$router.push({name: \"Communities\"});\n      } catch (error) {\n        console.error(\"Error leaving community:\", error);\n      }\n    },\n  },\n  mounted() {\n    this.fetchPosts();\n  },\n};\n</script>\n\n<<style>\n* {\n  font-family: \"Outfit\", sans-serif;\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\nhtml, body {\n  height: 100%;\n\n}\n\n.community-chat {\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n  align-items: center;\n  background-color: #F9F9F9;\n  color: #17003C;\n  width: 100vw;\n  height: 100vh;\n  padding: 1.5rem;\n  overflow: hidden;\n}\n\n.chat-header {\n  flex-shrink: 0;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  width: 100%;\n  max-width: 800px;\n  margin-bottom: 1rem;\n}\n\n.new-message-box {\n  flex-shrink: 0;\n  background-color: #17003C;\n  padding: 20px;\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n  margin-bottom: 20px;\n  width: 100%;\n  max-width: 800px;\n  border-radius: 10px;\n}\n\ntextarea {\n  width: 100%;\n  border-radius: 10px;\n  padding: 10px;\n  font-size: 1em;\n  margin: 10px 0;\n  border: none;\n  background-color: white;\n  color: black;\n}\n\n.post-button {\n  background-color: #FF9900;\n  color: white;\n  padding: 8px 20px;\n  border: none;\n  border-radius: 5px;\n  cursor: pointer;\n}\n\n.post-button:hover {\n  background-color: #E68A00;\n}\n\n.posts-container {\n  flex-grow: 1;\n  width: 100%;\n  max-width: 800px;\n  overflow-y: auto;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 10px;\n  padding: 10px 0;\n}\n\n.message-box {\n  background-color: #17003C;\n  color: white;\n  border-radius: 15px;\n  padding: 15px;\n  margin-bottom: 10px;\n  width: 90%;\n  max-width: 600px;\n}\n\n.user-info {\n  display: flex;\n  align-items: center;\n  margin-bottom: 10px;\n}\n\n.user-avatar {\n  width: 40px;\n  height: 40px;\n  border-radius: 50%;\n  background-color: gray;\n  margin-right: 10px;\n}\n\n.username {\n  font-weight: bold;\n  color: #FF9900;\n}\n\n.message-area {\n  background-color: white;\n  color: black;\n  padding: 10px;\n  border-radius: 10px;\n  font-size: 1em;\n  margin-top: 10px;\n}\n\n.message-image {\n  max-width: 50%;\n  border-radius: 10px;\n  margin-top: 10px;\n}\n\n.message-actions {\n  display: flex;\n  justify-content: space-around;\n  margin-top: 10px;\n}\n\n.message-actions button {\n  background: none;\n  border: none;\n  color: #FF9900;\n  cursor: pointer;\n  font-size: 1em;\n}\n\n.message-actions button:hover {\n  color: #E68A00;\n}\n\n.comments-section {\n  margin-top: 10px;\n  padding: 10px;\n  background-color: #2A1E54;\n  border-radius: 10px;\n}\n\n.comment {\n  margin-bottom: 5px;\n  padding: 10px;\n}\n\n.comment .username {\n  font-weight: bold;\n  color: #FF9900;\n}\n.comment-username{\n  color: yellow;\n  margin-top: 5px;\n  background-color: white;\n  border-radius: 8px;\n  padding: 10px;\n}\n\n.comment-text {\n  margin-top: 5px;\n  background-color: white;\n  color: black;\n  border-radius: 8px;\n  padding: 10px;\n}\n.comment-username{\n  color: #FF9900;\n}\n.new-comment-box input,button{\n  padding: 10px;\n}\n.new-comment-box button{\n  padding: 3px;\n  border-radius: 5px;\n}\n.leave-button {\n  background-color: #E74C3C;\n  color: white;\n  padding: 10px 20px;\n  border: none;\n  border-radius: 5px;\n  cursor: pointer;\n  font-size: 1em;\n}\n\n.leave-button:hover {\n  background-color: #C0392B;\n}\n\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}