{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { mapGetters, mapActions } from 'vuex';\nexport default {\n  name: 'CommunityChatComponent',\n  props: ['communityId'],\n  data() {\n    return {\n      onlineUsers: [],\n      chatMessages: [],\n      newMessage: '',\n      typingUser: '',\n      isTyping: false,\n      socket: null\n    };\n  },\n  computed: {\n    ...mapGetters(['userId'])\n  },\n  methods: {\n    ...mapActions(['leaveCommunity']),\n    async leaveCommunity() {\n      try {\n        const response = await fetch(`http://localhost:8084/api/communities/${this.communityId}/leave?userId=${this.userId}`, {\n          method: 'DELETE'\n        });\n        if (!response.ok) throw new Error('Failed to leave the community');\n        this.leaveCommunity();\n        this.$router.push({\n          name: 'Communities'\n        });\n      } catch (error) {\n        alert('Error leaving community. Please try again later.');\n        console.error(error);\n      }\n    },\n    async sendMessage() {\n      if (!this.newMessage.trim()) return;\n      const messageData = {\n        userId: this.userId,\n        text: this.newMessage,\n        color: '#f39c12',\n        communityId: this.communityId\n      };\n      try {\n        const response = await fetch(`http://localhost:8084/api/communities/${this.communityId}/messages`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify(messageData)\n        });\n        if (!response.ok) throw new Error('Failed to send message');\n        const newMessage = await response.json();\n        this.chatMessages.push({\n          userId: this.userId,\n          username: 'You',\n          text: newMessage.text,\n          color: newMessage.color\n        });\n        this.newMessage = '';\n        this.socket.emit('stopTyping', this.userId);\n      } catch (error) {\n        alert('Error sending message. Please try again later.');\n        console.error(error);\n      }\n    },\n    notifyTyping() {\n      if (!this.isTyping) {\n        this.socket.emit('typing', {\n          userId: this.userId,\n          communityId: this.communityId\n        });\n        this.isTyping = true;\n      }\n      clearTimeout(this.typingTimeout);\n      this.typingTimeout = setTimeout(() => {\n        this.socket.emit('stopTyping', this.userId);\n        this.isTyping = false;\n      }, 1000);\n    },\n    setupWebSocket() {\n      this.socket = new WebSocket(`ws://localhost:8084/api/communities/${this.communityId}/ws`);\n      this.socket.onopen = () => console.log('Connected to WebSocket');\n      this.socket.onmessage = event => {\n        const messageData = JSON.parse(event.data);\n        if (messageData.type === 'newMessage') {\n          this.chatMessages.push(messageData.message);\n        } else if (messageData.type === 'typing') {\n          this.typingUser = messageData.user;\n          this.isTyping = true;\n        } else if (messageData.type === 'stopTyping') {\n          this.isTyping = false;\n          this.typingUser = '';\n        }\n      };\n      this.socket.onclose = () => console.log('Disconnected from WebSocket');\n    }\n  },\n  async created() {\n    this.setupWebSocket();\n    try {\n      const usersResponse = await fetch(`http://localhost:8084/api/communities/${this.communityId}/users`);\n      if (usersResponse.ok) this.onlineUsers = await usersResponse.json();\n      const messagesResponse = await fetch(`http://localhost:8084/api/communities/${this.communityId}/messages`);\n      if (messagesResponse.ok) this.chatMessages = await messagesResponse.json();\n    } catch (error) {\n      console.error('Error loading initial data:', error);\n    }\n  }\n};","map":{"version":3,"names":["mapGetters","mapActions","name","props","data","onlineUsers","chatMessages","newMessage","typingUser","isTyping","socket","computed","methods","leaveCommunity","response","fetch","communityId","userId","method","ok","Error","$router","push","error","alert","console","sendMessage","trim","messageData","text","color","headers","body","JSON","stringify","json","username","emit","notifyTyping","clearTimeout","typingTimeout","setTimeout","setupWebSocket","WebSocket","onopen","log","onmessage","event","parse","type","message","user","onclose","created","usersResponse","messagesResponse"],"sources":["/Users/suhayb/Documenten/cuuruuvoovii16/election-frontend/src/components/CommunityChatPage.vue"],"sourcesContent":["<template>\n  <div class=\"community-chat\">\n    <div class=\"chat-header\">\n      <h2>Community Chat App</h2>\n    </div>\n    <div class=\"users-online\">\n      <h4>{{ onlineUsers.length }} users online</h4>\n      <ul>\n        <li v-for=\"user in onlineUsers\" :key=\"user.id\" :class=\"{'current-user': user.id === userId}\">\n          <span :style=\"{ backgroundColor: user.color }\" class=\"user-avatar\"></span>\n          <span>{{ user.name }} <span v-if=\"user.id === userId\">(you)</span></span>\n        </li>\n      </ul>\n    </div>\n    <div class=\"chat-messages\">\n      <div v-for=\"(message, index) in chatMessages\" :key=\"index\" :class=\"{'own-message': message.userId === userId}\" class=\"chat-message\">\n        <span :style=\"{ backgroundColor: message.color }\" class=\"message-avatar\"></span>\n        <div class=\"message-content\">\n          <span class=\"message-user\">{{ message.username }}</span>\n          <p>{{ message.text }}</p>\n        </div>\n      </div>\n      <p v-if=\"isTyping\" class=\"typing-indicator\">{{ typingUser }} is typing...</p>\n    </div>\n    <button @click=\"leaveCommunity\" class=\"leave-button\">Leave Community</button>\n    <div class=\"message-input\">\n      <input type=\"text\" v-model=\"newMessage\" @input=\"notifyTyping\" @keyup.enter=\"sendMessage\" placeholder=\"Enter your message and press ENTER\" />\n      <button :disabled=\"!newMessage.trim()\" @click=\"sendMessage\" class=\"send-button\">Send</button>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { mapGetters, mapActions } from 'vuex';\n\nexport default {\n  name: 'CommunityChatComponent',\n  props: ['communityId'],\n  data() {\n    return {\n      onlineUsers: [],\n      chatMessages: [],\n      newMessage: '',\n      typingUser: '',\n      isTyping: false,\n      socket: null,\n    };\n  },\n  computed: {\n    ...mapGetters(['userId']),\n  },\n  methods: {\n    ...mapActions(['leaveCommunity']),\n\n    async leaveCommunity() {\n      try {\n        const response = await fetch(`http://localhost:8084/api/communities/${this.communityId}/leave?userId=${this.userId}`, {\n          method: 'DELETE',\n        });\n        if (!response.ok) throw new Error('Failed to leave the community');\n        this.leaveCommunity();\n        this.$router.push({ name: 'Communities' });\n      } catch (error) {\n        alert('Error leaving community. Please try again later.');\n        console.error(error);\n      }\n    },\n\n    async sendMessage() {\n      if (!this.newMessage.trim()) return;\n\n      const messageData = {\n        userId: this.userId,\n        text: this.newMessage,\n        color: '#f39c12',\n        communityId: this.communityId,\n      };\n\n      try {\n        const response = await fetch(`http://localhost:8084/api/communities/${this.communityId}/messages`, {\n          method: 'POST',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify(messageData),\n        });\n        if (!response.ok) throw new Error('Failed to send message');\n\n        const newMessage = await response.json();\n        this.chatMessages.push({\n          userId: this.userId,\n          username: 'You',\n          text: newMessage.text,\n          color: newMessage.color,\n        });\n        this.newMessage = '';\n        this.socket.emit('stopTyping', this.userId);\n      } catch (error) {\n        alert('Error sending message. Please try again later.');\n        console.error(error);\n      }\n    },\n\n    notifyTyping() {\n      if (!this.isTyping) {\n        this.socket.emit('typing', { userId: this.userId, communityId: this.communityId });\n        this.isTyping = true;\n      }\n      clearTimeout(this.typingTimeout);\n      this.typingTimeout = setTimeout(() => {\n        this.socket.emit('stopTyping', this.userId);\n        this.isTyping = false;\n      }, 1000);\n    },\n\n    setupWebSocket() {\n      this.socket = new WebSocket(`ws://localhost:8084/api/communities/${this.communityId}/ws`);\n      this.socket.onopen = () => console.log('Connected to WebSocket');\n      this.socket.onmessage = (event) => {\n        const messageData = JSON.parse(event.data);\n        if (messageData.type === 'newMessage') {\n          this.chatMessages.push(messageData.message);\n        } else if (messageData.type === 'typing') {\n          this.typingUser = messageData.user;\n          this.isTyping = true;\n        } else if (messageData.type === 'stopTyping') {\n          this.isTyping = false;\n          this.typingUser = '';\n        }\n      };\n      this.socket.onclose = () => console.log('Disconnected from WebSocket');\n    },\n  },\n\n  async created() {\n    this.setupWebSocket();\n    try {\n      const usersResponse = await fetch(`http://localhost:8084/api/communities/${this.communityId}/users`);\n      if (usersResponse.ok) this.onlineUsers = await usersResponse.json();\n\n      const messagesResponse = await fetch(`http://localhost:8084/api/communities/${this.communityId}/messages`);\n      if (messagesResponse.ok) this.chatMessages = await messagesResponse.json();\n    } catch (error) {\n      console.error('Error loading initial data:', error);\n    }\n  },\n};\n</script>\n\n<style scoped>\n* {\n  font-family: \"Outfit\", sans-serif;\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\nhtml, body {\n  height: 100%;\n  overflow: hidden;\n}\n\n.community-chat {\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n  align-items: center;\n  background-color: #F9F9F9;\n  color: #17003C;\n  width: 100vw;\n  height: 100vh;\n  padding: 1.5rem;\n  overflow: hidden;\n}\n\n.chat-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  width: 100%;\n  max-width: 800px;\n  margin-bottom: 1rem;\n}\n\n.leave-button {\n  background-color: #FF9900;\n  color: white;\n  border: 7px solid #17003C;\n  padding: 0.5rem 1rem;\n  font-size: 1.5rem;\n  cursor: pointer;\n  transition: background-color 0.3s ease, border-color 0.3s ease;\n  border-radius: 100px;\n}\n\n.leave-button:hover {\n  background-color: #17003C;\n  border-color: #FF9900;\n}\n\n.users-online {\n  background-color: #F1F1F1;\n  padding: 1rem;\n  border-radius: 12px;\n  margin-bottom: 1rem;\n  width: 100%;\n  max-width: 800px;\n}\n\n.users-online ul {\n  list-style: none;\n}\n\n.users-online li {\n  display: flex;\n  align-items: center;\n  margin-bottom: 0.5rem;\n  font-weight: 600;\n}\n\n.user-avatar {\n  width: 15px;\n  height: 15px;\n  border-radius: 50%;\n  margin-right: 0.5rem;\n}\n\n.chat-messages {\n  background-color: #F1F1F1;\n  padding: 1rem;\n  border-radius: 12px;\n  flex: 1;\n  width: 100%;\n  max-width: 800px;\n  overflow-y: auto;\n  margin-bottom: 1rem;\n}\n\n.chat-message {\n  display: flex;\n  align-items: center;\n  margin-bottom: 1rem;\n}\n\n.message-avatar {\n  width: 20px;\n  height: 20px;\n  border-radius: 50%;\n  margin-right: 0.75rem;\n}\n\n.message-content {\n  background-color: #E0E0E0;\n  padding: 0.5rem 1rem;\n  border-radius: 12px;\n}\n\n.own-message .message-content {\n  background-color: #D1EAFF;\n}\n\n.message-user {\n  font-weight: bold;\n  display: block;\n  margin-bottom: 0.3rem;\n}\n\n.message-input {\n  display: flex;\n  align-items: center;\n  width: 100%;\n  max-width: 800px;\n  padding-top: 1rem;\n  padding-bottom: 1rem;\n  background-color: #F9F9F9;\n  position: sticky;\n  bottom: 0;\n}\n\n.message-input input {\n  flex: 1;\n  padding: 1rem;\n  border-radius: 50px;\n  border: 1px solid #ccc;\n  margin-right: 1rem;\n  font-size: 1.2rem;\n}\n\n.send-button {\n  background-color: #FF9900;\n  color: white;\n  border: 7px solid #17003C;\n  padding: 0.8rem 1.5rem;\n  font-size: 1.5rem;\n  cursor: pointer;\n  border-radius: 50px;\n  transition: background-color 0.3s ease, border-color 0.3s ease;\n}\n\n.send-button:hover {\n  background-color: #17003C;\n  border-color: #FF9900;\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}