{"ast":null,"code":"import { createElementVNode as _createElementVNode, vModelText as _vModelText, withDirectives as _withDirectives, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, createCommentVNode as _createCommentVNode } from \"vue\";\nconst _hoisted_1 = {\n  class: \"community-chat\"\n};\nconst _hoisted_2 = {\n  class: \"chat-header\"\n};\nconst _hoisted_3 = {\n  class: \"new-message-box\"\n};\nconst _hoisted_4 = {\n  class: \"posts-container\"\n};\nconst _hoisted_5 = {\n  class: \"user-info\"\n};\nconst _hoisted_6 = {\n  class: \"username\"\n};\nconst _hoisted_7 = [\"src\"];\nconst _hoisted_8 = {\n  class: \"message-area\"\n};\nconst _hoisted_9 = {\n  class: \"message-actions\"\n};\nconst _hoisted_10 = [\"onClick\"];\nconst _hoisted_11 = [\"onClick\"];\nconst _hoisted_12 = [\"onClick\"];\nconst _hoisted_13 = {\n  key: 1,\n  class: \"comments-section\"\n};\nconst _hoisted_14 = {\n  class: \"comment-username\"\n};\nconst _hoisted_15 = {\n  class: \"comment-text\"\n};\nconst _hoisted_16 = {\n  class: \"new-comment-box\"\n};\nconst _hoisted_17 = [\"onClick\"];\nexport function render(_ctx, _cache) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"div\", _hoisted_2, [_cache[5] || (_cache[5] = _createElementVNode(\"h2\", null, \"Community Chat App\", -1 /* HOISTED */)), _createElementVNode(\"button\", {\n    class: \"leave-button\",\n    onClick: _cache[0] || (_cache[0] = (...args) => _ctx.leaveCommunity && _ctx.leaveCommunity(...args))\n  }, \"Leave\")]), _createElementVNode(\"div\", _hoisted_3, [_withDirectives(_createElementVNode(\"textarea\", {\n    \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => _ctx.newMessage = $event),\n    placeholder: \"Type message here...\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, _ctx.newMessage]]), _createElementVNode(\"input\", {\n    type: \"file\",\n    onChange: _cache[2] || (_cache[2] = (...args) => _ctx.handleFileChange && _ctx.handleFileChange(...args)),\n    accept: \"image/*\"\n  }, null, 32 /* NEED_HYDRATION */), _createElementVNode(\"button\", {\n    class: \"post-button\",\n    onClick: _cache[3] || (_cache[3] = (...args) => _ctx.postMessage && _ctx.postMessage(...args))\n  }, \"Post\")]), _createElementVNode(\"div\", _hoisted_4, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList(_ctx.chatMessages, message => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: message.id,\n      class: \"message-box\"\n    }, [_createElementVNode(\"div\", _hoisted_5, [_cache[6] || (_cache[6] = _createElementVNode(\"span\", {\n      class: \"user-avatar\"\n    }, null, -1 /* HOISTED */)), _createElementVNode(\"span\", _hoisted_6, _toDisplayString(message.username), 1 /* TEXT */)]), message.image ? (_openBlock(), _createElementBlock(\"img\", {\n      key: 0,\n      src: message.image,\n      alt: \"Post Image\",\n      class: \"message-image\"\n    }, null, 8 /* PROPS */, _hoisted_7)) : _createCommentVNode(\"v-if\", true), _createElementVNode(\"p\", _hoisted_8, _toDisplayString(message.text), 1 /* TEXT */), _createElementVNode(\"div\", _hoisted_9, [_createElementVNode(\"button\", {\n      onClick: $event => _ctx.toggleComments(message.id)\n    }, _toDisplayString(_ctx.isCommentsOpen(message.id) ? \"Hide\" : \"Show\") + \" Comments \", 9 /* TEXT, PROPS */, _hoisted_10), _createElementVNode(\"button\", {\n      onClick: $event => _ctx.likeMessage(message.id)\n    }, \" Like \", 8 /* PROPS */, _hoisted_11), _createElementVNode(\"span\", null, _toDisplayString(message.likeCount) + \" Likes\", 1 /* TEXT */), _createCommentVNode(\" Weergave van het aantal likes \"), _createElementVNode(\"button\", {\n      onClick: $event => _ctx.shareMessage(message.id)\n    }, \"Share\", 8 /* PROPS */, _hoisted_12)]), _ctx.isCommentsOpen(message.id) ? (_openBlock(), _createElementBlock(\"div\", _hoisted_13, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList(message.comments, comment => {\n      return _openBlock(), _createElementBlock(\"div\", {\n        key: comment.id,\n        class: \"comment\"\n      }, [_createElementVNode(\"span\", _hoisted_14, _toDisplayString(comment.username), 1 /* TEXT */), _createElementVNode(\"p\", _hoisted_15, _toDisplayString(comment.content), 1 /* TEXT */)]);\n    }), 128 /* KEYED_FRAGMENT */)), _createElementVNode(\"div\", _hoisted_16, [_withDirectives(_createElementVNode(\"textarea\", {\n      \"onUpdate:modelValue\": _cache[4] || (_cache[4] = $event => _ctx.newComments = $event),\n      placeholder: \"Add a comment...\"\n    }, null, 512 /* NEED_PATCH */), [[_vModelText, _ctx.newComments]]), _createElementVNode(\"button\", {\n      onClick: $event => _ctx.addComment(message.id)\n    }, \"Comment\", 8 /* PROPS */, _hoisted_17)])])) : _createCommentVNode(\"v-if\", true)]);\n  }), 128 /* KEYED_FRAGMENT */))])]);\n}","map":{"version":3,"names":["class","key","_createElementBlock","_hoisted_1","_createElementVNode","_hoisted_2","onClick","_cache","args","_ctx","leaveCommunity","_hoisted_3","$event","newMessage","placeholder","type","onChange","handleFileChange","accept","postMessage","_hoisted_4","_Fragment","_renderList","chatMessages","message","id","_hoisted_5","_hoisted_6","_toDisplayString","username","image","src","alt","_hoisted_7","_createCommentVNode","_hoisted_8","text","_hoisted_9","toggleComments","isCommentsOpen","_hoisted_10","likeMessage","_hoisted_11","likeCount","shareMessage","_hoisted_12","_hoisted_13","comments","comment","_hoisted_14","_hoisted_15","content","_hoisted_16","newComments","addComment","_hoisted_17"],"sources":["/Users/suhayb/MijnProjecten/cuuruuvoovii16/election-frontend/src/components/CommunityChatPage.vue"],"sourcesContent":["<template>\n  <div class=\"community-chat\">\n    <div class=\"chat-header\">\n      <h2>Community Chat App</h2>\n      <button class=\"leave-button\" @click=\"leaveCommunity\">Leave</button>\n    </div>\n\n    <div class=\"new-message-box\">\n      <textarea v-model=\"newMessage\" placeholder=\"Type message here...\"></textarea>\n      <input type=\"file\" @change=\"handleFileChange\" accept=\"image/*\" />\n      <button class=\"post-button\" @click=\"postMessage\">Post</button>\n    </div>\n\n    <div class=\"posts-container\">\n      <div v-for=\"message in chatMessages\" :key=\"message.id\" class=\"message-box\">\n        <div class=\"user-info\">\n          <span class=\"user-avatar\"></span>\n          <span class=\"username\">{{ message.username }}</span>\n        </div>\n        <img v-if=\"message.image\" :src=\"message.image\" alt=\"Post Image\" class=\"message-image\" />\n        <p class=\"message-area\">{{ message.text }}</p>\n\n        <div class=\"message-actions\">\n          <button @click=\"toggleComments(message.id)\">\n            {{ isCommentsOpen(message.id) ? \"Hide\" : \"Show\" }} Comments\n          </button>\n          <button @click=\"likeMessage(message.id)\">\n            Like\n          </button>\n          <span>{{ message.likeCount }} Likes</span> <!-- Weergave van het aantal likes -->\n          <button @click=\"shareMessage(message.id)\">Share</button>\n        </div>\n\n\n        <div v-if=\"isCommentsOpen(message.id)\" class=\"comments-section\">\n          <div v-for=\"comment in message.comments\" :key=\"comment.id\" class=\"comment\">\n            <span class=\"comment-username\">{{ comment.username }}</span>\n            <p class=\"comment-text\">{{ comment.content }}</p>\n          </div>\n          <div class=\"new-comment-box\">\n            <textarea v-model=\"newComments\" placeholder=\"Add a comment...\" />\n            <button @click=\"addComment(message.id)\">Comment</button>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { API_URL } from \"@/config\";\nimport jwtDecode from \"jwt-decode\";\n\nexport default {\n  name: \"CommunityChatComponent\",\n  props: [\"communityId\"],\n  data() {\n    return {\n      chatMessages: [],\n      newMessage: \"\",\n      selectedFile: null,\n      openComments: {},\n      newComments: \"\",\n    };\n  },\n  methods: {\n    async fetchPosts() {\n      try {\n        const token = localStorage.getItem(\"token\");\n        const response = await fetch(`${API_URL}/api/communities/${this.communityId}/posts?userId=${currentUserId}`, {\n          method: \"GET\",\n          headers: { Authorization: `Bearer ${token}` },\n        });\n\n        if (!response.ok) throw new Error(\"Failed to fetch posts\");\n\n        const posts = await response.json();\n\n        this.chatMessages = posts.map(post => {\n          // Check of currentUserId in likedByUsers zit\n          const userAlreadyLiked = post.likedByUsers.some(userObj => userObj.id === currentUserId);\n\n          return {\n            id: post.id,\n            text: post.content,\n            username: post.user?.username || \"Anonymous\",\n            image: post.image ? data:image/jpeg;base64,${post.image} : null,\n              likeCount: post.likeCount,\n            isLiked: userAlreadyLiked, // <-- Belangrijk\n            comments: post.comments || [],\n\n          };\n        });\n      } catch (error) {\n        console.error(\"Error fetching posts:\", error);\n      }\n    }\n    ,\n\n    async fetchComments(postId) {\n      const token = localStorage.getItem(\"token\");\n      try {\n        const response = await fetch(`${API_URL}/api/comments/${postId}/getComments`, {\n          method: \"GET\",\n          headers: { Authorization: `Bearer ${token}` },\n        });\n\n        if (!response.ok) throw new Error(\"Failed to fetch comments\");\n        const comments = await response.json();\n\n        const postIndex = this.chatMessages.findIndex((msg) => msg.id === postId);\n        if (postIndex !== -1) {\n          this.chatMessages[postIndex].comments = comments;\n        }\n      } catch (error) {\n        console.error(\"Error fetching comments:\", error);\n      }\n    },\n\n    async addComment(messageId) {\n      const token = localStorage.getItem(\"token\");\n      if (!token) return alert(\"User not authenticated. Please log in.\");\n\n      try {\n        const decodedToken = jwtDecode(token);\n        const response = await fetch(`${API_URL}/api/comments/${messageId}/saveComments`, {\n          method: \"POST\",\n          headers: {\n            Authorization: `Bearer ${token}`,\n            \"Content-Type\": \"application/json\",\n          },\n          body: JSON.stringify({\n            content: this.newComments,\n            userId: decodedToken.id,\n          }),\n        });\n\n        if (!response.ok) throw new Error(\"Failed to add comment\");\n        this.newComments = \"\";\n        await this.fetchComments(messageId);\n      } catch (error) {\n        console.error(\"Error adding comment:\", error);\n      }\n    },\n\n    async postMessage() {\n      const token = localStorage.getItem(\"token\");\n      if (!token) return alert(\"User not authenticated. Please log in.\");\n\n      try {\n        const decodedToken = jwtDecode(token);\n        const formData = new FormData();\n        formData.append(\"content\", this.newMessage);\n        formData.append(\"userid\", decodedToken.id);\n        if (this.selectedFile) formData.append(\"image\", this.selectedFile);\n\n        const response = await fetch(`${API_URL}/api/communities/${this.communityId}/posts/create`, {\n          method: \"POST\",\n          headers: { Authorization: `Bearer ${token}` },\n          body: formData,\n        });\n\n        if (!response.ok) throw new Error(\"Failed to post message\");\n\n        this.newMessage = \"\";\n        this.selectedFile = null;\n        this.fetchPosts();\n      } catch (error) {\n        console.error(\"Error posting message:\", error);\n      }\n    },\n\n    handleFileChange(event) {\n      const file = event.target.files[0];\n      if (!file.type.startsWith(\"image/\")) {\n        return alert(\"Please upload a valid image file.\");\n      }\n      if (file.size > 5 * 1024 * 1024) {\n        return alert(\"File size exceeds 5MB. Please upload a smaller file.\");\n      }\n      this.selectedFile = file;\n    },\n    async likeMessage(messageId) {\n      const token = localStorage.getItem(\"token\");\n      if (!token) return alert(\"User not authenticated. Please log in.\");\n\n      try {\n        // Decodeer de JWT-token om de userId te krijgen\n        const decodedToken = jwtDecode(token);\n\n        // Verstuur het verzoek naar de server met de userId in de query string\n        const response = await fetch(`${API_URL}/api/communities/${this.communityId}/posts/${messageId}/like?userId=${decodedToken.id}`, {\n          method: \"POST\",\n          headers: {\n            Authorization: `Bearer ${token}`,\n          },\n        });\n\n        if (!response.ok) throw new Error(\"Failed to like the post\");\n\n        alert(\"Post liked!\");\n\n        await this.fetchPosts();\n\n        // Vind het bericht en verhoog het aantal likes\n        const post = this.chatMessages.find(msg => msg.id === messageId);\n        if (post) {\n          post.likes += 1; // Verhoog het aantal likes met 1\n        }\n      } catch (error) {\n        console.error(\"Error liking post:\", error);\n      }\n\n    }\n\n    ,\n\n    toggleComments(messageId) {\n      this.openComments[messageId] = !this.openComments[messageId];\n      if (this.openComments[messageId]) {\n        this.fetchComments(messageId);\n      }\n    },\n\n    isCommentsOpen(messageId) {\n      return !!this.openComments[messageId];\n    },\n\n    async leaveCommunity() {\n      const token = localStorage.getItem(\"token\");\n      if (!token) return alert(\"User not authenticated. Please log in.\");\n\n      try {\n        const decodedToken = jwtDecode(token);\n        const response = await fetch(`${API_URL}/api/communities/${this.communityId}/leave?userId=${decodedToken.id}`, {\n          method: \"DELETE\",\n          headers: {Authorization: `Bearer ${token}`},\n        });\n\n        if (!response.ok) throw new Error(\"Failed to leave community\");\n        alert(\"You have left the community.\");\n        this.$router.push({name: \"Communities\"});\n      } catch (error) {\n        console.error(\"Error leaving community:\", error);\n      }\n    },\n  },\n  mounted() {\n    this.fetchPosts();\n  },\n};\n</script>\n\n<<style>\n* {\n  font-family: \"Outfit\", sans-serif;\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\nhtml, body {\n  height: 100%;\n\n}\n\n.community-chat {\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n  align-items: center;\n  background-color: #F9F9F9;\n  color: #17003C;\n  width: 100vw;\n  height: 100vh;\n  padding: 1.5rem;\n  overflow: hidden;\n}\n\n.chat-header {\n  flex-shrink: 0;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  width: 100%;\n  max-width: 800px;\n  margin-bottom: 1rem;\n}\n\n.new-message-box {\n  flex-shrink: 0;\n  background-color: #17003C;\n  padding: 20px;\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n  margin-bottom: 20px;\n  width: 100%;\n  max-width: 800px;\n  border-radius: 10px;\n}\n\ntextarea {\n  width: 100%;\n  border-radius: 10px;\n  padding: 10px;\n  font-size: 1em;\n  margin: 10px 0;\n  border: none;\n  background-color: white;\n  color: black;\n}\n\n.post-button {\n  background-color: #FF9900;\n  color: white;\n  padding: 8px 20px;\n  border: none;\n  border-radius: 5px;\n  cursor: pointer;\n}\n\n.post-button:hover {\n  background-color: #E68A00;\n}\n\n.posts-container {\n  flex-grow: 1;\n  width: 100%;\n  max-width: 800px;\n  overflow-y: auto;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 10px;\n  padding: 10px 0;\n}\n\n.message-box {\n  background-color: #17003C;\n  color: white;\n  border-radius: 15px;\n  padding: 15px;\n  margin-bottom: 10px;\n  width: 90%;\n  max-width: 600px;\n}\n\n.user-info {\n  display: flex;\n  align-items: center;\n  margin-bottom: 10px;\n}\n\n.user-avatar {\n  width: 40px;\n  height: 40px;\n  border-radius: 50%;\n  background-color: gray;\n  margin-right: 10px;\n}\n\n.username {\n  font-weight: bold;\n  color: #FF9900;\n}\n\n.message-area {\n  background-color: white;\n  color: black;\n  padding: 10px;\n  border-radius: 10px;\n  font-size: 1em;\n  margin-top: 10px;\n}\n\n.message-image {\n  max-width: 50%;\n  border-radius: 10px;\n  margin-top: 10px;\n}\n\n.message-actions {\n  display: flex;\n  justify-content: space-around;\n  margin-top: 10px;\n}\n\n.message-actions button {\n  background: none;\n  border: none;\n  color: #FF9900;\n  cursor: pointer;\n  font-size: 1em;\n}\n\n.message-actions button:hover {\n  color: #E68A00;\n}\n\n.comments-section {\n  margin-top: 10px;\n  padding: 10px;\n  background-color: #2A1E54;\n  border-radius: 10px;\n}\n\n.comment {\n  margin-bottom: 5px;\n  padding: 10px;\n}\n\n.comment .username {\n  font-weight: bold;\n  color: #FF9900;\n}\n.comment-username{\n  color: yellow;\n  margin-top: 5px;\n  background-color: white;\n  border-radius: 8px;\n  padding: 10px;\n}\n\n.comment-text {\n  margin-top: 5px;\n  background-color: white;\n  color: black;\n  border-radius: 8px;\n  padding: 10px;\n}\n.comment-username{\n  color: #FF9900;\n}\n.new-comment-box input,button{\n  padding: 10px;\n}\n.new-comment-box button{\n  padding: 3px;\n  border-radius: 5px;\n}\n.leave-button {\n  background-color: #E74C3C;\n  color: white;\n  padding: 10px 20px;\n  border: none;\n  border-radius: 5px;\n  cursor: pointer;\n  font-size: 1em;\n}\n\n.leave-button:hover {\n  background-color: #C0392B;\n}\n\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}