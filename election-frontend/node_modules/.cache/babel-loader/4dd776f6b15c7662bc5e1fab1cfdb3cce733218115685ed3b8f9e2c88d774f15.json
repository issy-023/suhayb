{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport SockJS from \"sockjs-client\";\nimport { Stomp } from \"@stomp/stompjs\";\nexport default {\n  name: \"LiveChatPageComponent\",\n  data() {\n    return {\n      showUsernamePage: true,\n      username: \"\",\n      messages: [],\n      newMessage: \"\",\n      isConnecting: true,\n      stompClient: null,\n      colors: [\"#2196F3\", \"#32c787\", \"#00BCD4\", \"#ff5652\", \"#ffc107\", \"#ff85af\", \"#FF9800\", \"#39bbb0\"]\n    };\n  },\n  created() {\n    const storedUsername = localStorage.getItem('username');\n    if (!storedUsername) {\n      this.$router.push('/login');\n      return;\n    }\n    this.username = storedUsername;\n    this.showUsernamePage = false;\n    this.connect();\n  },\n  methods: {\n    connect() {\n      if (this.username.trim() !== \"\") {\n        this.showUsernamePage = false;\n        this.isConnecting = true;\n        const socket = new SockJS(\"http://localhost:8084/ws\");\n        this.stompClient = Stomp.over(() => socket);\n        this.stompClient.connect({}, this.onConnected, this.onError);\n      }\n    },\n    onConnected() {\n      this.stompClient.subscribe(\"/topic/public\", this.onMessageReceived);\n      this.stompClient.send(\"/app/chat.addUser\", {}, JSON.stringify({\n        sender: this.username,\n        type: \"JOIN\"\n      }));\n      this.isConnecting = false;\n    },\n    onError() {\n      this.isConnecting = false;\n      alert(\"Could not connect to WebSocket server. Please refresh the page to try again.\");\n    },\n    sendMessage() {\n      if (this.newMessage.trim() !== \"\" && this.stompClient && this.stompClient.connected) {\n        const chatMessage = {\n          sender: this.username,\n          content: this.newMessage,\n          type: \"CHAT\"\n        };\n        this.stompClient.send(\"/app/chat.sendMessage\", {}, JSON.stringify(chatMessage));\n        this.newMessage = \"\";\n      } else {\n        console.error(\"STOMP connection is not active.\");\n        alert(\"Unable to send message. Please ensure you are connected to the chat.\");\n      }\n    },\n    onMessageReceived(payload) {\n      const message = JSON.parse(payload.body);\n      if (message.type === \"JOIN\") {\n        message.content = `${message.sender} joined!`;\n      } else if (message.type === \"LEAVE\") {\n        message.content = `${message.sender} left!`;\n      }\n      this.messages.push(message);\n    }\n  }\n};","map":{"version":3,"names":["SockJS","Stomp","name","data","showUsernamePage","username","messages","newMessage","isConnecting","stompClient","colors","created","storedUsername","localStorage","getItem","$router","push","connect","methods","trim","socket","over","onConnected","onError","subscribe","onMessageReceived","send","JSON","stringify","sender","type","alert","sendMessage","connected","chatMessage","content","console","error","payload","message","parse","body"],"sources":["/Users/suhayb/Documenten/cuuruuvoovii16/election-frontend/src/components/LiveChatPageComponent.vue"],"sourcesContent":["<template>\n  <div class=\"chat-wrapper\">\n    <noscript>\n      <h2>Sorry! Your browser doesn't support Javascript</h2>\n    </noscript>\n\n    <div v-if=\"showUsernamePage\" id=\"username-page\">\n      <div class=\"username-page-container\">\n        <h1 class=\"title\">Type your username to enter the Chatroom</h1>\n        <form @submit.prevent=\"connect\">\n          <div class=\"form-group\">\n            <input\n                type=\"text\"\n                v-model=\"username\"\n                placeholder=\"Username\"\n                autocomplete=\"off\"\n                class=\"form-control\"\n            />\n          </div>\n          <div class=\"form-group\">\n            <button type=\"submit\" class=\"accent username-submit\">\n              Start Chatting\n            </button>\n          </div>\n        </form>\n      </div>\n    </div>\n\n    <div v-if=\"!showUsernamePage\" id=\"chat-page\">\n      <div class=\"chat-container\">\n        <div class=\"chat-header\">\n          <h2>LiveChat</h2>\n        </div>\n        <div class=\"connecting\" v-if=\"isConnecting\">\n          Connecting...\n        </div>\n        <ul id=\"messageArea\">\n          <li v-for=\"(message, index) in messages\" :key=\"index\" :class=\"{'self': message.sender === username, 'other': message.sender !== username}\">\n            <div class=\"message\">\n              <div class=\"sender\">{{ message.sender }}</div>\n              <p>{{ message.content }}</p>\n            </div>\n          </li>\n        </ul>\n        <form @submit.prevent=\"sendMessage\">\n          <div class=\"form-group\">\n            <div class=\"input-group clearfix\">\n              <input\n                  type=\"text\"\n                  v-model=\"newMessage\"\n                  placeholder=\"Type a message...\"\n                  autocomplete=\"off\"\n                  class=\"form-control\"\n              />\n              <button type=\"submit\" class=\"primary\">Send</button>\n            </div>\n          </div>\n        </form>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport SockJS from \"sockjs-client\";\nimport { Stomp } from \"@stomp/stompjs\";\n\nexport default {\n  name: \"LiveChatPageComponent\",\n  data() {\n    return {\n      showUsernamePage: true,\n      username: \"\",\n      messages: [],\n      newMessage: \"\",\n      isConnecting: true,\n      stompClient: null,\n      colors: [\n        \"#2196F3\", \"#32c787\", \"#00BCD4\", \"#ff5652\",\n        \"#ffc107\", \"#ff85af\", \"#FF9800\", \"#39bbb0\"\n      ]\n    };\n  },\n  created() {\n    const storedUsername = localStorage.getItem('username');\n    if (!storedUsername) {\n      this.$router.push('/login');\n      return;\n    }\n    this.username = storedUsername;\n    this.showUsernamePage = false;\n    this.connect();\n  },\n  methods: {\n    connect() {\n      if (this.username.trim() !== \"\") {\n        this.showUsernamePage = false;\n        this.isConnecting = true;\n        const socket = new SockJS(\"http://localhost:8084/ws\");\n        this.stompClient = Stomp.over(() => socket);\n        this.stompClient.connect({}, this.onConnected, this.onError);\n      }\n    },\n    onConnected() {\n      this.stompClient.subscribe(\"/topic/public\", this.onMessageReceived);\n      this.stompClient.send(\n          \"/app/chat.addUser\",\n          {},\n          JSON.stringify({ sender: this.username, type: \"JOIN\" })\n      );\n      this.isConnecting = false;\n    },\n    onError() {\n      this.isConnecting = false;\n      alert(\"Could not connect to WebSocket server. Please refresh the page to try again.\");\n    },\n    sendMessage() {\n      if (this.newMessage.trim() !== \"\" && this.stompClient && this.stompClient.connected) {\n        const chatMessage = {\n          sender: this.username,\n          content: this.newMessage,\n          type: \"CHAT\"\n        };\n        this.stompClient.send(\"/app/chat.sendMessage\", {}, JSON.stringify(chatMessage));\n        this.newMessage = \"\";\n      } else {\n        console.error(\"STOMP connection is not active.\");\n        alert(\"Unable to send message. Please ensure you are connected to the chat.\");\n      }\n    },\n    onMessageReceived(payload) {\n      const message = JSON.parse(payload.body);\n      if (message.type === \"JOIN\") {\n        message.content = `${message.sender} joined!`;\n      } else if (message.type === \"LEAVE\") {\n        message.content = `${message.sender} left!`;\n      }\n      this.messages.push(message);\n    }\n  }\n};\n</script>\n\n<style scoped>\n.chat-wrapper {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  height: 100vh;\n  background-color: #f4f4f4;\n}\n\n.chat-container {\n  width: 600px; /* Pas de breedte hier aan */\n  height: 700px; /* Pas de hoogte hier aan */\n  background-color: #fff;\n  border-radius: 10px;\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);\n  display: flex;\n  flex-direction: column;\n}\n\n.chat-header {\n  background-color: #7417c9;\n  color: white;\n  padding: 15px;\n  border-top-left-radius: 10px;\n  border-top-right-radius: 10px;\n  text-align: center;\n}\n\nul#messageArea {\n  flex: 1;\n  padding: 10px;\n  list-style: none;\n  margin: 0;\n  overflow-y: auto;\n}\n\n.message {\n  padding: 8px 12px;\n  border-radius: 10px;\n  max-width: 75%;\n  margin-bottom: 10px;\n  word-wrap: break-word;\n}\n\n.sender {\n  font-weight: bold;\n  font-size: 12px;\n  color: #666;\n  margin-bottom: 5px;\n}\n\nli.self .message {\n  background-color: #c67eff;\n  align-self: flex-end;\n  text-align: right;\n}\n\nli.other .message {\n  background-color: #ffa56f;\n  align-self: flex-start;\n  text-align: left;\n  border: 1px solid #ccc;\n}\n\nform {\n  display: flex;\n  padding: 10px;\n  background-color: #f4f4f4;\n}\n\ninput[type=\"text\"] {\n  flex: 1;\n  padding: 8px;\n  border-radius: 20px;\n  border: 1px solid #ccc;\n  margin-right: 10px;\n}\n\nbutton.primary {\n  background-color: #9700fc;\n  border-radius: 50%;\n  padding: 10px;\n  border: none;\n  color: white;\n  font-size: 18px;\n  cursor: pointer;\n}\n\nbutton.primary:hover {\n  background-color: #7a00cc;\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}