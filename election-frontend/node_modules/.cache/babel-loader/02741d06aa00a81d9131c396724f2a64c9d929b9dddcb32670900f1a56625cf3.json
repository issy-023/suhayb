{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { API_URL } from \"@/config\";\nimport jwtDecode from \"jwt-decode\";\nexport default {\n  name: \"CommunityChatComponent\",\n  props: [\"communityId\"],\n  data() {\n    return {\n      chatMessages: [],\n      newMessage: \"\",\n      selectedFile: null,\n      openComments: {},\n      // Track open comments\n      newComments: {} // Store new comments by message ID\n    };\n  },\n  methods: {\n    async fetchPosts() {\n      try {\n        const token = localStorage.getItem(\"token\");\n        const response = await fetch(`${API_URL}/api/communities/${this.communityId}/posts`, {\n          method: \"GET\",\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n        if (!response.ok) throw new Error(\"Failed to fetch posts\");\n        const posts = await response.json();\n        this.chatMessages = posts.map(post => ({\n          id: post.id,\n          text: post.content,\n          username: post.user?.username || \"Anonymous\",\n          image: post.image ? `data:image/jpeg;base64,${post.image}` : null,\n          comments: post.comments || []\n        }));\n      } catch (error) {\n        console.error(\"Error fetching posts:\", error);\n      }\n    },\n    handleFileChange(event) {\n      const file = event.target.files[0];\n      if (!file.type.startsWith(\"image/\")) {\n        alert(\"Please upload a valid image file.\");\n        return;\n      }\n      const maxSize = 5 * 1024 * 1024;\n      if (file.size > maxSize) {\n        alert(\"File size exceeds 5MB. Please upload a smaller file.\");\n        return;\n      }\n      this.selectedFile = file;\n    },\n    async postMessage() {\n      const token = localStorage.getItem(\"token\");\n      if (!token) {\n        alert(\"User not authenticated. Please log in.\");\n        return;\n      }\n      let userId;\n      try {\n        const decodedToken = jwtDecode(token);\n        userId = decodedToken.id;\n      } catch (error) {\n        console.error(\"Error decoding token:\", error);\n        alert(\"Invalid token. Please log in again.\");\n        return;\n      }\n      const formData = new FormData();\n      formData.append(\"content\", this.newMessage);\n      formData.append(\"userid\", userId);\n      if (this.selectedFile) {\n        formData.append(\"image\", this.selectedFile);\n      }\n      try {\n        const response = await fetch(`${API_URL}/api/communities/${this.communityId}/posts/create`, {\n          method: \"POST\",\n          headers: {\n            Authorization: `Bearer ${token}`\n          },\n          body: formData\n        });\n        if (!response.ok) throw new Error(\"Failed to send message\");\n        this.newMessage = \"\";\n        this.selectedFile = null;\n        this.fetchPosts();\n      } catch (error) {\n        console.error(\"Error sending message:\", error);\n      }\n    },\n    toggleComments(messageId) {\n      this.openComments[messageId] = !this.openComments[messageId];\n    },\n    isCommentsOpen(messageId) {\n      return !!this.openComments[messageId];\n    },\n    addComment(messageId) {\n      const commentText = this.newComments[messageId];\n      if (commentText && commentText.trim() !== \"\") {\n        const comment = {\n          id: Date.now(),\n          username: \"Current User\",\n          text: commentText\n        };\n        const messageIndex = this.chatMessages.findIndex(message => message.id === messageId);\n        if (messageIndex !== -1) {\n          this.chatMessages[messageIndex].comments.push(comment);\n        }\n        this.newComments[messageId] = \"\"; // Clear the input\n      }\n    }\n  },\n  mounted() {\n    this.fetchPosts();\n  }\n};","map":{"version":3,"names":["API_URL","jwtDecode","name","props","data","chatMessages","newMessage","selectedFile","openComments","newComments","methods","fetchPosts","token","localStorage","getItem","response","fetch","communityId","method","headers","Authorization","ok","Error","posts","json","map","post","id","text","content","username","user","image","comments","error","console","handleFileChange","event","file","target","files","type","startsWith","alert","maxSize","size","postMessage","userId","decodedToken","formData","FormData","append","body","toggleComments","messageId","isCommentsOpen","addComment","commentText","trim","comment","Date","now","messageIndex","findIndex","message","push","mounted"],"sources":["/Users/suhayb/Documenten/cuuruuvoovii16/election-frontend/src/components/CommunityChatPage.vue"],"sourcesContent":["<template>\n  <div class=\"community-chat\">\n    <div class=\"chat-header\">\n      <h2>Community Chat App</h2>\n    </div>\n\n    <div class=\"new-message-box\">\n      <textarea v-model=\"newMessage\" placeholder=\"Type message here...\"></textarea>\n      <input type=\"file\" @change=\"handleFileChange\" accept=\"image/*\" />\n      <button class=\"post-button\" @click=\"postMessage\">Post</button>\n    </div>\n\n    <div class=\"posts-container\">\n      <div v-for=\"message in chatMessages\" :key=\"message.id\" class=\"message-box\">\n        <div class=\"user-info\">\n          <span class=\"user-avatar\"></span>\n          <span class=\"username\">{{ message.username }}</span>\n        </div>\n        <img v-if=\"message.image\" :src=\"message.image\" alt=\"Post Image\" class=\"message-image\" />\n        <p class=\"message-area\">{{ message.text }}</p>\n        <div class=\"message-actions\">\n          <button @click=\"toggleComments(message.id)\">\n            {{ isCommentsOpen(message.id) ? \"Hide\" : \"Show\" }} Comments\n          </button>\n          <button @click=\"likeMessage(message.id)\">Like</button>\n          <button @click=\"shareMessage(message.id)\">Share</button>\n        </div>\n\n        <div v-if=\"isCommentsOpen(message.id)\" class=\"comments-section\">\n          <div v-for=\"comment in message.comments\" :key=\"comment.id\" class=\"comment\">\n            <span class=\"comment-username\">{{ message.username }}</span>\n            <p class=\"comment-text\">{{ comment.text }}</p>\n          </div>\n          <div class=\"new-comment-box\">\n            <input v-model=\"newComments[message.id]\" placeholder=\"Add a comment...\" />\n            <button @click=\"addComment(message.id)\">Post Comment</button>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { API_URL } from \"@/config\";\nimport jwtDecode from \"jwt-decode\";\n\nexport default {\n  name: \"CommunityChatComponent\",\n  props: [\"communityId\"],\n  data() {\n    return {\n      chatMessages: [],\n      newMessage: \"\",\n      selectedFile: null,\n      openComments: {}, // Track open comments\n      newComments: {}, // Store new comments by message ID\n    };\n  },\n  methods: {\n    async fetchPosts() {\n      try {\n        const token = localStorage.getItem(\"token\");\n        const response = await fetch(`${API_URL}/api/communities/${this.communityId}/posts`, {\n          method: \"GET\",\n          headers: { Authorization: `Bearer ${token}` },\n        });\n\n        if (!response.ok) throw new Error(\"Failed to fetch posts\");\n        const posts = await response.json();\n\n        this.chatMessages = posts.map(post => ({\n          id: post.id,\n          text: post.content,\n          username: post.user?.username || \"Anonymous\",\n          image: post.image ? `data:image/jpeg;base64,${post.image}` : null,\n          comments: post.comments || [],\n        }));\n      } catch (error) {\n        console.error(\"Error fetching posts:\", error);\n      }\n    },\n\n    handleFileChange(event) {\n      const file = event.target.files[0];\n      if (!file.type.startsWith(\"image/\")) {\n        alert(\"Please upload a valid image file.\");\n        return;\n      }\n      const maxSize = 5 * 1024 * 1024;\n      if (file.size > maxSize) {\n        alert(\"File size exceeds 5MB. Please upload a smaller file.\");\n        return;\n      }\n      this.selectedFile = file;\n    },\n\n    async postMessage() {\n      const token = localStorage.getItem(\"token\");\n      if (!token) {\n        alert(\"User not authenticated. Please log in.\");\n        return;\n      }\n\n      let userId;\n      try {\n        const decodedToken = jwtDecode(token);\n        userId = decodedToken.id;\n      } catch (error) {\n        console.error(\"Error decoding token:\", error);\n        alert(\"Invalid token. Please log in again.\");\n        return;\n      }\n\n      const formData = new FormData();\n      formData.append(\"content\", this.newMessage);\n      formData.append(\"userid\", userId);\n      if (this.selectedFile) {\n        formData.append(\"image\", this.selectedFile);\n      }\n\n      try {\n        const response = await fetch(`${API_URL}/api/communities/${this.communityId}/posts/create`, {\n          method: \"POST\",\n          headers: { Authorization: `Bearer ${token}` },\n          body: formData,\n        });\n\n        if (!response.ok) throw new Error(\"Failed to send message\");\n\n        this.newMessage = \"\";\n        this.selectedFile = null;\n        this.fetchPosts();\n      } catch (error) {\n        console.error(\"Error sending message:\", error);\n      }\n    },\n\n    toggleComments(messageId) {\n      this.openComments[messageId] = !this.openComments[messageId];\n    },\n\n    isCommentsOpen(messageId) {\n      return !!this.openComments[messageId];\n    },\n\n    addComment(messageId) {\n      const commentText = this.newComments[messageId];\n      if (commentText && commentText.trim() !== \"\") {\n        const comment = {\n          id: Date.now(),\n          username: \"Current User\",\n          text: commentText,\n        };\n        const messageIndex = this.chatMessages.findIndex(message => message.id === messageId);\n        if (messageIndex !== -1) {\n          this.chatMessages[messageIndex].comments.push(comment);\n        }\n        this.newComments[messageId] = \"\"; // Clear the input\n      }\n    },\n  },\n\n  mounted() {\n    this.fetchPosts();\n  },\n};\n</script>\n\n\n\n<style>\n* {\n  font-family: \"Outfit\", sans-serif;\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\nhtml, body {\n  height: 100%;\n  overflow: hidden;\n}\n\n.community-chat {\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n  align-items: center;\n  background-color: #F9F9F9;\n  color: #17003C;\n  width: 100vw;\n  height: 100vh;\n  padding: 1.5rem;\n  overflow: hidden;\n}\n\n.chat-header {\n  flex-shrink: 0;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  width: 100%;\n  max-width: 800px;\n  margin-bottom: 1rem;\n}\n\n.new-message-box {\n  flex-shrink: 0;\n  background-color: #17003C;\n  padding: 20px;\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n  margin-bottom: 20px;\n  width: 100%;\n  max-width: 800px;\n  border-radius: 10px;\n}\n\ntextarea {\n  width: 100%;\n  border-radius: 10px;\n  padding: 10px;\n  font-size: 1em;\n  margin: 10px 0;\n  border: none;\n  background-color: white;\n  color: black;\n}\n\n.post-button {\n  background-color: #FF9900;\n  color: white;\n  padding: 8px 20px;\n  border: none;\n  border-radius: 5px;\n  cursor: pointer;\n}\n\n.post-button:hover {\n  background-color: #E68A00;\n}\n\n.posts-container {\n  flex-grow: 1;\n  width: 100%;\n  max-width: 800px;\n  overflow-y: auto;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 10px;\n  padding: 10px 0;\n}\n\n.message-box {\n  background-color: #17003C;\n  color: white;\n  border-radius: 15px;\n  padding: 15px;\n  margin-bottom: 10px;\n  width: 90%;\n  max-width: 600px;\n}\n\n.user-info {\n  display: flex;\n  align-items: center;\n  margin-bottom: 10px;\n}\n\n.user-avatar {\n  width: 40px;\n  height: 40px;\n  border-radius: 50%;\n  background-color: gray;\n  margin-right: 10px;\n}\n\n.username {\n  font-weight: bold;\n  color: #FF9900;\n}\n\n.message-area {\n  background-color: white;\n  color: black;\n  padding: 10px;\n  border-radius: 10px;\n  font-size: 1em;\n  margin-top: 10px;\n}\n\n.message-image {\n  max-width: 50%;\n  border-radius: 10px;\n  margin-top: 10px;\n}\n\n.message-actions {\n  display: flex;\n  justify-content: space-around;\n  margin-top: 10px;\n}\n\n.message-actions button {\n  background: none;\n  border: none;\n  color: #FF9900;\n  cursor: pointer;\n  font-size: 1em;\n}\n\n.message-actions button:hover {\n  color: #E68A00;\n}\n\n.comments-section {\n  margin-top: 10px;\n  padding: 10px;\n  background-color: #2A1E54;\n  border-radius: 10px;\n}\n\n.comment {\n  margin-bottom: 5px;\n}\n\n.comment .username {\n  font-weight: bold;\n  color: #FF9900;\n}\n\n.comment-text {\n  margin-top: 5px;\n  background-color: white;\n  color: black;\n  border-radius: 8px;\n  padding: 10px;\n}\n.comment-username{\n  color: #FF9900;\n}\n\n\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}