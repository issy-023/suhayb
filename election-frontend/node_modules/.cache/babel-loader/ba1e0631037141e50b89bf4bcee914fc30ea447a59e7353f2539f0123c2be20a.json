{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nexport default {\n  name: \"LoginComponent\",\n  data() {\n    return {\n      username: \"\",\n      password: \"\",\n      showPassword: false,\n      errorMessage: \"\"\n    };\n  },\n  methods: {\n    async login() {\n      try {\n        // Voeg logging toe om te zien welke gegevens worden verstuurd\n        console.log(JSON.stringify({\n          username: this.username,\n          password: this.password\n        }));\n        const response = await fetch('http://localhost:8084/api/v1/User/login', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            username: this.username,\n            password: this.password\n          })\n        });\n        if (!response.ok) {\n          if (response.status === 401) {\n            this.errorMessage = \"Invalid username or password.\";\n          } else {\n            this.errorMessage = \"Login failed.\";\n          }\n          throw new Error('Login failed');\n        }\n        const text = await response.text();\n        const user = text ? JSON.parse(text) : null;\n        if (user && user.token) {\n          localStorage.setItem('token', user.token);\n          localStorage.setItem('username', user.username);\n          this.$router.push(\"/profile\");\n        } else {\n          this.errorMessage = \"Unexpected response format.\";\n        }\n      } catch (error) {\n        console.error('Error during login:', error);\n        if (!this.errorMessage) {\n          this.errorMessage = \"An error occurred during login.\";\n        }\n      }\n    },\n    // Centralized API request function with JWT token handling\n    async apiRequest(url, options = {}) {\n      const token = localStorage.getItem('token');\n      if (token) {\n        options.headers = {\n          ...options.headers,\n          'Authorization': `Bearer ${token}` // Attach JWT token to the headers\n        };\n      }\n      const response = await fetch(url, options);\n\n      // Handle unauthorized case globally\n      if (response.status === 401) {\n        this.errorMessage = \"Session expired. Please log in again.\";\n        localStorage.removeItem('token'); // Optionally, clear token on 401 errors\n        this.$router.push(\"/\"); // Redirect to login\n      }\n      return response;\n    }\n  }\n};","map":{"version":3,"names":["name","data","username","password","showPassword","errorMessage","methods","login","console","log","JSON","stringify","response","fetch","method","headers","body","ok","status","Error","text","user","parse","token","localStorage","setItem","$router","push","error","apiRequest","url","options","getItem","removeItem"],"sources":["/Users/suhayb/Documenten/cuuruuvoovii16/election-frontend/src/components/LoginComponent.vue"],"sourcesContent":["<template>\n  <div class=\"login-container\">\n    <div class=\"login-form\">\n      <h1>Login</h1>\n      <form @submit.prevent=\"login\">\n        <div class=\"form-group full-width\">\n          <label for=\"username\" class=\"left-label\">Username:</label>\n          <input\n              type=\"text\"\n              id=\"username\"\n              v-model=\"username\"\n              placeholder=\"Fill in Username\"\n              required\n          />\n        </div>\n\n        <div class=\"form-group full-width\">\n          <label for=\"password\" class=\"left-label\">Password:</label>\n          <input\n              :type=\"showPassword ? 'text' : 'password'\"\n              id=\"password\"\n              v-model=\"password\"\n              placeholder=\"Fill in Password\"\n              required\n          />\n        </div>\n\n        <div class=\"forgot-password\">\n          <router-link to=\"/ForgotPassword\">Forgot password? Click here</router-link>\n        </div>\n\n        <button type=\"submit\">Login</button>\n        <p v-if=\"errorMessage\" class=\"error\">{{ errorMessage }}</p>\n      </form>\n    </div>\n  </div>\n</template>\n<script>\nexport default {\n  name: \"LoginComponent\",\n  data() {\n    return {\n      username: \"\",\n      password: \"\",\n      showPassword: false,\n      errorMessage: \"\"\n    };\n  },\n  methods: {\n    async login() {\n      try {\n        // Voeg logging toe om te zien welke gegevens worden verstuurd\n        console.log(JSON.stringify({\n          username: this.username,\n          password: this.password\n        }));\n\n        const response = await fetch('http://localhost:8084/api/v1/User/login', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            username: this.username,\n            password: this.password\n          })\n        });\n\n        if (!response.ok) {\n          if (response.status === 401) {\n            this.errorMessage = \"Invalid username or password.\";\n          } else {\n            this.errorMessage = \"Login failed.\";\n          }\n          throw new Error('Login failed');\n        }\n\n        const text = await response.text();\n        const user = text ? JSON.parse(text) : null;\n\n        if (user && user.token) {\n          localStorage.setItem('token', user.token);\n          localStorage.setItem('username', user.username);\n          this.$router.push(\"/profile\");\n        } else {\n          this.errorMessage = \"Unexpected response format.\";\n        }\n      } catch (error) {\n        console.error('Error during login:', error);\n        if (!this.errorMessage) {\n          this.errorMessage = \"An error occurred during login.\";\n        }\n      }\n    },\n\n    // Centralized API request function with JWT token handling\n    async apiRequest(url, options = {}) {\n      const token = localStorage.getItem('token');\n      if (token) {\n        options.headers = {\n          ...options.headers,\n          'Authorization': `Bearer ${token}` // Attach JWT token to the headers\n        };\n      }\n      const response = await fetch(url, options);\n\n      // Handle unauthorized case globally\n      if (response.status === 401) {\n        this.errorMessage = \"Session expired. Please log in again.\";\n        localStorage.removeItem('token'); // Optionally, clear token on 401 errors\n        this.$router.push(\"/\"); // Redirect to login\n      }\n      return response;\n    }\n  }\n};\n</script>\n<style scoped>\n@import url('https://fonts.googleapis.com/css2?family=Outfit:wght@300..900&display=swap');\n\n* {\n  font-family: \"Outfit\", sans-serif;\n  font-optical-sizing: auto;\n  font-style: normal;\n  font-weight: 300;\n}\n\n.login-container {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  height: 100vh;\n  background-color: #f3f3f3;\n}\n\n.login-form {\n  width: 400px;\n  padding: 30px;\n  border: 2px solid #1a123b;\n  border-radius: 15px;\n  background-color: #fff;\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\n}\n\nh1 {\n  color: #1a123b;\n  font-weight: 400;\n  margin-bottom: 20px;\n}\n\nform {\n  display: flex;\n  flex-direction: column;\n}\n\n.full-width {\n  width: 100%;\n  margin-bottom: 20px;\n}\n\n.left-label {\n  font-weight: 500;\n  margin-bottom: 5px;\n  text-align: left;\n}\n\ninput {\n  padding: 10px;\n  border: 2px solid #1a123b;\n  border-radius: 10px;\n  font-size: 16px;\n  color: #333;\n  width: 100%;\n  box-sizing: border-box;\n}\n\nbutton {\n  padding: 12px;\n  background-color: #ff9933;\n  color: white;\n  border: none;\n  border-radius: 20px;\n  cursor: pointer;\n  font-size: 16px;\n  text-align: center;\n  width: 100%;\n}\n\nbutton:hover {\n  background-color: #e68a00;\n}\n\nbutton:disabled {\n  background-color: #cccccc;\n  cursor: not-allowed;\n}\n\n.forgot-password {\n  margin-bottom: 20px;\n  text-align: left;\n}\n\n.forgot-password a {\n  color: #1a123b;\n  font-weight: 400;\n  text-decoration: none;\n}\n\n.forgot-password a:hover {\n  text-decoration: underline;\n}\n\n.error {\n  color: red;\n  text-align: center;\n}\n</style>\n"],"mappings":";AAsCA,eAAe;EACbA,IAAI,EAAE,gBAAgB;EACtBC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,QAAQ,EAAE,EAAE;MACZC,QAAQ,EAAE,EAAE;MACZC,YAAY,EAAE,KAAK;MACnBC,YAAY,EAAE;IAChB,CAAC;EACH,CAAC;EACDC,OAAO,EAAE;IACP,MAAMC,KAAKA,CAAA,EAAG;MACZ,IAAI;QACF;QACAC,OAAO,CAACC,GAAG,CAACC,IAAI,CAACC,SAAS,CAAC;UACzBT,QAAQ,EAAE,IAAI,CAACA,QAAQ;UACvBC,QAAQ,EAAE,IAAI,CAACA;QACjB,CAAC,CAAC,CAAC;QAEH,MAAMS,QAAO,GAAI,MAAMC,KAAK,CAAC,yCAAyC,EAAE;UACtEC,MAAM,EAAE,MAAM;UACdC,OAAO,EAAE;YACP,cAAc,EAAE;UAClB,CAAC;UACDC,IAAI,EAAEN,IAAI,CAACC,SAAS,CAAC;YACnBT,QAAQ,EAAE,IAAI,CAACA,QAAQ;YACvBC,QAAQ,EAAE,IAAI,CAACA;UACjB,CAAC;QACH,CAAC,CAAC;QAEF,IAAI,CAACS,QAAQ,CAACK,EAAE,EAAE;UAChB,IAAIL,QAAQ,CAACM,MAAK,KAAM,GAAG,EAAE;YAC3B,IAAI,CAACb,YAAW,GAAI,+BAA+B;UACrD,OAAO;YACL,IAAI,CAACA,YAAW,GAAI,eAAe;UACrC;UACA,MAAM,IAAIc,KAAK,CAAC,cAAc,CAAC;QACjC;QAEA,MAAMC,IAAG,GAAI,MAAMR,QAAQ,CAACQ,IAAI,CAAC,CAAC;QAClC,MAAMC,IAAG,GAAID,IAAG,GAAIV,IAAI,CAACY,KAAK,CAACF,IAAI,IAAI,IAAI;QAE3C,IAAIC,IAAG,IAAKA,IAAI,CAACE,KAAK,EAAE;UACtBC,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEJ,IAAI,CAACE,KAAK,CAAC;UACzCC,YAAY,CAACC,OAAO,CAAC,UAAU,EAAEJ,IAAI,CAACnB,QAAQ,CAAC;UAC/C,IAAI,CAACwB,OAAO,CAACC,IAAI,CAAC,UAAU,CAAC;QAC/B,OAAO;UACL,IAAI,CAACtB,YAAW,GAAI,6BAA6B;QACnD;MACF,EAAE,OAAOuB,KAAK,EAAE;QACdpB,OAAO,CAACoB,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC;QAC3C,IAAI,CAAC,IAAI,CAACvB,YAAY,EAAE;UACtB,IAAI,CAACA,YAAW,GAAI,iCAAiC;QACvD;MACF;IACF,CAAC;IAED;IACA,MAAMwB,UAAUA,CAACC,GAAG,EAAEC,OAAM,GAAI,CAAC,CAAC,EAAE;MAClC,MAAMR,KAAI,GAAIC,YAAY,CAACQ,OAAO,CAAC,OAAO,CAAC;MAC3C,IAAIT,KAAK,EAAE;QACTQ,OAAO,CAAChB,OAAM,GAAI;UAChB,GAAGgB,OAAO,CAAChB,OAAO;UAClB,eAAe,EAAE,UAAUQ,KAAK,EAAC,CAAE;QACrC,CAAC;MACH;MACA,MAAMX,QAAO,GAAI,MAAMC,KAAK,CAACiB,GAAG,EAAEC,OAAO,CAAC;;MAE1C;MACA,IAAInB,QAAQ,CAACM,MAAK,KAAM,GAAG,EAAE;QAC3B,IAAI,CAACb,YAAW,GAAI,uCAAuC;QAC3DmB,YAAY,CAACS,UAAU,CAAC,OAAO,CAAC,EAAE;QAClC,IAAI,CAACP,OAAO,CAACC,IAAI,CAAC,GAAG,CAAC,EAAE;MAC1B;MACA,OAAOf,QAAQ;IACjB;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}