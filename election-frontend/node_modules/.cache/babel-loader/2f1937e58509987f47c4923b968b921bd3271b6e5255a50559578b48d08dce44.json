{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { Chart } from \"chart.js\";\nexport default {\n  name: \"VotesPerPartyPage\",\n  data() {\n    return {\n      parties: [],\n      largestParty: {\n        name: '',\n        totalVotes: 0,\n        seats: 0\n      },\n      secondLargestParty: {\n        name: '',\n        totalVotes: 0,\n        seats: 0\n      },\n      thirdLargestParty: {\n        name: '',\n        totalVotes: 0,\n        seats: 0\n      },\n      barChart: null,\n      doughnutChart: null\n    };\n  },\n  mounted() {\n    this.fetchVotesPerParty();\n  },\n  methods: {\n    navigateToParties() {\n      this.$router.push({\n        name: \"PartiesOverview\"\n      });\n    },\n    async fetchVotesPerParty() {\n      try {\n        const response = await fetch(\"http://localhost:8084/api/election-results/votes-per-party\");\n        if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);\n        const data = await response.json();\n        const totalVotes = data.reduce((sum, party) => sum + party.totalVotes, 0);\n        const totalSeats = 150;\n        const kiesdeler = Math.floor(totalVotes / totalSeats);\n        this.parties = data.map(party => ({\n          name: party.name,\n          totalVotes: party.totalVotes,\n          seats: Math.floor(party.totalVotes / kiesdeler)\n        })).sort((a, b) => b.totalVotes - a.totalVotes);\n        this.updateTopThreeParties();\n        this.$nextTick(() => this.renderCharts());\n      } catch (error) {\n        console.error(\"Error fetching votes per party:\", error);\n      }\n    },\n    updateTopThreeParties() {\n      const sortedParties = [...this.parties];\n      this.largestParty = sortedParties[0] || {\n        name: '',\n        totalVotes: 0,\n        seats: 0\n      };\n      this.secondLargestParty = sortedParties[1] || {\n        name: '',\n        totalVotes: 0,\n        seats: 0\n      };\n      this.thirdLargestParty = sortedParties[2] || {\n        name: '',\n        totalVotes: 0,\n        seats: 0\n      };\n    },\n    getPartyLogo(partyName) {\n      const logos = {\n        SP: require(\"@/assets/party/sp.png\")\n      };\n      return logos[partyName] || null;\n    },\n    renderCharts() {\n      this.renderBarChart();\n      this.renderDoughnutChart();\n    },\n    renderBarChart() {\n      const ctx = document.getElementById(\"votesBarChart\").getContext(\"2d\");\n      if (this.barChart) this.barChart.destroy();\n      this.barChart = new Chart(ctx, {\n        type: \"bar\",\n        data: {\n          labels: this.parties.map(party => party.name),\n          datasets: [{\n            label: \"Votes\",\n            data: this.parties.map(party => party.totalVotes),\n            backgroundColor: this.parties.map(() => `hsl(${Math.random() * 360}, 70%, 50%)`)\n          }]\n        },\n        options: {\n          responsive: true,\n          maintainAspectRatio: false,\n          plugins: {\n            legend: {\n              display: false\n            }\n          },\n          scales: {\n            y: {\n              beginAtZero: true\n            }\n          }\n        }\n      });\n    },\n    renderDoughnutChart() {\n      const ctx = document.getElementById(\"votesDoughnutChart\").getContext(\"2d\");\n      if (this.doughnutChart) this.doughnutChart.destroy();\n      this.doughnutChart = new Chart(ctx, {\n        type: \"doughnut\",\n        data: {\n          labels: this.parties.map(party => party.name),\n          datasets: [{\n            data: this.parties.map(party => party.totalVotes),\n            backgroundColor: this.parties.map(() => `hsl(${Math.random() * 360}, 70%, 50%)`)\n          }]\n        },\n        options: {\n          responsive: true,\n          maintainAspectRatio: false,\n          plugins: {\n            legend: {\n              position: \"bottom\"\n            }\n          }\n        }\n      });\n    },\n    formatVotes(votes) {\n      return votes.toLocaleString();\n    }\n  }\n};","map":{"version":3,"names":["Chart","name","data","parties","largestParty","totalVotes","seats","secondLargestParty","thirdLargestParty","barChart","doughnutChart","mounted","fetchVotesPerParty","methods","navigateToParties","$router","push","response","fetch","ok","Error","status","json","reduce","sum","party","totalSeats","kiesdeler","Math","floor","map","sort","a","b","updateTopThreeParties","$nextTick","renderCharts","error","console","sortedParties","getPartyLogo","partyName","logos","SP","require","renderBarChart","renderDoughnutChart","ctx","document","getElementById","getContext","destroy","type","labels","datasets","label","backgroundColor","random","options","responsive","maintainAspectRatio","plugins","legend","display","scales","y","beginAtZero","position","formatVotes","votes","toLocaleString"],"sources":["/Users/suhayb/MijnProjecten/cuuruuvoovii16/election-frontend/src/components/VotesPerPartyPage.vue"],"sourcesContent":["<template>\n  <div class=\"votes-per-party\">\n    <!-- Button voor alle partijen bovenaan -->\n    <button class=\"view-all-parties-btn\" @click=\"navigateToParties\">View All Parties</button>\n\n    <h1>Votes Per Party</h1>\n\n    <!-- Podium voor top 3 winnaars -->\n    <div class=\"podium\">\n      <div class=\"second-place\">\n        <img v-if=\"getPartyLogo(secondLargestParty.name)\" :src=\"getPartyLogo(secondLargestParty.name)\" alt=\"2nd Place Logo\" class=\"party-logo\" />\n        <h3>2nd Place</h3>\n        <h2>{{ secondLargestParty.name }}</h2>\n        <p>Votes: {{ formatVotes(secondLargestParty.totalVotes) }}</p>\n        <p>Seats: {{ secondLargestParty.seats }}</p>\n      </div>\n      <div class=\"first-place\">\n        <img v-if=\"getPartyLogo(largestParty.name)\" :src=\"getPartyLogo(largestParty.name)\" alt=\"1st Place Logo\" class=\"party-logo\" />\n        <h3>1st Place</h3>\n        <h2>{{ largestParty.name }}</h2>\n        <p>Votes: {{ formatVotes(largestParty.totalVotes) }}</p>\n        <p>Seats: {{ largestParty.seats }}</p>\n        <p class=\"lead-info\">Lead: {{ formatVotes(largestParty.totalVotes - secondLargestParty.totalVotes) }} votes</p>\n      </div>\n      <div class=\"third-place\">\n        <img v-if=\"getPartyLogo(thirdLargestParty.name)\" :src=\"getPartyLogo(thirdLargestParty.name)\" alt=\"3rd Place Logo\" class=\"party-logo\" />\n        <h3>3rd Place</h3>\n        <h2>{{ thirdLargestParty.name }}</h2>\n        <p>Votes: {{ formatVotes(thirdLargestParty.totalVotes) }}</p>\n        <p>Seats: {{ thirdLargestParty.seats }}</p>\n      </div>\n    </div>\n\n    <!-- Grafiek -->\n    <div class=\"chart-wrapper bar-chart\">\n      <canvas id=\"votesBarChart\"></canvas>\n    </div>\n\n    <!-- Diagram -->\n    <div class=\"chart-wrapper doughnut-chart\">\n      <canvas id=\"votesDoughnutChart\"></canvas>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { Chart } from \"chart.js\";\n\nexport default {\n  name: \"VotesPerPartyPage\",\n  data() {\n    return {\n      parties: [],\n      largestParty: { name: '', totalVotes: 0, seats: 0 },\n      secondLargestParty: { name: '', totalVotes: 0, seats: 0 },\n      thirdLargestParty: { name: '', totalVotes: 0, seats: 0 },\n      barChart: null,\n      doughnutChart: null,\n    };\n  },\n\n  mounted() {\n    this.fetchVotesPerParty();\n  },\n\n  methods: {\n\n    navigateToParties() {\n      this.$router.push({ name: \"PartiesOverview\" });\n    },\n\n    async fetchVotesPerParty() {\n      try {\n        const response = await fetch(\"http://localhost:8084/api/election-results/votes-per-party\");\n        if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);\n        const data = await response.json();\n\n        const totalVotes = data.reduce((sum, party) => sum + party.totalVotes, 0);\n        const totalSeats = 150;\n        const kiesdeler = Math.floor(totalVotes / totalSeats);\n\n        this.parties = data.map((party) => ({\n          name: party.name,\n          totalVotes: party.totalVotes,\n          seats: Math.floor(party.totalVotes / kiesdeler),\n        })).sort((a, b) => b.totalVotes - a.totalVotes);\n\n        this.updateTopThreeParties();\n        this.$nextTick(() => this.renderCharts());\n      } catch (error) {\n        console.error(\"Error fetching votes per party:\", error);\n      }\n    },\n\n    updateTopThreeParties() {\n      const sortedParties = [...this.parties];\n      this.largestParty = sortedParties[0] || { name: '', totalVotes: 0, seats: 0 };\n      this.secondLargestParty = sortedParties[1] || { name: '', totalVotes: 0, seats: 0 };\n      this.thirdLargestParty = sortedParties[2] || { name: '', totalVotes: 0, seats: 0 };\n    },\n\n    getPartyLogo(partyName) {\n      const logos = {\n        SP: require(\"@/assets/party/sp.png\"),\n      };\n      return logos[partyName] || null;\n    },\n\n    renderCharts() {\n      this.renderBarChart();\n      this.renderDoughnutChart();\n    },\n\n    renderBarChart() {\n      const ctx = document.getElementById(\"votesBarChart\").getContext(\"2d\");\n      if (this.barChart) this.barChart.destroy();\n      this.barChart = new Chart(ctx, {\n        type: \"bar\",\n        data: {\n          labels: this.parties.map((party) => party.name),\n          datasets: [\n            {\n              label: \"Votes\",\n              data: this.parties.map((party) => party.totalVotes),\n              backgroundColor: this.parties.map(() => `hsl(${Math.random() * 360}, 70%, 50%)`),\n            },\n          ],\n        },\n        options: {\n          responsive: true,\n          maintainAspectRatio: false,\n          plugins: {\n            legend: { display: false },\n          },\n          scales: {\n            y: { beginAtZero: true },\n          },\n        },\n      });\n    },\n\n    renderDoughnutChart() {\n      const ctx = document.getElementById(\"votesDoughnutChart\").getContext(\"2d\");\n      if (this.doughnutChart) this.doughnutChart.destroy();\n      this.doughnutChart = new Chart(ctx, {\n        type: \"doughnut\",\n        data: {\n          labels: this.parties.map((party) => party.name),\n          datasets: [\n            {\n              data: this.parties.map((party) => party.totalVotes),\n              backgroundColor: this.parties.map(() => `hsl(${Math.random() * 360}, 70%, 50%)`),\n            },\n          ],\n        },\n        options: {\n          responsive: true,\n          maintainAspectRatio: false,\n          plugins: {\n            legend: { position: \"bottom\" },\n          },\n        },\n      });\n    },\n    formatVotes(votes) {\n      return votes.toLocaleString();\n    },\n  },\n};\n</script>\n\n<style scoped>\n.votes-per-party {\n  margin: 20px;\n  text-align: center;\n}\n\n.view-all-parties-btn {\n  display: block;\n  margin: 0 auto 20px;\n  padding: 15px 30px;\n  background-color: #ec7700;\n  border: none;\n  border-radius: 10px;\n  color: white;\n  font-size: 18px;\n  cursor: pointer;\n  font-weight: bold;\n}\n\n.view-all-parties-btn:hover {\n  background-color: #c26200;\n}\n\n.podium {\n  display: flex;\n  justify-content: center;\n  align-items: flex-end;\n  gap: 20px;\n  margin-bottom: 30px;\n}\n\n.first-place {\n  width: 350px;\n  padding: 20px;\n  background-color: gold;\n  border-radius: 10px;\n  text-align: center;\n  box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.1);\n}\n\n.second-place {\n  width: 300px;\n  padding: 15px;\n  background-color: silver;\n  border-radius: 10px;\n  text-align: center;\n  box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.1);\n}\n\n.third-place {\n  width: 250px;\n  padding: 10px;\n  background-color: #cd7f32;\n  border-radius: 10px;\n  text-align: center;\n  box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.1);\n}\n\n.party-logo {\n  width: 80px;\n  margin-bottom: 10px;\n}\n\n.bar-chart {\n  width: 100%;\n  max-width: 1500px;\n  height: 800px;\n  margin: 30px auto;\n}\n\n.doughnut-chart {\n  width: 100%;\n  max-width: 800px;\n  height: 700px;\n  margin: 30px auto;\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}