{"ast":null,"code":"import \"core-js/modules/es.array-buffer.detached.js\";\nimport \"core-js/modules/es.array-buffer.transfer.js\";\nimport \"core-js/modules/es.array-buffer.transfer-to-fixed-length.js\";\nimport \"core-js/modules/es.typed-array.to-reversed.js\";\nimport \"core-js/modules/es.typed-array.to-sorted.js\";\nimport \"core-js/modules/es.typed-array.with.js\";\nimport \"core-js/modules/web.dom-exception.stack.js\";\nimport { mapGetters } from 'vuex';\nimport { API_URL } from \"@/config\";\nimport jwtDecode from \"jwt-decode\";\nexport default {\n  name: 'CommunityChatComponent',\n  props: ['communityId'],\n  data() {\n    return {\n      Users: [],\n      // Placeholder for user list to keep the UI layout\n      chatMessages: [],\n      // Placeholder for messages to keep the UI layout\n      newMessage: '',\n      selectedFile: null // Store the selected image file here\n    };\n  },\n  computed: {\n    ...mapGetters(['userId'])\n  },\n  methods: {\n    handleFileChange(event) {\n      const file = event.target.files[0];\n\n      // Validate file type\n      if (!file.type.startsWith('image/')) {\n        alert('Please upload a valid image file.');\n        return;\n      }\n\n      // Validate file size (e.g., limit to 5MB)\n      const maxSize = 5 * 1024 * 1024; // 5MB\n      if (file.size > maxSize) {\n        alert('File size exceeds 5MB. Please upload a smaller file.');\n        return;\n      }\n      this.selectedFile = file;\n      console.log(\"Selected file:\", this.selectedFile);\n    },\n    async postMessage() {\n      const token = localStorage.getItem('token');\n      if (!this.newMessage.trim()) return;\n      const formData = new FormData();\n      formData.append('content', this.newMessage);\n      if (this.selectedFile) {\n        formData.append('image', this.selectedFile); // Attach image if selected\n      }\n      let username;\n      let userId;\n      if (token) {\n        try {\n          const decodedToken = jwtDecode(token);\n          username = decodedToken.username; // Assuming 'username' exists in the token\n          userId = decodedToken.id; // Assuming 'id' exists in the token\n          if (userId) {\n            formData.append('userid', userId); // Add userid directly if available\n          } else if (username) {\n            formData.append('username', username); // Otherwise, pass the username\n          }\n        } catch (error) {\n          console.error('Error decoding token:', error);\n        }\n      }\n      try {\n        const response = await fetch(`${API_URL}/api/communities/${this.communityId}/posts/create`, {\n          method: 'POST',\n          body: formData\n        });\n        if (!response.ok) throw new Error('Failed to send message');\n\n        // Clear fields after posting successfully\n        this.newMessage = '';\n        this.selectedFile = null;\n      } catch (error) {\n        console.error('Error sending message:', error);\n      }\n    }\n  },\n  async fetchPosts() {\n    try {\n      const response = await fetch(`${API_URL}/api/communities/${this.communityId}/posts`);\n      if (!response.ok) {\n        throw new Error(\"Failed to fetch posts\");\n      }\n      const posts = await response.json();\n      this.chatMessages = posts.map(post => ({\n        id: post.id,\n        text: post.content,\n        username: post.user.name,\n        // Assuming the API returns `user.name`\n        image: post.image ? `data:image/jpeg;base64,${btoa(String.fromCharCode(...new Uint8Array(post.image)))}` : null,\n        // Convert image to Base64 (if needed)\n        responseTo: post.responseTo || null // Assuming `responseTo` is nullable\n      }));\n    } catch (error) {\n      console.error(\"Error fetching posts:\", error);\n    }\n  }\n};","map":{"version":3,"names":["mapGetters","API_URL","jwtDecode","name","props","data","Users","chatMessages","newMessage","selectedFile","computed","methods","handleFileChange","event","file","target","files","type","startsWith","alert","maxSize","size","console","log","postMessage","token","localStorage","getItem","trim","formData","FormData","append","username","userId","decodedToken","id","error","response","fetch","communityId","method","body","ok","Error","fetchPosts","posts","json","map","post","text","content","user","image","btoa","String","fromCharCode","Uint8Array","responseTo"],"sources":["/Users/suhayb/Documenten/cuuruuvoovii16/election-frontend/src/components/CommunityChatPage.vue"],"sourcesContent":["<template>\n  <div class=\"community-chat\">\n    <div class=\"chat-header\">\n      <h2>Community Chat App</h2>\n    </div>\n    <div class=\"message-box new-message-box\">\n      <div class=\"user-info\">\n        <span class=\"user-avatar\"></span>\n\n      </div>\n      <textarea v-model=\"newMessage\" placeholder=\"type message here...\"></textarea>\n      <input type=\"file\" @change=\"handleFileChange\" accept=\"image/*\" />\n\n\n      <button class=\"post-button\" @click=\"postMessage\">Post</button>\n    </div>\n\n\n    <div v-for=\"message in chatMessages\" :key=\"message.id\" class=\"message-box\">\n      <div class=\"user-info\">\n    <span class=\"user-avatar\">\n      <img v-if=\"message.image\" :src=\"message.image\" alt=\"User Avatar\" />\n    </span>\n        <span class=\"username\">{{ message.username }}</span>\n        <span v-if=\"message.responseTo\" class=\"response-to\">\n      response to @{{ message.responseTo }}\n    </span>\n      </div>\n      <p>{{ message.text }}</p>\n\n\n\n\n      <div class=\"message-actions\">\n        <button @click=\"openComments(message.id)\">Comments</button>\n        <button @click=\"respondToMessage(message.id)\">Respond</button>\n        <button @click=\"likeMessage(message.id)\">Like</button>\n        <button @click=\"shareMessage(message.id)\">Share</button>\n      </div>\n\n\n      <div v-if=\"message.showComments\" class=\"comments-section\">\n        <div v-for=\"comment in message.comments\" :key=\"comment.id\" class=\"comment\">\n          <span class=\"username\">@{{ comment.username }}</span>\n          <p>{{ comment.text }}</p>\n        </div>\n        <textarea v-model=\"message.newComment\" placeholder=\"Add a comment\"></textarea>\n        <button @click=\"postComment(message.id)\">Comment</button>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { mapGetters } from 'vuex';\nimport { API_URL } from \"@/config\";\nimport jwtDecode from \"jwt-decode\";\n\nexport default {\n  name: 'CommunityChatComponent',\n  props: ['communityId'],\n  data() {\n    return {\n      Users: [],          // Placeholder for user list to keep the UI layout\n      chatMessages: [],   // Placeholder for messages to keep the UI layout\n      newMessage: '',\n      selectedFile: null, // Store the selected image file here\n    };\n  },\n  computed: {\n    ...mapGetters(['userId']),\n  },\n  methods: {\n\n    handleFileChange(event) {\n      const file = event.target.files[0];\n\n      // Validate file type\n      if (!file.type.startsWith('image/')) {\n        alert('Please upload a valid image file.');\n        return;\n      }\n\n      // Validate file size (e.g., limit to 5MB)\n      const maxSize = 5 * 1024 * 1024; // 5MB\n      if (file.size > maxSize) {\n        alert('File size exceeds 5MB. Please upload a smaller file.');\n        return;\n      }\n\n      this.selectedFile = file;\n      console.log(\"Selected file:\", this.selectedFile);\n    },\n\n    async postMessage() {\n      const token = localStorage.getItem('token');\n      if (!this.newMessage.trim()) return;\n\n      const formData = new FormData();\n      formData.append('content', this.newMessage);\n      if (this.selectedFile) {\n        formData.append('image', this.selectedFile); // Attach image if selected\n      }\n\n      let username;\n      let userId;\n      if (token) {\n        try {\n          const decodedToken = jwtDecode(token);\n          username = decodedToken.username; // Assuming 'username' exists in the token\n          userId = decodedToken.id; // Assuming 'id' exists in the token\n          if (userId) {\n            formData.append('userid', userId); // Add userid directly if available\n          } else if (username) {\n            formData.append('username', username); // Otherwise, pass the username\n          }\n        } catch (error) {\n          console.error('Error decoding token:', error);\n        }\n      }\n\n      try {\n        const response = await fetch(`${API_URL}/api/communities/${this.communityId}/posts/create`, {\n          method: 'POST',\n          body: formData,\n        });\n\n        if (!response.ok) throw new Error('Failed to send message');\n\n        // Clear fields after posting successfully\n        this.newMessage = '';\n        this.selectedFile = null;\n      } catch (error) {\n        console.error('Error sending message:', error);\n      }\n    }\n    ,\n  },\n  async fetchPosts() {\n    try {\n      const response = await fetch(`${API_URL}/api/communities/${this.communityId}/posts`);\n      if (!response.ok) {\n        throw new Error(\"Failed to fetch posts\");\n      }\n      const posts = await response.json();\n      this.chatMessages = posts.map(post => ({\n        id: post.id,\n        text: post.content,\n        username: post.user.name, // Assuming the API returns `user.name`\n        image: post.image ? `data:image/jpeg;base64,${btoa(\n            String.fromCharCode(...new Uint8Array(post.image))\n        )}` : null, // Convert image to Base64 (if needed)\n        responseTo: post.responseTo || null, // Assuming `responseTo` is nullable\n      }));\n    } catch (error) {\n      console.error(\"Error fetching posts:\", error);\n    }\n  },\n\n};\n</script>\n\n\n<style scoped>\n* {\n  font-family: \"Outfit\", sans-serif;\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\nhtml, body {\n  height: 100%;\n  overflow: hidden;\n}\n\n.community-chat {\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n  align-items: center;\n  background-color: #F9F9F9;\n  color: #17003C;\n  width: 100vw;\n  height: 100vh;\n  padding: 1.5rem;\n  overflow: hidden;\n}\n\n.chat-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  width: 100%;\n  max-width: 800px;\n  margin-bottom: 1rem;\n}\n\n.leave-button {\n  background-color: #FF9900;\n  color: white;\n  border: 7px solid #17003C;\n  padding: 0.5rem 1rem;\n  font-size: 1.5rem;\n  cursor: pointer;\n  transition: background-color 0.3s ease, border-color 0.3s ease;\n  border-radius: 100px;\n}\n\n.leave-button:hover {\n  background-color: #17003C;\n  border-color: #FF9900;\n}\n\n.users-online {\n  background-color: #F1F1F1;\n  padding: 1rem;\n  border-radius: 12px;\n  margin-bottom: 1rem;\n  width: 100%;\n  max-width: 800px;\n}\n\n.users-online ul {\n  list-style: none;\n}\n\n.users-online li {\n  display: flex;\n  align-items: center;\n  margin-bottom: 0.5rem;\n  font-weight: 600;\n}\n\n.user-avatar {\n  width: 15px;\n  height: 15px;\n  border-radius: 50%;\n  margin-right: 0.5rem;\n}\n\n.chat-messages {\n  background-color: #F1F1F1;\n  padding: 1rem;\n  border-radius: 12px;\n  flex: 1;\n  width: 100%;\n  max-width: 800px;\n  overflow-y: auto;\n  margin-bottom: 1rem;\n}\n\n.chat-message {\n  display: flex;\n  align-items: center;\n  margin-bottom: 1rem;\n}\n\n.message-avatar {\n  width: 20px;\n  height: 20px;\n  border-radius: 50%;\n  margin-right: 0.75rem;\n}\n\n.message-content {\n  background-color: #E0E0E0;\n  padding: 0.5rem 1rem;\n  border-radius: 12px;\n}\n\n.own-message .message-content {\n  background-color: #D1EAFF;\n}\n\n.message-user {\n  font-weight: bold;\n  display: block;\n  margin-bottom: 0.3rem;\n}\n\n.message-input {\n  display: flex;\n  align-items: center;\n  width: 100%;\n  max-width: 800px;\n  padding-top: 1rem;\n  padding-bottom: 1rem;\n  background-color: #F9F9F9;\n  position: sticky;\n  bottom: 0;\n}\n\n.message-input input {\n  flex: 1;\n  padding: 1rem;\n  border-radius: 50px;\n  border: 1px solid #ccc;\n  margin-right: 1rem;\n  font-size: 1.2rem;\n}\n\n.message-box {\n  background-color: #17003C;\n  color: white;\n  border-radius: 15px;\n  padding: 15px;\n  margin: 10px auto;\n  width: 90%;\n  max-width: 600px;\n}\n\n.new-message-box {\n  background-color: #17003C;\n  padding: 20px;\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n  margin-bottom: 20px;\n}\n\n.user-info {\n  display: flex;\n  align-items: center;\n  margin-bottom: 10px;\n}\n\n.user-avatar {\n  width: 40px;\n  height: 40px;\n  border-radius: 50%;\n  background-color: gray;\n  margin-right: 10px;\n}\n\n.username {\n  font-weight: bold;\n  color: #FF9900;\n}\n\n.response-to {\n  font-size: 0.9em;\n  color: #FF9900;\n  margin-left: 5px;\n}\n\ntextarea {\n  width: 100%;\n  border-radius: 10px;\n  padding: 10px;\n  font-size: 1em;\n  margin: 10px 0;\n  border: none;\n}\n\n.post-button {\n  background-color: #FF9900;\n  color: white;\n  padding: 8px 20px;\n  border: none;\n  border-radius: 5px;\n  cursor: pointer;\n}\n\n.post-button:hover {\n  background-color: #E68A00;\n}\n\n/* Message Actions */\n.message-actions {\n  display: flex;\n  justify-content: space-around;\n  margin-top: 10px;\n}\n\n.message-actions button {\n  background: none;\n  border: none;\n  color: #FF9900;\n  cursor: pointer;\n  font-size: 1em;\n}\n\n.message-actions button:hover {\n  color: #E68A00;\n}\n\n/* Comments Section */\n.comments-section {\n  margin-top: 10px;\n  padding: 10px;\n  background-color: #2A1E54;\n  border-radius: 10px;\n}\n\n.comment {\n  margin-bottom: 5px;\n}\n\n.comment .username {\n  font-weight: bold;\n  color: #FF9900;\n}\n\n.comment textarea {\n  margin-top: 5px;\n}\n.user-avatar img {\n  width: 40px;\n  height: 40px;\n  border-radius: 50%;\n  object-fit: cover;\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}