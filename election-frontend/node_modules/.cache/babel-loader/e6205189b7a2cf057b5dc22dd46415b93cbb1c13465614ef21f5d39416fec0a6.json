{"ast":null,"code":"import { API_URL } from \"@/config\";\nimport jwtDecode from \"jwt-decode\";\nexport default {\n  name: \"CommunityChatComponent\",\n  props: [\"communityId\"],\n  data() {\n    return {\n      chatMessages: [],\n      newMessage: \"\",\n      selectedFile: null\n    };\n  },\n  methods: {\n    // Fetch posts for the community\n    async fetchPosts() {\n      try {\n        const token = localStorage.getItem(\"token\"); // Retrieve token\n        const response = await fetch(`${API_URL}/api/communities/${this.communityId}/posts`, {\n          method: \"GET\",\n          headers: {\n            Authorization: `Bearer ${token}` // Include token in Authorization header\n          }\n        });\n        if (!response.ok) {\n          throw new Error(\"Failed to fetch posts\");\n        }\n        const posts = await response.json();\n        this.chatMessages = posts.map(post => ({\n          id: post.id,\n          text: post.content,\n          username: post.user?.username || \"Anonymous\",\n          image: post.image ? `data:image/jpeg;base64,${post.image}` : null,\n          responseTo: post.responseTo || null,\n          comments: post.comments || [],\n          showComments: false,\n          newComment: \"\"\n        }));\n        console.log(\"Chat messages loaded:\", this.chatMessages);\n      } catch (error) {\n        console.error(\"Error fetching posts:\", error);\n      }\n    },\n    handleFileChange(event) {\n      const file = event.target.files[0];\n      if (!file.type.startsWith(\"image/\")) {\n        alert(\"Please upload a valid image file.\");\n        return;\n      }\n      const maxSize = 5 * 1024 * 1024;\n      if (file.size > maxSize) {\n        alert(\"File size exceeds 5MB. Please upload a smaller file.\");\n        return;\n      }\n      this.selectedFile = file;\n    },\n    // Post a new message\n    async postMessage() {\n      const token = localStorage.getItem(\"token\"); // Retrieve token\n      if (!token) {\n        alert(\"User not authenticated. Please log in.\");\n        return;\n      }\n      let userId;\n      try {\n        const decodedToken = jwtDecode(token);\n        userId = decodedToken.id;\n      } catch (error) {\n        console.error(\"Error decoding token:\", error);\n        alert(\"Invalid token. Please log in again.\");\n        return;\n      }\n      const formData = new FormData();\n      formData.append(\"content\", this.newMessage);\n      formData.append(\"userid\", userId);\n      if (this.selectedFile) {\n        formData.append(\"image\", this.selectedFile);\n      }\n      try {\n        const response = await fetch(`${API_URL}/api/communities/${this.communityId}/posts/create`, {\n          method: \"POST\",\n          headers: {\n            Authorization: `Bearer ${token}`\n          },\n          body: formData\n        });\n        if (!response.ok) throw new Error(\"Failed to send message\");\n        this.newMessage = \"\";\n        this.selectedFile = null;\n        this.fetchPosts();\n      } catch (error) {\n        console.error(\"Error sending message:\", error);\n      }\n    },\n    openComments(postId) {\n      const post = this.chatMessages.find(message => message.id === postId);\n      if (post) {\n        post.showComments = !post.showComments;\n      }\n    }\n  },\n  mounted() {\n    this.fetchPosts();\n  }\n};","map":{"version":3,"names":["API_URL","jwtDecode","name","props","data","chatMessages","newMessage","selectedFile","methods","fetchPosts","token","localStorage","getItem","response","fetch","communityId","method","headers","Authorization","ok","Error","posts","json","map","post","id","text","content","username","user","image","responseTo","comments","showComments","newComment","console","log","error","handleFileChange","event","file","target","files","type","startsWith","alert","maxSize","size","postMessage","userId","decodedToken","formData","FormData","append","body","openComments","postId","find","message","mounted"],"sources":["/Users/suhayb/Documenten/cuuruuvoovii16/election-frontend/src/components/CommunityChatPage.vue"],"sourcesContent":["<template>\n  <div class=\"community-chat\">\n\n    <div class=\"chat-header\">\n      <h2>Community Chat App</h2>\n    </div>\n\n    <div class=\"new-message-box\">\n      <textarea v-model=\"newMessage\" placeholder=\"type message here...\"></textarea>\n      <input type=\"file\" @change=\"handleFileChange\" accept=\"image/*\" />\n      <button class=\"post-button\" @click=\"postMessage\">Post</button>\n    </div>\n\n    <div class=\"posts-container\">\n      <div v-for=\"message in chatMessages\" :key=\"message.id\" class=\"message-box\">\n        <div class=\"user-info\">\n          <span class=\"user-avatar\"></span>\n          <span class=\"username\">{{ message.username }}</span>\n        </div>\n        <img v-if=\"message.image\" :src=\"message.image\" alt=\"Post Image\" class=\"message-image\" />\n        <p class=\"message-area\">{{ message.text }}</p>\n        <div class=\"message-actions\">\n          <button @click=\"toggleComments(message.id)\">Comments</button>\n          <button @click=\"likeMessage(message.id)\">Like</button>\n          <button @click=\"shareMessage(message.id)\">Share</button>\n        </div>\n\n        <!-- Comments Section -->\n        <div v-if=\"isCommentsOpen(message.id)\" class=\"comments-section\">\n          <div v-for=\"comment in message.comments\" :key=\"comment.id\" class=\"comment\">\n            <span class=\"comment-username\">{{ comment.username }}</span>\n            <p class=\"comment-text\">{{ comment.text }}</p>\n          </div>\n          <div class=\"new-comment-box\">\n            <input v-model=\"newComments[message.id]\" placeholder=\"Add a comment...\" />\n            <button @click=\"addComment(message.id)\">Post Comment</button>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { API_URL } from \"@/config\";\nimport jwtDecode from \"jwt-decode\";\n\nexport default {\n  name: \"CommunityChatComponent\",\n  props: [\"communityId\"],\n  data() {\n    return {\n      chatMessages: [],\n      newMessage: \"\",\n      selectedFile: null,\n    };\n  },\n  methods: {\n    // Fetch posts for the community\n    async fetchPosts() {\n      try {\n        const token = localStorage.getItem(\"token\"); // Retrieve token\n        const response = await fetch(`${API_URL}/api/communities/${this.communityId}/posts`, {\n          method: \"GET\",\n          headers: {\n            Authorization: `Bearer ${token}`, // Include token in Authorization header\n          },\n        });\n\n        if (!response.ok) {\n          throw new Error(\"Failed to fetch posts\");\n        }\n\n        const posts = await response.json();\n\n\n        this.chatMessages = posts.map((post) => ({\n          id: post.id,\n          text: post.content,\n          username: post.user?.username || \"Anonymous\",\n          image: post.image ? `data:image/jpeg;base64,${post.image}` : null,\n          responseTo: post.responseTo || null,\n          comments: post.comments || [],\n          showComments: false,\n          newComment: \"\",\n        }));\n\n        console.log(\"Chat messages loaded:\", this.chatMessages);\n      } catch (error) {\n        console.error(\"Error fetching posts:\", error);\n      }\n    },\n\n\n    handleFileChange(event) {\n      const file = event.target.files[0];\n      if (!file.type.startsWith(\"image/\")) {\n        alert(\"Please upload a valid image file.\");\n        return;\n      }\n      const maxSize = 5 * 1024 * 1024;\n      if (file.size > maxSize) {\n        alert(\"File size exceeds 5MB. Please upload a smaller file.\");\n        return;\n      }\n      this.selectedFile = file;\n    },\n\n    // Post a new message\n    async postMessage() {\n      const token = localStorage.getItem(\"token\"); // Retrieve token\n      if (!token) {\n        alert(\"User not authenticated. Please log in.\");\n        return;\n      }\n\n      let userId;\n      try {\n        const decodedToken = jwtDecode(token);\n        userId = decodedToken.id;\n\n      } catch (error) {\n        console.error(\"Error decoding token:\", error);\n        alert(\"Invalid token. Please log in again.\");\n        return;\n      }\n\n      const formData = new FormData();\n      formData.append(\"content\", this.newMessage);\n      formData.append(\"userid\", userId);\n      if (this.selectedFile) {\n        formData.append(\"image\", this.selectedFile);\n      }\n\n      try {\n        const response = await fetch(`${API_URL}/api/communities/${this.communityId}/posts/create`, {\n          method: \"POST\",\n          headers: {\n            Authorization: `Bearer ${token}`,\n          },\n          body: formData,\n        });\n\n        if (!response.ok) throw new Error(\"Failed to send message\");\n\n\n        this.newMessage = \"\";\n        this.selectedFile = null;\n        this.fetchPosts();\n      } catch (error) {\n        console.error(\"Error sending message:\", error);\n      }\n    },\n\n\n    openComments(postId) {\n      const post = this.chatMessages.find((message) => message.id === postId);\n      if (post) {\n        post.showComments = !post.showComments;\n      }\n    },\n  },\n\n  mounted() {\n    this.fetchPosts();\n  },\n};\n</script>\n<style>\n* {\n  font-family: \"Outfit\", sans-serif;\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\nhtml, body {\n  height: 100%;\n  overflow: hidden;\n}\n\n.community-chat {\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n  align-items: center;\n  background-color: #F9F9F9;\n  color: #17003C;\n  width: 100vw;\n  height: 100vh;\n  padding: 1.5rem;\n  overflow: hidden;\n}\n\n.chat-header {\n  flex-shrink: 0;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  width: 100%;\n  max-width: 800px;\n  margin-bottom: 1rem;\n}\n\n.new-message-box {\n  flex-shrink: 0;\n  background-color: #17003C;\n  padding: 20px;\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n  margin-bottom: 20px;\n  width: 100%;\n  max-width: 800px;\n  border-radius: 10px;\n}\n\ntextarea {\n  width: 100%;\n  border-radius: 10px;\n  padding: 10px;\n  font-size: 1em;\n  margin: 10px 0;\n  border: none;\n  background-color: white;\n  color: black;\n}\n\n.post-button {\n  background-color: #FF9900;\n  color: white;\n  padding: 8px 20px;\n  border: none;\n  border-radius: 5px;\n  cursor: pointer;\n}\n\n.post-button:hover {\n  background-color: #E68A00;\n}\n\n.posts-container {\n  flex-grow: 1;\n  width: 100%;\n  max-width: 800px;\n  overflow-y: auto;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 10px;\n  padding: 10px 0;\n}\n\n.message-box {\n  background-color: #17003C;\n  color: white;\n  border-radius: 15px;\n  padding: 15px;\n  margin-bottom: 10px;\n  width: 90%;\n  max-width: 600px;\n}\n\n.user-info {\n  display: flex;\n  align-items: center;\n  margin-bottom: 10px;\n}\n\n.user-avatar {\n  width: 40px;\n  height: 40px;\n  border-radius: 50%;\n  background-color: gray;\n  margin-right: 10px;\n}\n\n.username {\n  font-weight: bold;\n  color: #FF9900;\n}\n\n.message-area {\n  background-color: white;\n  color: black;\n  padding: 10px;\n  border-radius: 10px;\n  font-size: 1em;\n  margin-top: 10px;\n}\n\n.message-image {\n  max-width: 50%;\n  border-radius: 10px;\n  margin-top: 10px;\n}\n\n.message-actions {\n  display: flex;\n  justify-content: space-around;\n  margin-top: 10px;\n}\n\n.message-actions button {\n  background: none;\n  border: none;\n  color: #FF9900;\n  cursor: pointer;\n  font-size: 1em;\n}\n\n.message-actions button:hover {\n  color: #E68A00;\n}\n\n.comments-section {\n  margin-top: 10px;\n  padding: 10px;\n  background-color: #2A1E54;\n  border-radius: 10px;\n}\n\n.comment {\n  margin-bottom: 5px;\n}\n\n.comment .username {\n  font-weight: bold;\n  color: #FF9900;\n}\n\n.comment textarea {\n  margin-top: 5px;\n}\n\n\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}