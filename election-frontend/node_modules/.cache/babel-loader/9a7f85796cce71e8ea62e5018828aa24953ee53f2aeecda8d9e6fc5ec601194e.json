{"ast":null,"code":"export default {\n  name: \"VotesPerPartyPage\",\n  data() {\n    return {\n      parties: [],\n      sortOrder: \"asc\",\n      // Start met oplopend sorteren\n      sortType: \"votes\" // Sorteertype: 'votes' of 'alphabet'\n    };\n  },\n  mounted() {\n    this.fetchVotesPerParty();\n  },\n  methods: {\n    async fetchVotesPerParty() {\n      try {\n        const response = await fetch(\"http://localhost:8084/api/election-results/votes-per-party\");\n        if (!response.ok) {\n          throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        const data = await response.json();\n        this.parties = data.map(party => ({\n          name: party.name,\n          totalVotes: party.totalVotes\n        }));\n        this.sortParties(); // Sorteer direct na het ophalen van data\n      } catch (error) {\n        console.error(\"Error fetching votes per party:\", error);\n      }\n    },\n    toggleSortOrder(type) {\n      if (this.sortType === type) {\n        // Wissel alleen de sortOrder als het type hetzelfde is\n        this.sortOrder = this.sortOrder === \"asc\" ? \"desc\" : \"asc\";\n      } else {\n        // Stel nieuw sorteertype in en begin met 'asc'\n        this.sortType = type;\n        this.sortOrder = \"asc\";\n      }\n      this.sortParties();\n    },\n    sortParties() {\n      if (this.sortType === \"votes\") {\n        // Sorteer op stemmen\n        this.parties.sort((a, b) => {\n          return this.sortOrder === \"asc\" ? a.totalVotes - b.totalVotes : b.totalVotes - a.totalVotes;\n        });\n      } else if (this.sortType === \"alphabet\") {\n        // Sorteer alfabetisch\n        this.parties.sort((a, b) => {\n          return this.sortOrder === \"asc\" ? a.name.localeCompare(b.name) : b.name.localeCompare(a.name);\n        });\n      }\n    },\n    formatVotes(votes) {\n      // Formatteer het aantal stemmen naar een leesbare notatie (bijv. '1.234.567')\n      return votes.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \".\");\n    }\n  }\n};","map":{"version":3,"names":["name","data","parties","sortOrder","sortType","mounted","fetchVotesPerParty","methods","response","fetch","ok","Error","status","json","map","party","totalVotes","sortParties","error","console","toggleSortOrder","type","sort","a","b","localeCompare","formatVotes","votes","toString","replace"],"sources":["/Users/suhayb/Documenten/cuuruuvoovii16/election-frontend/src/components/VotesPerPartyPage.vue"],"sourcesContent":["<template>\n  <div class=\"votes-per-party\">\n    <h1>Votes Per Party</h1>\n    <div class=\"filter-buttons\">\n      <button @click=\"toggleSortOrder('votes')\">\n        Sort by Votes ({{ sortOrder === 'asc' && sortType === 'votes' ? 'Low to High' : 'High to Low' }})\n      </button>\n      <button @click=\"toggleSortOrder('alphabet')\">\n        Sort Alphabetically ({{ sortOrder === 'asc' && sortType === 'alphabet' ? 'A-Z' : 'Z-A' }})\n      </button>\n    </div>\n    <table>\n      <thead>\n      <tr>\n        <th>Party Name</th>\n        <th>Total Votes</th>\n      </tr>\n      </thead>\n      <tbody>\n      <tr v-for=\"party in parties\" :key=\"party.name\">\n        <td>{{ party.name }}</td>\n        <td>{{ formatVotes(party.totalVotes) }}</td>\n      </tr>\n      </tbody>\n    </table>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: \"VotesPerPartyPage\",\n  data() {\n    return {\n      parties: [],\n      sortOrder: \"asc\", // Start met oplopend sorteren\n      sortType: \"votes\", // Sorteertype: 'votes' of 'alphabet'\n    };\n  },\n  mounted() {\n    this.fetchVotesPerParty();\n  },\n  methods: {\n    async fetchVotesPerParty() {\n      try {\n        const response = await fetch(\n            \"http://localhost:8084/api/election-results/votes-per-party\"\n        );\n        if (!response.ok) {\n          throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        const data = await response.json();\n        this.parties = data.map((party) => ({\n          name: party.name,\n          totalVotes: party.totalVotes,\n        }));\n        this.sortParties(); // Sorteer direct na het ophalen van data\n      } catch (error) {\n        console.error(\"Error fetching votes per party:\", error);\n      }\n    },\n    toggleSortOrder(type) {\n      if (this.sortType === type) {\n        // Wissel alleen de sortOrder als het type hetzelfde is\n        this.sortOrder = this.sortOrder === \"asc\" ? \"desc\" : \"asc\";\n      } else {\n        // Stel nieuw sorteertype in en begin met 'asc'\n        this.sortType = type;\n        this.sortOrder = \"asc\";\n      }\n      this.sortParties();\n    },\n    sortParties() {\n      if (this.sortType === \"votes\") {\n        // Sorteer op stemmen\n        this.parties.sort((a, b) => {\n          return this.sortOrder === \"asc\"\n              ? a.totalVotes - b.totalVotes\n              : b.totalVotes - a.totalVotes;\n        });\n      } else if (this.sortType === \"alphabet\") {\n        // Sorteer alfabetisch\n        this.parties.sort((a, b) => {\n          return this.sortOrder === \"asc\"\n              ? a.name.localeCompare(b.name)\n              : b.name.localeCompare(a.name);\n        });\n      }\n    },\n    formatVotes(votes) {\n      // Formatteer het aantal stemmen naar een leesbare notatie (bijv. '1.234.567')\n      return votes.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \".\");\n    },\n  },\n};\n</script>\n\n<style scoped>\n.votes-per-party {\n  margin: 20px;\n  text-align: center;\n}\n\n.filter-buttons {\n  margin-bottom: 20px;\n}\n\nbutton {\n  margin: 0 10px;\n  padding: 10px 20px;\n  background-color: #ff9933;\n  border: none;\n  border-radius: 5px;\n  color: white;\n  font-size: 16px;\n  cursor: pointer;\n}\n\nbutton:hover {\n  background-color: #e68a00;\n}\n\ntable {\n  width: 80%;\n  margin: auto;\n  border-collapse: collapse;\n}\n\nth,\ntd {\n  border: 1px solid #ccc;\n  padding: 10px;\n  text-align: center;\n}\n\nth {\n  background-color: #f4f4f4;\n}\n</style>\n"],"mappings":"AA6BA,eAAe;EACbA,IAAI,EAAE,mBAAmB;EACzBC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,OAAO,EAAE,EAAE;MACXC,SAAS,EAAE,KAAK;MAAE;MAClBC,QAAQ,EAAE,OAAO,CAAE;IACrB,CAAC;EACH,CAAC;EACDC,OAAOA,CAAA,EAAG;IACR,IAAI,CAACC,kBAAkB,CAAC,CAAC;EAC3B,CAAC;EACDC,OAAO,EAAE;IACP,MAAMD,kBAAkBA,CAAA,EAAG;MACzB,IAAI;QACF,MAAME,QAAO,GAAI,MAAMC,KAAK,CACxB,4DACJ,CAAC;QACD,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;UAChB,MAAM,IAAIC,KAAK,CAAC,uBAAuBH,QAAQ,CAACI,MAAM,EAAE,CAAC;QAC3D;QACA,MAAMX,IAAG,GAAI,MAAMO,QAAQ,CAACK,IAAI,CAAC,CAAC;QAClC,IAAI,CAACX,OAAM,GAAID,IAAI,CAACa,GAAG,CAAEC,KAAK,KAAM;UAClCf,IAAI,EAAEe,KAAK,CAACf,IAAI;UAChBgB,UAAU,EAAED,KAAK,CAACC;QACpB,CAAC,CAAC,CAAC;QACH,IAAI,CAACC,WAAW,CAAC,CAAC,EAAE;MACtB,EAAE,OAAOC,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,iCAAiC,EAAEA,KAAK,CAAC;MACzD;IACF,CAAC;IACDE,eAAeA,CAACC,IAAI,EAAE;MACpB,IAAI,IAAI,CAACjB,QAAO,KAAMiB,IAAI,EAAE;QAC1B;QACA,IAAI,CAAClB,SAAQ,GAAI,IAAI,CAACA,SAAQ,KAAM,KAAI,GAAI,MAAK,GAAI,KAAK;MAC5D,OAAO;QACL;QACA,IAAI,CAACC,QAAO,GAAIiB,IAAI;QACpB,IAAI,CAAClB,SAAQ,GAAI,KAAK;MACxB;MACA,IAAI,CAACc,WAAW,CAAC,CAAC;IACpB,CAAC;IACDA,WAAWA,CAAA,EAAG;MACZ,IAAI,IAAI,CAACb,QAAO,KAAM,OAAO,EAAE;QAC7B;QACA,IAAI,CAACF,OAAO,CAACoB,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAK;UAC1B,OAAO,IAAI,CAACrB,SAAQ,KAAM,KAAI,GACxBoB,CAAC,CAACP,UAAS,GAAIQ,CAAC,CAACR,UAAS,GAC1BQ,CAAC,CAACR,UAAS,GAAIO,CAAC,CAACP,UAAU;QACnC,CAAC,CAAC;MACJ,OAAO,IAAI,IAAI,CAACZ,QAAO,KAAM,UAAU,EAAE;QACvC;QACA,IAAI,CAACF,OAAO,CAACoB,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAK;UAC1B,OAAO,IAAI,CAACrB,SAAQ,KAAM,KAAI,GACxBoB,CAAC,CAACvB,IAAI,CAACyB,aAAa,CAACD,CAAC,CAACxB,IAAI,IAC3BwB,CAAC,CAACxB,IAAI,CAACyB,aAAa,CAACF,CAAC,CAACvB,IAAI,CAAC;QACpC,CAAC,CAAC;MACJ;IACF,CAAC;IACD0B,WAAWA,CAACC,KAAK,EAAE;MACjB;MACA,OAAOA,KAAK,CAACC,QAAQ,CAAC,CAAC,CAACC,OAAO,CAAC,uBAAuB,EAAE,GAAG,CAAC;IAC/D;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}