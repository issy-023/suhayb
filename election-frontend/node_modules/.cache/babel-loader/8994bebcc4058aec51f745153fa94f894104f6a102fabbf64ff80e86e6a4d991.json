{"ast":null,"code":"import { createCommentVNode as _createCommentVNode, createElementVNode as _createElementVNode, vModelText as _vModelText, withDirectives as _withDirectives, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString } from \"vue\";\nconst _hoisted_1 = {\n  class: \"community-chat\"\n};\nconst _hoisted_2 = {\n  class: \"chat-header\"\n};\nconst _hoisted_3 = {\n  class: \"new-message-box\"\n};\nconst _hoisted_4 = {\n  class: \"posts-container\"\n};\nconst _hoisted_5 = {\n  class: \"user-info\"\n};\nconst _hoisted_6 = {\n  class: \"username\"\n};\nconst _hoisted_7 = [\"src\"];\nconst _hoisted_8 = {\n  class: \"message-area\"\n};\nconst _hoisted_9 = {\n  class: \"message-actions\"\n};\nconst _hoisted_10 = [\"onClick\"];\nconst _hoisted_11 = [\"onClick\"];\nconst _hoisted_12 = [\"onClick\"];\nconst _hoisted_13 = {\n  key: 1,\n  class: \"comments-section\"\n};\nconst _hoisted_14 = {\n  class: \"comment-username\"\n};\nconst _hoisted_15 = {\n  class: \"comment-text\"\n};\nconst _hoisted_16 = {\n  class: \"new-comment-box\"\n};\nconst _hoisted_17 = [\"onClick\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createCommentVNode(\" HEADER \"), _createElementVNode(\"div\", _hoisted_2, [_cache[5] || (_cache[5] = _createElementVNode(\"h2\", null, \"Community Chat App\", -1 /* HOISTED */)), _createElementVNode(\"button\", {\n    class: \"leave-button\",\n    onClick: _cache[0] || (_cache[0] = (...args) => $options.leaveCommunity && $options.leaveCommunity(...args))\n  }, \"Leave\")]), _createCommentVNode(\" POST BERICHT \"), _createElementVNode(\"div\", _hoisted_3, [_withDirectives(_createElementVNode(\"textarea\", {\n    \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => $data.newMessage = $event),\n    placeholder: \"Type message here...\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $data.newMessage]]), _createElementVNode(\"input\", {\n    type: \"file\",\n    onChange: _cache[2] || (_cache[2] = (...args) => $options.handleFileChange && $options.handleFileChange(...args)),\n    accept: \"image/*\"\n  }, null, 32 /* NEED_HYDRATION */), _createElementVNode(\"button\", {\n    class: \"post-button\",\n    onClick: _cache[3] || (_cache[3] = (...args) => $options.postMessage && $options.postMessage(...args))\n  }, \"Post\")]), _createCommentVNode(\" OVERZICHT VAN POSTS \"), _createElementVNode(\"div\", _hoisted_4, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.chatMessages, message => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: message.id,\n      class: \"message-box\"\n    }, [_createElementVNode(\"div\", _hoisted_5, [_cache[6] || (_cache[6] = _createElementVNode(\"span\", {\n      class: \"user-avatar\"\n    }, null, -1 /* HOISTED */)), _createElementVNode(\"span\", _hoisted_6, _toDisplayString(message.username), 1 /* TEXT */)]), _createCommentVNode(\" Als er een image is, toon 'm \"), message.image ? (_openBlock(), _createElementBlock(\"img\", {\n      key: 0,\n      src: message.image,\n      alt: \"Post Image\",\n      class: \"message-image\"\n    }, null, 8 /* PROPS */, _hoisted_7)) : _createCommentVNode(\"v-if\", true), _createElementVNode(\"p\", _hoisted_8, _toDisplayString(message.text), 1 /* TEXT */), _createCommentVNode(\" ACTIE KNOPPEN: Like/Unlike, Share, Comments etc. \"), _createElementVNode(\"div\", _hoisted_9, [_createElementVNode(\"button\", {\n      onClick: $event => $options.toggleLike(message.id)\n    }, _toDisplayString(message.isLiked ? \"Unlike\" : \"Like\"), 9 /* TEXT, PROPS */, _hoisted_10), _createElementVNode(\"span\", null, _toDisplayString(message.likeCount) + \" Likes\", 1 /* TEXT */), _createElementVNode(\"button\", {\n      onClick: $event => _ctx.reportPost(message.id)\n    }, \"Report\", 8 /* PROPS */, _hoisted_11), _createElementVNode(\"button\", {\n      onClick: $event => $options.toggleComments(message.id)\n    }, _toDisplayString($options.isCommentsOpen(message.id) ? \"Hide\" : \"Show\") + \" Comments \", 9 /* TEXT, PROPS */, _hoisted_12)]), _createCommentVNode(\" COMMENT-SECTIE IN-/UITKLAPBAAR \"), $options.isCommentsOpen(message.id) ? (_openBlock(), _createElementBlock(\"div\", _hoisted_13, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList(message.comments, comment => {\n      return _openBlock(), _createElementBlock(\"div\", {\n        key: comment.id,\n        class: \"comment\"\n      }, [_createElementVNode(\"span\", _hoisted_14, _toDisplayString(comment.user?.username), 1 /* TEXT */), _createElementVNode(\"p\", _hoisted_15, _toDisplayString(comment.content), 1 /* TEXT */)]);\n    }), 128 /* KEYED_FRAGMENT */)), _createElementVNode(\"div\", _hoisted_16, [_withDirectives(_createElementVNode(\"textarea\", {\n      \"onUpdate:modelValue\": _cache[4] || (_cache[4] = $event => $data.newComments = $event),\n      placeholder: \"Add a comment...\"\n    }, null, 512 /* NEED_PATCH */), [[_vModelText, $data.newComments]]), _createElementVNode(\"button\", {\n      onClick: $event => $options.addComment(message.id)\n    }, \"Comment\", 8 /* PROPS */, _hoisted_17)])])) : _createCommentVNode(\"v-if\", true)]);\n  }), 128 /* KEYED_FRAGMENT */))])]);\n}","map":{"version":3,"names":["class","key","_createElementBlock","_hoisted_1","_createCommentVNode","_createElementVNode","_hoisted_2","onClick","_cache","args","$options","leaveCommunity","_hoisted_3","$event","$data","newMessage","placeholder","type","onChange","handleFileChange","accept","postMessage","_hoisted_4","_Fragment","_renderList","chatMessages","message","id","_hoisted_5","_hoisted_6","_toDisplayString","username","image","src","alt","_hoisted_7","_hoisted_8","text","_hoisted_9","toggleLike","isLiked","_hoisted_10","likeCount","_ctx","reportPost","_hoisted_11","toggleComments","isCommentsOpen","_hoisted_12","_hoisted_13","comments","comment","_hoisted_14","user","_hoisted_15","content","_hoisted_16","newComments","addComment","_hoisted_17"],"sources":["/Users/suhayb/MijnProjecten/cuuruuvoovii16/election-frontend/src/components/CommunityChatPage.vue"],"sourcesContent":["<template>\n  <div class=\"community-chat\">\n    <!-- HEADER -->\n    <div class=\"chat-header\">\n      <h2>Community Chat App</h2>\n      <button class=\"leave-button\" @click=\"leaveCommunity\">Leave</button>\n    </div>\n\n    <!-- POST BERICHT -->\n    <div class=\"new-message-box\">\n      <textarea v-model=\"newMessage\" placeholder=\"Type message here...\"></textarea>\n      <input type=\"file\" @change=\"handleFileChange\" accept=\"image/*\" />\n      <button class=\"post-button\" @click=\"postMessage\">Post</button>\n    </div>\n\n    <!-- OVERZICHT VAN POSTS -->\n    <div class=\"posts-container\">\n      <div v-for=\"message in chatMessages\" :key=\"message.id\" class=\"message-box\">\n        <div class=\"user-info\">\n          <span class=\"user-avatar\"></span>\n          <span class=\"username\">{{ message.username }}</span>\n        </div>\n\n        <!-- Als er een image is, toon 'm -->\n        <img\n            v-if=\"message.image\"\n            :src=\"message.image\"\n            alt=\"Post Image\"\n            class=\"message-image\"\n        />\n        <p class=\"message-area\">{{ message.text }}</p>\n\n        <!-- ACTIE KNOPPEN: Like/Unlike, Share, Comments etc. -->\n        <div class=\"message-actions\">\n          <button @click=\"toggleLike(message.id)\">\n            {{ message.isLiked ? \"Unlike\" : \"Like\" }}\n          </button>\n          <span>{{ message.likeCount }} Likes</span>\n          <button @click=\"reportPost(message.id)\">Report</button>\n\n          <button @click=\"toggleComments(message.id)\">\n            {{ isCommentsOpen(message.id) ? \"Hide\" : \"Show\" }} Comments\n          </button>\n        </div>\n\n        <!-- COMMENT-SECTIE IN-/UITKLAPBAAR -->\n        <div v-if=\"isCommentsOpen(message.id)\" class=\"comments-section\">\n          <div v-for=\"comment in message.comments\" :key=\"comment.id\" class=\"comment\">\n            <span class=\"comment-username\">{{ comment.user?.username }}</span>\n            <p class=\"comment-text\">{{ comment.content }}</p>\n          </div>\n          <div class=\"new-comment-box\">\n            <textarea v-model=\"newComments\" placeholder=\"Add a comment...\" />\n            <button @click=\"addComment(message.id)\">Comment</button>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { API_URL } from \"@/config\";\nimport jwtDecode from \"jwt-decode\";\n\nexport default {\n  name: \"CommunityChatComponent\",\n  props: [\"communityId\"],\n\n  data() {\n    return {\n      chatMessages: [],   // Hier komen de posts in\n      newMessage: \"\",     // Tekst van nieuwe post\n      selectedFile: null, // Ge√ºploade afbeelding\n      openComments: {},   // Bijhouden welke post z'n comments open heeft staan\n      newComments: \"\",    // Tekst van nieuwe comment\n    };\n  },\n\n  methods: {\n    /**\n     * 1) POSTS OPHALEN\n     * Haal de posts op voor deze communityId.\n     * De back-end geeft per post o.a. 'likedByUser' en 'likeCount' terug,\n     * zodat we weten of de huidige user al geliket heeft.\n     */\n    async fetchPosts() {\n      try {\n        const token = localStorage.getItem(\"token\");\n        if (!token) throw new Error(\"No token found.\");\n\n        const decodedToken = jwtDecode(token);\n        const userId = decodedToken.id;\n\n        // GET /api/communities/{communityId}/posts?userId=...\n        const response = await fetch(\n            `${API_URL}/api/communities/${this.communityId}/posts?userId=${userId}`,\n            {\n              method: \"GET\",\n              headers: { Authorization: `Bearer ${token}` },\n            }\n        );\n\n        if (!response.ok) throw new Error(\"Failed to fetch posts\");\n        const posts = await response.json();\n\n        // Sla de posts op in chatMessages, met 'isLiked' als boolean\n        this.chatMessages = posts.map((post) => ({\n          id: post.id,\n          text: post.content,\n          username: post.user?.username || \"Anonymous\",\n          // Image in base64\n          image: post.image ? `data:image/jpeg;base64,${post.image}` : null,\n          likeCount: post.likeCount,\n          isLiked: post.likedByUser, // Belangrijk: true als user 'm al geliket heeft\n          comments: post.comments || [],\n        }));\n      } catch (error) {\n        console.error(\"Error fetching posts:\", error);\n      }\n    },\n\n    /**\n     * 2) LIKE OF UNLIKE\n     * Als post.isLiked = true, dan 'unlike', anders 'like'.\n     */\n    async toggleLike(messageId) {\n      const token = localStorage.getItem(\"token\");\n      if (!token) return alert(\"User not authenticated. Please log in.\");\n\n      const decodedToken = jwtDecode(token);\n      const userId = decodedToken.id;\n\n      // Post vinden\n      const post = this.chatMessages.find((msg) => msg.id === messageId);\n      if (!post) return;\n\n      // Bepaal of we POST (like) of DELETE (unlike) moeten doen\n      const method = post.isLiked ? \"DELETE\" : \"POST\";\n      const endpoint = `${API_URL}/api/communities/${this.communityId}/posts/${messageId}/like?userId=${userId}`;\n\n      try {\n        const response = await fetch(endpoint, {\n          method,\n          headers: {\n            Authorization: `Bearer ${token}`,\n          },\n        });\n        if (!response.ok) {\n          const errorText = await response.text();\n          console.error(\"Error toggling like:\", errorText);\n          return;\n        }\n\n        // Optimistic update: direct in de UI de status veranderen\n        if (post.isLiked) {\n          // Was al geliket ‚Üí unlike\n          post.isLiked = false;\n          post.likeCount--;\n        } else {\n          // Nog niet geliket ‚Üí like\n          post.isLiked = true;\n          post.likeCount++;\n        }\n      } catch (error) {\n        console.error(\"Error toggling like:\", error);\n      }\n    },\n\n    /**\n     * 3) COMMENT TOEVOEGEN\n     * Plaats een nieuwe comment op een postId.\n     */\n    async addComment(messageId) {\n      const token = localStorage.getItem(\"token\");\n      if (!token) return alert(\"User not authenticated. Please log in.\");\n\n      try {\n        const decodedToken = jwtDecode(token);\n\n        // POST /api/comments/{postId}/saveComments\n        const response = await fetch(\n            `${API_URL}/api/comments/${messageId}/saveComments`,\n            {\n              method: \"POST\",\n              headers: {\n                Authorization: `Bearer ${token}`,\n                \"Content-Type\": \"application/json\",\n              },\n              body: JSON.stringify({\n                content: this.newComments,\n                userId: decodedToken.id,\n              }),\n            }\n        );\n\n        if (!response.ok) throw new Error(\"Failed to add comment\");\n        // Commentveld legen\n        this.newComments = \"\";\n\n        // Comments herophalen\n        await this.fetchComments(messageId);\n      } catch (error) {\n        console.error(\"Error adding comment:\", error);\n      }\n    },\n\n    /**\n     * 4) COMMENTS OPHALEN\n     * Haal de comments op voor een specifieke postId.\n     */\n    async fetchComments(postId) {\n      const token = localStorage.getItem(\"token\");\n      if (!token) return;\n\n      try {\n        // GET /api/comments/{postId}/getComments\n        const response = await fetch(\n            `${API_URL}/api/comments/${postId}/getComments`,\n            {\n              method: \"GET\",\n              headers: { Authorization: `Bearer ${token}` },\n            }\n        );\n        if (!response.ok) throw new Error(\"Failed to fetch comments\");\n\n        const comments = await response.json();\n\n        // Post in onze chatMessages updaten\n        const postIndex = this.chatMessages.findIndex((msg) => msg.id === postId);\n        if (postIndex !== -1) {\n          this.chatMessages[postIndex].comments = comments;\n        }\n      } catch (error) {\n        console.error(\"Error fetching comments:\", error);\n      }\n    },\n\n    /**\n     * 5) NIEUWE POST PLAATSEN\n     * Met optioneel bestand (image).\n     */\n    async postMessage() {\n      const token = localStorage.getItem(\"token\");\n      if (!token) return alert(\"User not authenticated. Please log in.\");\n\n      try {\n        const decodedToken = jwtDecode(token);\n\n        // Bouw de FormData\n        const formData = new FormData();\n        formData.append(\"content\", this.newMessage);\n        formData.append(\"userid\", decodedToken.id);\n        if (this.selectedFile) formData.append(\"image\", this.selectedFile);\n\n        // POST /api/communities/{communityId}/posts/create\n        const response = await fetch(\n            `${API_URL}/api/communities/${this.communityId}/posts/create`,\n            {\n              method: \"POST\",\n              headers: { Authorization: `Bearer ${token}` },\n              body: formData,\n            }\n        );\n\n        if (!response.ok) throw new Error(\"Failed to post message\");\n\n        // Reset text en file\n        this.newMessage = \"\";\n        this.selectedFile = null;\n\n        // Refresh de postlijst\n        this.fetchPosts();\n      } catch (error) {\n        console.error(\"Error posting message:\", error);\n      }\n    },\n\n    /**\n     * 6) BESTAND UPLOADEN\n     * Check of het een image is en max 5MB.\n     */\n    handleFileChange(event) {\n      const file = event.target.files[0];\n      if (!file.type.startsWith(\"image/\")) {\n        return alert(\"Please upload a valid image file.\");\n      }\n      if (file.size > 5 * 1024 * 1024) {\n        return alert(\"File size exceeds 5MB. Please upload a smaller file.\");\n      }\n      this.selectedFile = file;\n    },\n\n    /**\n     * 7) COMMENTS IN-/UITKLAPPEN\n     * openComments[postId] = true/false\n     */\n    toggleComments(messageId) {\n      this.openComments[messageId] = !this.openComments[messageId];\n      // Alleen als we ze net openklikken, comments ophalen\n      if (this.openComments[messageId]) {\n        this.fetchComments(messageId);\n      }\n    },\n    isCommentsOpen(messageId) {\n      return !!this.openComments[messageId];\n    },\n\n    /**\n     * 8) BERICHT DELEN\n     * Voorbeeldfunctionaliteit: toont simpelweg een alert.\n     */\n    shareMessage(messageId) {\n      alert(`Sharing post with ID: ${messageId} (add your logic here)`);\n    },\n\n    /**\n     * 9) COMMUNITY VERLATEN\n     * Stuur een DELETE-request naar /api/communities/{communityId}/leave?userId=...\n     */\n    async leaveCommunity() {\n      const token = localStorage.getItem(\"token\");\n      if (!token) return alert(\"User not authenticated. Please log in.\");\n\n      try {\n        const decodedToken = jwtDecode(token);\n        const userId = decodedToken.id;\n\n        // DELETE /api/communities/{communityId}/leave?userId=...\n        const response = await fetch(\n            `${API_URL}/api/communities/${this.communityId}/leave?userId=${userId}`,\n            {\n              method: \"DELETE\",\n              headers: { Authorization: `Bearer ${token}` },\n            }\n        );\n\n        if (!response.ok) throw new Error(\"Failed to leave community\");\n\n        alert(\"You have left the community.\");\n        // Navigeer terug naar een communities-overzicht, of wat je wilt\n        this.$router.push({ name: \"Communities\" });\n      } catch (error) {\n        console.error(\"Error leaving community:\", error);\n      }\n    },\n  },\n\n  /**\n   * Bij het laden van de pagina (component), meteen fetchPosts aanroepen.\n   */\n  mounted() {\n    this.fetchPosts();\n  },\n};\n</script>\n\n\n\n\n\n\n<style>\n* {\n  font-family: \"Outfit\", sans-serif;\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\nhtml, body {\n  height: 100%;\n\n}\n\n.community-chat {\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n  align-items: center;\n  background-color: #F9F9F9;\n  color: #17003C;\n  width: 100vw;\n  height: 100vh;\n  padding: 1.5rem;\n  overflow: hidden;\n}\n\n.chat-header {\n  flex-shrink: 0;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  width: 100%;\n  max-width: 800px;\n  margin-bottom: 1rem;\n}\n\n.new-message-box {\n  flex-shrink: 0;\n  background-color: #17003C;\n  padding: 20px;\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n  margin-bottom: 20px;\n  width: 100%;\n  max-width: 800px;\n  border-radius: 10px;\n}\n\ntextarea {\n  width: 100%;\n  border-radius: 10px;\n  padding: 10px;\n  font-size: 1em;\n  margin: 10px 0;\n  border: none;\n  background-color: white;\n  color: black;\n}\n\n.post-button {\n  background-color: #FF9900;\n  color: white;\n  padding: 8px 20px;\n  border: none;\n  border-radius: 5px;\n  cursor: pointer;\n}\n\n.post-button:hover {\n  background-color: #E68A00;\n}\n\n.posts-container {\n  flex-grow: 1;\n  width: 100%;\n  max-width: 800px;\n  overflow-y: auto;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 10px;\n  padding: 10px 0;\n}\n\n.message-box {\n  background-color: #17003C;\n  color: white;\n  border-radius: 15px;\n  padding: 15px;\n  margin-bottom: 10px;\n  width: 90%;\n  max-width: 600px;\n}\n\n.user-info {\n  display: flex;\n  align-items: center;\n  margin-bottom: 10px;\n}\n\n.user-avatar {\n  width: 40px;\n  height: 40px;\n  border-radius: 50%;\n  background-color: gray;\n  margin-right: 10px;\n}\n\n.username {\n  font-weight: bold;\n  color: #FF9900;\n}\n\n.message-area {\n  background-color: white;\n  color: black;\n  padding: 10px;\n  border-radius: 10px;\n  font-size: 1em;\n  margin-top: 10px;\n}\n\n.message-image {\n  max-width: 50%;\n  border-radius: 10px;\n  margin-top: 10px;\n}\n\n.message-actions {\n  display: flex;\n  justify-content: space-around;\n  margin-top: 10px;\n}\n\n.message-actions button {\n  background: none;\n  border: none;\n  color: #FF9900;\n  cursor: pointer;\n  font-size: 1em;\n}\n\n.message-actions button:hover {\n  color: #E68A00;\n}\n\n.comments-section {\n  margin-top: 10px;\n  padding: 10px;\n  background-color: #2A1E54;\n  border-radius: 10px;\n}\n\n.comment {\n  margin-bottom: 5px;\n  padding: 10px;\n}\n\n.comment .username {\n  font-weight: bold;\n  color: #FF9900;\n}\n.comment-username{\n  color: yellow;\n  margin-top: 5px;\n  background-color: white;\n  border-radius: 8px;\n  padding: 10px;\n}\n\n.comment-text {\n  margin-top: 5px;\n  background-color: white;\n  color: black;\n  border-radius: 8px;\n  padding: 10px;\n}\n.comment-username{\n  color: #FF9900;\n}\n.new-comment-box input,button{\n  padding: 10px;\n}\n.new-comment-box button{\n  padding: 3px;\n  border-radius: 5px;\n}\n.leave-button {\n  background-color: #E74C3C;\n  color: white;\n  padding: 10px 20px;\n  border: none;\n  border-radius: 5px;\n  cursor: pointer;\n  font-size: 1em;\n}\n\n.leave-button:hover {\n  background-color: #C0392B;\n}\n\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}