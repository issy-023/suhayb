{"ast":null,"code":"//import { mapGetters } from 'vuex';\nimport { API_URL } from \"@/config\";\n//import jwtDecode from \"jwt-decode\";\n\nexport default {\n  name: 'CommunityChatComponent',\n  props: ['communityId'],\n  data() {\n    return {\n      chatMessages: [],\n      // Array to store chat messages\n      newMessage: '',\n      // New message content\n      selectedFile: null // Uploaded file\n    };\n  },\n  methods: {\n    async fetchPosts() {\n      try {\n        const response = await fetch(`${API_URL}/api/communities/${this.communityId}/posts`);\n        if (!response.ok) {\n          throw new Error(\"Failed to fetch posts\");\n        }\n        const posts = await response.json();\n\n        // Map response to chatMessages array\n        this.chatMessages = posts.map(post => ({\n          id: post.id,\n          // Post ID\n          text: post.content,\n          // Post content\n          username: post.user?.username || \"Anonymous\",\n          // Extract `username` or default to \"Anonymous\"\n          image: post.image ? `data:image/jpeg;base64,${post.image}` : null,\n          // Convert Base64 image\n          responseTo: post.responseTo || null,\n          // Handle optional response field\n          comments: post.comments || [],\n          // Ensure comments exist\n          showComments: false,\n          // Default: hide comments section\n          newComment: \"\" // Default: empty new comment\n        }));\n        console.log(\"Chat messages loaded:\", this.chatMessages);\n      } catch (error) {\n        console.error(\"Error fetching posts:\", error);\n      }\n    },\n    handleFileChange(event) {\n      const file = event.target.files[0];\n      if (!file.type.startsWith('image/')) {\n        alert('Please upload a valid image file.');\n        return;\n      }\n      const maxSize = 5 * 1024 * 1024; // 5 MB\n      if (file.size > maxSize) {\n        alert('File size exceeds 5MB. Please upload a smaller file.');\n        return;\n      }\n      this.selectedFile = file;\n    },\n    async postMessage() {\n      const formData = new FormData();\n      formData.append('content', this.newMessage);\n      if (this.selectedFile) {\n        formData.append('image', this.selectedFile);\n      }\n      try {\n        const response = await fetch(`${API_URL}/api/communities/${this.communityId}/posts/create`, {\n          method: 'POST',\n          body: formData\n        });\n        if (!response.ok) throw new Error('Failed to send message');\n        this.newMessage = '';\n        this.selectedFile = null;\n        this.fetchPosts(); // Refresh messages after posting\n      } catch (error) {\n        console.error('Error sending message:', error);\n      }\n    },\n    openComments(postId) {\n      const post = this.chatMessages.find(message => message.id === postId);\n      if (post) {\n        post.showComments = !post.showComments; // Toggle comments visibility\n      }\n    }\n  },\n  mounted() {\n    this.fetchPosts();\n  }\n};","map":{"version":3,"names":["API_URL","name","props","data","chatMessages","newMessage","selectedFile","methods","fetchPosts","response","fetch","communityId","ok","Error","posts","json","map","post","id","text","content","username","user","image","responseTo","comments","showComments","newComment","console","log","error","handleFileChange","event","file","target","files","type","startsWith","alert","maxSize","size","postMessage","formData","FormData","append","method","body","openComments","postId","find","message","mounted"],"sources":["/Users/suhayb/Documenten/cuuruuvoovii16/election-frontend/src/components/CommunityChatPage.vue"],"sourcesContent":["<template>\n  <div class=\"community-chat\">\n    <div class=\"chat-header\">\n      <h2>Community Chat App</h2>\n    </div>\n    <div class=\"message-box new-message-box\">\n      <div class=\"user-info\">\n        <span class=\"user-avatar\"></span>\n\n      </div>\n      <textarea v-model=\"newMessage\" placeholder=\"type message here...\"></textarea>\n      <input type=\"file\" @change=\"handleFileChange\" accept=\"image/*\" />\n\n\n      <button class=\"post-button\" @click=\"postMessage\">Post</button>\n    </div>\n\n\n    <div v-for=\"message in chatMessages\" :key=\"message.id\" class=\"message-box\">\n\n        <div class=\"user-info\">\n          <span class=\"user-avatar\"></span>\n\n        </div>\n      <div class=\"user-info\">\n\n        <span class=\"username\">{{ message.username }}</span>\n        <span v-if=\"message.responseTo\" class=\"response-to\">\n      response to @{{ message.responseTo }}\n    </span>\n      </div>\n      <p class=\"message-area\">{{ message.text }}</p>\n\n\n\n\n      <div class=\"message-actions\">\n        <button @click=\"openComments(message.id)\">Comments</button>\n        <button @click=\"respondToMessage(message.id)\">Respond</button>\n        <button @click=\"likeMessage(message.id)\">Like</button>\n        <button @click=\"shareMessage(message.id)\">Share</button>\n      </div>\n\n\n      <div v-if=\"message.showComments\" class=\"comments-section\">\n        <div v-for=\"comment in message.comments\" :key=\"comment.id\" class=\"comment\">\n          <span class=\"username\">@{{ comment.username }}</span>\n          <p>{{ comment.text }}</p>\n        </div>\n        <textarea v-model=\"message.newComment\" placeholder=\"Add a comment\"></textarea>\n        <button @click=\"postComment(message.id)\">Comment</button>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\n//import { mapGetters } from 'vuex';\nimport { API_URL } from \"@/config\";\n//import jwtDecode from \"jwt-decode\";\n\nexport default {\n  name: 'CommunityChatComponent',\n  props: ['communityId'],\n  data() {\n    return {\n      chatMessages: [], // Array to store chat messages\n      newMessage: '', // New message content\n      selectedFile: null, // Uploaded file\n    };\n  },\n  methods: {\n    async fetchPosts() {\n      try {\n        const response = await fetch(`${API_URL}/api/communities/${this.communityId}/posts`);\n        if (!response.ok) {\n          throw new Error(\"Failed to fetch posts\");\n        }\n        const posts = await response.json();\n\n        // Map response to chatMessages array\n        this.chatMessages = posts.map(post => ({\n          id: post.id, // Post ID\n          text: post.content, // Post content\n          username: post.user?.username || \"Anonymous\", // Extract `username` or default to \"Anonymous\"\n          image: post.image ? `data:image/jpeg;base64,${post.image}` : null, // Convert Base64 image\n          responseTo: post.responseTo || null, // Handle optional response field\n          comments: post.comments || [], // Ensure comments exist\n          showComments: false, // Default: hide comments section\n          newComment: \"\", // Default: empty new comment\n        }));\n\n        console.log(\"Chat messages loaded:\", this.chatMessages);\n      } catch (error) {\n        console.error(\"Error fetching posts:\", error);\n      }\n    },\n    handleFileChange(event) {\n      const file = event.target.files[0];\n      if (!file.type.startsWith('image/')) {\n        alert('Please upload a valid image file.');\n        return;\n      }\n      const maxSize = 5 * 1024 * 1024; // 5 MB\n      if (file.size > maxSize) {\n        alert('File size exceeds 5MB. Please upload a smaller file.');\n        return;\n      }\n      this.selectedFile = file;\n    },\n    async postMessage() {\n      const formData = new FormData();\n      formData.append('content', this.newMessage);\n      if (this.selectedFile) {\n        formData.append('image', this.selectedFile);\n      }\n      try {\n        const response = await fetch(`${API_URL}/api/communities/${this.communityId}/posts/create`, {\n          method: 'POST',\n          body: formData,\n        });\n        if (!response.ok) throw new Error('Failed to send message');\n        this.newMessage = '';\n        this.selectedFile = null;\n        this.fetchPosts(); // Refresh messages after posting\n      } catch (error) {\n        console.error('Error sending message:', error);\n      }\n    },\n    openComments(postId) {\n      const post = this.chatMessages.find(message => message.id === postId);\n      if (post) {\n        post.showComments = !post.showComments; // Toggle comments visibility\n      }\n    },\n  },\n  mounted() {\n    this.fetchPosts();\n  },\n\n};\n</script>\n\n\n<style scoped>\n* {\n  font-family: \"Outfit\", sans-serif;\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\nhtml, body {\n  height: 100%;\n  overflow: hidden;\n}\n\n.community-chat {\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n  align-items: center;\n  background-color: #F9F9F9;\n  color: #17003C;\n  width: 100vw;\n  height: 100vh;\n  padding: 1.5rem;\n  overflow: hidden;\n}\n\n.chat-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  width: 100%;\n  max-width: 800px;\n  margin-bottom: 1rem;\n}\n\n.leave-button {\n  background-color: #FF9900;\n  color: white;\n  border: 7px solid #17003C;\n  padding: 0.5rem 1rem;\n  font-size: 1.5rem;\n  cursor: pointer;\n  transition: background-color 0.3s ease, border-color 0.3s ease;\n  border-radius: 100px;\n}\n\n.leave-button:hover {\n  background-color: #17003C;\n  border-color: #FF9900;\n}\n\n.users-online {\n  background-color: #F1F1F1;\n  padding: 1rem;\n  border-radius: 12px;\n  margin-bottom: 1rem;\n  width: 100%;\n  max-width: 800px;\n}\n\n.users-online ul {\n  list-style: none;\n}\n\n.users-online li {\n  display: flex;\n  align-items: center;\n  margin-bottom: 0.5rem;\n  font-weight: 600;\n}\n\n.user-avatar {\n  width: 15px;\n  height: 15px;\n  border-radius: 50%;\n  margin-right: 0.5rem;\n}\n\n.chat-messages {\n  background-color: #F1F1F1;\n  padding: 1rem;\n  border-radius: 12px;\n  flex: 1;\n  width: 100%;\n  max-width: 800px;\n  overflow-y: auto;\n  margin-bottom: 1rem;\n}\n\n.chat-message {\n  display: flex;\n  align-items: center;\n  margin-bottom: 1rem;\n}\n\n.message-avatar {\n  width: 20px;\n  height: 20px;\n  border-radius: 50%;\n  margin-right: 0.75rem;\n}\n\n.message-content {\n  background-color: #E0E0E0;\n  padding: 0.5rem 1rem;\n  border-radius: 12px;\n}\n\n.own-message .message-content {\n  background-color: #D1EAFF;\n}\n\n.message-user {\n  font-weight: bold;\n  display: block;\n  margin-bottom: 0.3rem;\n}\n\n.message-input {\n  display: flex;\n  align-items: center;\n  width: 100%;\n  max-width: 800px;\n  padding-top: 1rem;\n  padding-bottom: 1rem;\n  background-color: #F9F9F9;\n  position: sticky;\n  bottom: 0;\n}\n\n.message-input input {\n  flex: 1;\n  padding: 1rem;\n  border-radius: 50px;\n  border: 1px solid #ccc;\n  margin-right: 1rem;\n  font-size: 1.2rem;\n}\n\n.message-box {\n  background-color: #17003C;\n  color: white;\n  border-radius: 15px;\n  padding: 15px;\n  margin: 10px auto;\n  width: 90%;\n  max-width: 600px;\n}\n\n.new-message-box {\n  background-color: #17003C;\n  padding: 20px;\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n  margin-bottom: 20px;\n}\n\n.user-info {\n  display: flex;\n  align-items: center;\n  margin-bottom: 10px;\n}\n\n.user-avatar {\n  width: 40px;\n  height: 40px;\n  border-radius: 50%;\n  background-color: gray;\n  margin-right: 10px;\n}\n\n.username {\n  font-weight: bold;\n  color: #FF9900;\n}\n\n.response-to {\n  font-size: 0.9em;\n  color: #FF9900;\n  margin-left: 5px;\n}\n\ntextarea {\n  width: 100%;\n  border-radius: 10px;\n  padding: 10px;\n  font-size: 1em;\n  margin: 10px 0;\n  border: none;\n}\n\n.post-button {\n  background-color: #FF9900;\n  color: white;\n  padding: 8px 20px;\n  border: none;\n  border-radius: 5px;\n  cursor: pointer;\n}\n\n.post-button:hover {\n  background-color: #E68A00;\n}\n\n/* Message Actions */\n.message-actions {\n  display: flex;\n  justify-content: space-around;\n  margin-top: 10px;\n}\n\n.message-actions button {\n  background: none;\n  border: none;\n  color: #FF9900;\n  cursor: pointer;\n  font-size: 1em;\n}\n\n.message-actions button:hover {\n  color: #E68A00;\n}\n\n/* Comments Section */\n.comments-section {\n  margin-top: 10px;\n  padding: 10px;\n  background-color: #2A1E54;\n  border-radius: 10px;\n}\n\n.comment {\n  margin-bottom: 5px;\n}\n\n.comment .username {\n  font-weight: bold;\n  color: #FF9900;\n}\n\n.comment textarea {\n  margin-top: 5px;\n}\n.user-avatar img {\n  width: 40px;\n  height: 40px;\n  border-radius: 50%;\n  object-fit: cover;\n}\n.message-area{\n  background-color: white;\n  color: black;\n  padding: 10px;\n  font-size: 1em;\n  margin: 10px 0;\n}\n.message-image {\n  max-width: 100%;\n  border-radius: 10px;\n  margin-top: 10px;\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}