{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { API_URL } from \"@/config\";\nimport jwtDecode from \"jwt-decode\";\nexport default {\n  name: \"CommunityChatComponent\",\n  props: [\"communityId\"],\n  data() {\n    return {\n      chatMessages: [],\n      // Hier komen de posts in\n      newMessage: \"\",\n      // Tekst van nieuwe post\n      selectedFile: null,\n      // Geüploade afbeelding\n      openComments: {},\n      // Bijhouden welke post z'n comments open heeft staan\n      newComments: \"\" // Tekst van nieuwe comment\n    };\n  },\n  methods: {\n    /**\n     * 1) POSTS OPHALEN\n     * Haal de posts op voor deze communityId.\n     * De back-end geeft per post o.a. 'likedByUser' en 'likeCount' terug,\n     * zodat we weten of de huidige user al geliket heeft.\n     */\n    async fetchPosts() {\n      try {\n        const token = localStorage.getItem(\"token\");\n        if (!token) throw new Error(\"No token found.\");\n        const decodedToken = jwtDecode(token);\n        const userId = decodedToken.id;\n\n        // GET /api/communities/{communityId}/posts?userId=...\n        const response = await fetch(`${API_URL}/api/communities/${this.communityId}/posts?userId=${userId}`, {\n          method: \"GET\",\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n        if (!response.ok) throw new Error(\"Failed to fetch posts\");\n        const posts = await response.json();\n\n        // Sla de posts op in chatMessages, met 'isLiked' als boolean\n        this.chatMessages = posts.map(post => ({\n          id: post.id,\n          text: post.content,\n          username: post.user?.username || \"Anonymous\",\n          // Image in base64\n          image: post.image ? `data:image/jpeg;base64,${post.image}` : null,\n          likeCount: post.likeCount,\n          isLiked: post.likedByUser,\n          // Belangrijk: true als user 'm al geliket heeft\n          comments: post.comments || []\n        }));\n      } catch (error) {\n        console.error(\"Error fetching posts:\", error);\n      }\n    },\n    /**\n     * 2) LIKE OF UNLIKE\n     * Als post.isLiked = true, dan 'unlike', anders 'like'.\n     */\n    async toggleLike(messageId) {\n      const token = localStorage.getItem(\"token\");\n      if (!token) return alert(\"User not authenticated. Please log in.\");\n      const decodedToken = jwtDecode(token);\n      const userId = decodedToken.id;\n\n      // Post vinden\n      const post = this.chatMessages.find(msg => msg.id === messageId);\n      if (!post) return;\n\n      // Bepaal of we POST (like) of DELETE (unlike) moeten doen\n      const method = post.isLiked ? \"DELETE\" : \"POST\";\n      const endpoint = `${API_URL}/api/communities/${this.communityId}/posts/${messageId}/like?userId=${userId}`;\n      try {\n        const response = await fetch(endpoint, {\n          method,\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n        if (!response.ok) {\n          const errorText = await response.text();\n          console.error(\"Error toggling like:\", errorText);\n          return;\n        }\n\n        // Optimistic update: direct in de UI de status veranderen\n        if (post.isLiked) {\n          // Was al geliket → unlike\n          post.isLiked = false;\n          post.likeCount--;\n        } else {\n          // Nog niet geliket → like\n          post.isLiked = true;\n          post.likeCount++;\n        }\n      } catch (error) {\n        console.error(\"Error toggling like:\", error);\n      }\n    },\n    /**\n     * 3) COMMENT TOEVOEGEN\n     * Plaats een nieuwe comment op een postId.\n     */\n    async addComment(messageId) {\n      const token = localStorage.getItem(\"token\");\n      if (!token) return alert(\"User not authenticated. Please log in.\");\n      try {\n        const decodedToken = jwtDecode(token);\n\n        // POST /api/comments/{postId}/saveComments\n        const response = await fetch(`${API_URL}/api/comments/${messageId}/saveComments`, {\n          method: \"POST\",\n          headers: {\n            Authorization: `Bearer ${token}`,\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify({\n            content: this.newComments,\n            userId: decodedToken.id\n          })\n        });\n        if (!response.ok) throw new Error(\"Failed to add comment\");\n        // Commentveld legen\n        this.newComments = \"\";\n\n        // Comments herophalen\n        await this.fetchComments(messageId);\n      } catch (error) {\n        console.error(\"Error adding comment:\", error);\n      }\n    },\n    /**\n     * 4) COMMENTS OPHALEN\n     * Haal de comments op voor een specifieke postId.\n     */\n    async fetchComments(postId) {\n      const token = localStorage.getItem(\"token\");\n      if (!token) return;\n      try {\n        // GET /api/comments/{postId}/getComments\n        const response = await fetch(`${API_URL}/api/comments/${postId}/getComments`, {\n          method: \"GET\",\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n        if (!response.ok) throw new Error(\"Failed to fetch comments\");\n        const comments = await response.json();\n\n        // Post in onze chatMessages updaten\n        const postIndex = this.chatMessages.findIndex(msg => msg.id === postId);\n        if (postIndex !== -1) {\n          this.chatMessages[postIndex].comments = comments;\n        }\n      } catch (error) {\n        console.error(\"Error fetching comments:\", error);\n      }\n    },\n    /**\n     * 5) NIEUWE POST PLAATSEN\n     * Met optioneel bestand (image).\n     */\n    async postMessage() {\n      const token = localStorage.getItem(\"token\");\n      if (!token) return alert(\"User not authenticated. Please log in.\");\n      try {\n        const decodedToken = jwtDecode(token);\n\n        // Bouw de FormData\n        const formData = new FormData();\n        formData.append(\"content\", this.newMessage);\n        formData.append(\"userid\", decodedToken.id);\n        if (this.selectedFile) formData.append(\"image\", this.selectedFile);\n\n        // POST /api/communities/{communityId}/posts/create\n        const response = await fetch(`${API_URL}/api/communities/${this.communityId}/posts/create`, {\n          method: \"POST\",\n          headers: {\n            Authorization: `Bearer ${token}`\n          },\n          body: formData\n        });\n        if (!response.ok) throw new Error(\"Failed to post message\");\n\n        // Reset text en file\n        this.newMessage = \"\";\n        this.selectedFile = null;\n\n        // Refresh de postlijst\n        this.fetchPosts();\n      } catch (error) {\n        console.error(\"Error posting message:\", error);\n      }\n    },\n    /**\n     * 6) BESTAND UPLOADEN\n     * Check of het een image is en max 5MB.\n     */\n    handleFileChange(event) {\n      const file = event.target.files[0];\n      if (!file.type.startsWith(\"image/\")) {\n        return alert(\"Please upload a valid image file.\");\n      }\n      if (file.size > 5 * 1024 * 1024) {\n        return alert(\"File size exceeds 5MB. Please upload a smaller file.\");\n      }\n      this.selectedFile = file;\n    },\n    /**\n     * 7) COMMENTS IN-/UITKLAPPEN\n     * openComments[postId] = true/false\n     */\n    toggleComments(messageId) {\n      this.openComments[messageId] = !this.openComments[messageId];\n      // Alleen als we ze net openklikken, comments ophalen\n      if (this.openComments[messageId]) {\n        this.fetchComments(messageId);\n      }\n    },\n    isCommentsOpen(messageId) {\n      return !!this.openComments[messageId];\n    },\n    /**\n     * 8) BERICHT DELEN\n     * Voorbeeldfunctionaliteit: toont simpelweg een alert.\n     */\n    shareMessage(messageId) {\n      alert(`Sharing post with ID: ${messageId} (add your logic here)`);\n    },\n    /**\n     * 9) COMMUNITY VERLATEN\n     * Stuur een DELETE-request naar /api/communities/{communityId}/leave?userId=...\n     */\n    async leaveCommunity() {\n      const token = localStorage.getItem(\"token\");\n      if (!token) return alert(\"User not authenticated. Please log in.\");\n      try {\n        const decodedToken = jwtDecode(token);\n        const userId = decodedToken.id;\n\n        // DELETE /api/communities/{communityId}/leave?userId=...\n        const response = await fetch(`${API_URL}/api/communities/${this.communityId}/leave?userId=${userId}`, {\n          method: \"DELETE\",\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n        if (!response.ok) throw new Error(\"Failed to leave community\");\n        alert(\"You have left the community.\");\n        // Navigeer terug naar een communities-overzicht, of wat je wilt\n        this.$router.push({\n          name: \"Communities\"\n        });\n      } catch (error) {\n        console.error(\"Error leaving community:\", error);\n      }\n    }\n  },\n  /**\n   * Bij het laden van de pagina (component), meteen fetchPosts aanroepen.\n   */\n  mounted() {\n    this.fetchPosts();\n  }\n};","map":{"version":3,"names":["API_URL","jwtDecode","name","props","data","chatMessages","newMessage","selectedFile","openComments","newComments","methods","fetchPosts","token","localStorage","getItem","Error","decodedToken","userId","id","response","fetch","communityId","method","headers","Authorization","ok","posts","json","map","post","text","content","username","user","image","likeCount","isLiked","likedByUser","comments","error","console","toggleLike","messageId","alert","find","msg","endpoint","errorText","addComment","body","JSON","stringify","fetchComments","postId","postIndex","findIndex","postMessage","formData","FormData","append","handleFileChange","event","file","target","files","type","startsWith","size","toggleComments","isCommentsOpen","shareMessage","leaveCommunity","$router","push","mounted"],"sources":["/Users/suhayb/MijnProjecten/cuuruuvoovii16/election-frontend/src/components/CommunityChatPage.vue"],"sourcesContent":["<template>\n  <div class=\"community-chat\">\n    <!-- HEADER -->\n    <div class=\"chat-header\">\n      <h2>Community Chat App</h2>\n      <button class=\"leave-button\" @click=\"leaveCommunity\">Leave</button>\n    </div>\n\n    <!-- POST BERICHT -->\n    <div class=\"new-message-box\">\n      <textarea v-model=\"newMessage\" placeholder=\"Type message here...\"></textarea>\n      <input type=\"file\" @change=\"handleFileChange\" accept=\"image/*\" />\n      <button class=\"post-button\" @click=\"postMessage\">Post</button>\n    </div>\n\n    <!-- OVERZICHT VAN POSTS -->\n    <div class=\"posts-container\">\n      <div v-for=\"message in chatMessages\" :key=\"message.id\" class=\"message-box\">\n        <div class=\"user-info\">\n          <span class=\"user-avatar\"></span>\n          <span class=\"username\">{{ message.username }}</span>\n        </div>\n\n        <!-- Als er een image is, toon 'm -->\n        <img\n            v-if=\"message.image\"\n            :src=\"message.image\"\n            alt=\"Post Image\"\n            class=\"message-image\"\n        />\n        <p class=\"message-area\">{{ message.text }}</p>\n\n        <!-- ACTIE KNOPPEN: Like/Unlike, Share, Comments etc. -->\n        <div class=\"message-actions\">\n          <button @click=\"toggleLike(message.id)\">\n            {{ message.isLiked ? \"Unlike\" : \"Like\" }}\n          </button>\n          <span>{{ message.likeCount }} Likes</span>\n          <button @click=\"shareMessage(message.id)\">Share</button>\n          <button @click=\"toggleComments(message.id)\">\n            {{ isCommentsOpen(message.id) ? \"Hide\" : \"Show\" }} Comments\n          </button>\n        </div>\n\n        <!-- COMMENT-SECTIE IN-/UITKLAPBAAR -->\n        <div v-if=\"isCommentsOpen(message.id)\" class=\"comments-section\">\n          <div v-for=\"comment in message.comments\" :key=\"comment.id\" class=\"comment\">\n            <span class=\"comment-username\">{{ comment.user?.username }}</span>\n            <p class=\"comment-text\">{{ comment.content }}</p>\n          </div>\n          <div class=\"new-comment-box\">\n            <textarea v-model=\"newComments\" placeholder=\"Add a comment...\" />\n            <button @click=\"addComment(message.id)\">Comment</button>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { API_URL } from \"@/config\";\nimport jwtDecode from \"jwt-decode\";\n\nexport default {\n  name: \"CommunityChatComponent\",\n  props: [\"communityId\"],\n\n  data() {\n    return {\n      chatMessages: [],   // Hier komen de posts in\n      newMessage: \"\",     // Tekst van nieuwe post\n      selectedFile: null, // Geüploade afbeelding\n      openComments: {},   // Bijhouden welke post z'n comments open heeft staan\n      newComments: \"\",    // Tekst van nieuwe comment\n    };\n  },\n\n  methods: {\n    /**\n     * 1) POSTS OPHALEN\n     * Haal de posts op voor deze communityId.\n     * De back-end geeft per post o.a. 'likedByUser' en 'likeCount' terug,\n     * zodat we weten of de huidige user al geliket heeft.\n     */\n    async fetchPosts() {\n      try {\n        const token = localStorage.getItem(\"token\");\n        if (!token) throw new Error(\"No token found.\");\n\n        const decodedToken = jwtDecode(token);\n        const userId = decodedToken.id;\n\n        // GET /api/communities/{communityId}/posts?userId=...\n        const response = await fetch(\n            `${API_URL}/api/communities/${this.communityId}/posts?userId=${userId}`,\n            {\n              method: \"GET\",\n              headers: { Authorization: `Bearer ${token}` },\n            }\n        );\n\n        if (!response.ok) throw new Error(\"Failed to fetch posts\");\n        const posts = await response.json();\n\n        // Sla de posts op in chatMessages, met 'isLiked' als boolean\n        this.chatMessages = posts.map((post) => ({\n          id: post.id,\n          text: post.content,\n          username: post.user?.username || \"Anonymous\",\n          // Image in base64\n          image: post.image ? `data:image/jpeg;base64,${post.image}` : null,\n          likeCount: post.likeCount,\n          isLiked: post.likedByUser, // Belangrijk: true als user 'm al geliket heeft\n          comments: post.comments || [],\n        }));\n      } catch (error) {\n        console.error(\"Error fetching posts:\", error);\n      }\n    },\n\n    /**\n     * 2) LIKE OF UNLIKE\n     * Als post.isLiked = true, dan 'unlike', anders 'like'.\n     */\n    async toggleLike(messageId) {\n      const token = localStorage.getItem(\"token\");\n      if (!token) return alert(\"User not authenticated. Please log in.\");\n\n      const decodedToken = jwtDecode(token);\n      const userId = decodedToken.id;\n\n      // Post vinden\n      const post = this.chatMessages.find((msg) => msg.id === messageId);\n      if (!post) return;\n\n      // Bepaal of we POST (like) of DELETE (unlike) moeten doen\n      const method = post.isLiked ? \"DELETE\" : \"POST\";\n      const endpoint = `${API_URL}/api/communities/${this.communityId}/posts/${messageId}/like?userId=${userId}`;\n\n      try {\n        const response = await fetch(endpoint, {\n          method,\n          headers: {\n            Authorization: `Bearer ${token}`,\n          },\n        });\n        if (!response.ok) {\n          const errorText = await response.text();\n          console.error(\"Error toggling like:\", errorText);\n          return;\n        }\n\n        // Optimistic update: direct in de UI de status veranderen\n        if (post.isLiked) {\n          // Was al geliket → unlike\n          post.isLiked = false;\n          post.likeCount--;\n        } else {\n          // Nog niet geliket → like\n          post.isLiked = true;\n          post.likeCount++;\n        }\n      } catch (error) {\n        console.error(\"Error toggling like:\", error);\n      }\n    },\n\n    /**\n     * 3) COMMENT TOEVOEGEN\n     * Plaats een nieuwe comment op een postId.\n     */\n    async addComment(messageId) {\n      const token = localStorage.getItem(\"token\");\n      if (!token) return alert(\"User not authenticated. Please log in.\");\n\n      try {\n        const decodedToken = jwtDecode(token);\n\n        // POST /api/comments/{postId}/saveComments\n        const response = await fetch(\n            `${API_URL}/api/comments/${messageId}/saveComments`,\n            {\n              method: \"POST\",\n              headers: {\n                Authorization: `Bearer ${token}`,\n                \"Content-Type\": \"application/json\",\n              },\n              body: JSON.stringify({\n                content: this.newComments,\n                userId: decodedToken.id,\n              }),\n            }\n        );\n\n        if (!response.ok) throw new Error(\"Failed to add comment\");\n        // Commentveld legen\n        this.newComments = \"\";\n\n        // Comments herophalen\n        await this.fetchComments(messageId);\n      } catch (error) {\n        console.error(\"Error adding comment:\", error);\n      }\n    },\n\n    /**\n     * 4) COMMENTS OPHALEN\n     * Haal de comments op voor een specifieke postId.\n     */\n    async fetchComments(postId) {\n      const token = localStorage.getItem(\"token\");\n      if (!token) return;\n\n      try {\n        // GET /api/comments/{postId}/getComments\n        const response = await fetch(\n            `${API_URL}/api/comments/${postId}/getComments`,\n            {\n              method: \"GET\",\n              headers: { Authorization: `Bearer ${token}` },\n            }\n        );\n        if (!response.ok) throw new Error(\"Failed to fetch comments\");\n\n        const comments = await response.json();\n\n        // Post in onze chatMessages updaten\n        const postIndex = this.chatMessages.findIndex((msg) => msg.id === postId);\n        if (postIndex !== -1) {\n          this.chatMessages[postIndex].comments = comments;\n        }\n      } catch (error) {\n        console.error(\"Error fetching comments:\", error);\n      }\n    },\n\n    /**\n     * 5) NIEUWE POST PLAATSEN\n     * Met optioneel bestand (image).\n     */\n    async postMessage() {\n      const token = localStorage.getItem(\"token\");\n      if (!token) return alert(\"User not authenticated. Please log in.\");\n\n      try {\n        const decodedToken = jwtDecode(token);\n\n        // Bouw de FormData\n        const formData = new FormData();\n        formData.append(\"content\", this.newMessage);\n        formData.append(\"userid\", decodedToken.id);\n        if (this.selectedFile) formData.append(\"image\", this.selectedFile);\n\n        // POST /api/communities/{communityId}/posts/create\n        const response = await fetch(\n            `${API_URL}/api/communities/${this.communityId}/posts/create`,\n            {\n              method: \"POST\",\n              headers: { Authorization: `Bearer ${token}` },\n              body: formData,\n            }\n        );\n\n        if (!response.ok) throw new Error(\"Failed to post message\");\n\n        // Reset text en file\n        this.newMessage = \"\";\n        this.selectedFile = null;\n\n        // Refresh de postlijst\n        this.fetchPosts();\n      } catch (error) {\n        console.error(\"Error posting message:\", error);\n      }\n    },\n\n    /**\n     * 6) BESTAND UPLOADEN\n     * Check of het een image is en max 5MB.\n     */\n    handleFileChange(event) {\n      const file = event.target.files[0];\n      if (!file.type.startsWith(\"image/\")) {\n        return alert(\"Please upload a valid image file.\");\n      }\n      if (file.size > 5 * 1024 * 1024) {\n        return alert(\"File size exceeds 5MB. Please upload a smaller file.\");\n      }\n      this.selectedFile = file;\n    },\n\n    /**\n     * 7) COMMENTS IN-/UITKLAPPEN\n     * openComments[postId] = true/false\n     */\n    toggleComments(messageId) {\n      this.openComments[messageId] = !this.openComments[messageId];\n      // Alleen als we ze net openklikken, comments ophalen\n      if (this.openComments[messageId]) {\n        this.fetchComments(messageId);\n      }\n    },\n    isCommentsOpen(messageId) {\n      return !!this.openComments[messageId];\n    },\n\n    /**\n     * 8) BERICHT DELEN\n     * Voorbeeldfunctionaliteit: toont simpelweg een alert.\n     */\n    shareMessage(messageId) {\n      alert(`Sharing post with ID: ${messageId} (add your logic here)`);\n    },\n\n    /**\n     * 9) COMMUNITY VERLATEN\n     * Stuur een DELETE-request naar /api/communities/{communityId}/leave?userId=...\n     */\n    async leaveCommunity() {\n      const token = localStorage.getItem(\"token\");\n      if (!token) return alert(\"User not authenticated. Please log in.\");\n\n      try {\n        const decodedToken = jwtDecode(token);\n        const userId = decodedToken.id;\n\n        // DELETE /api/communities/{communityId}/leave?userId=...\n        const response = await fetch(\n            `${API_URL}/api/communities/${this.communityId}/leave?userId=${userId}`,\n            {\n              method: \"DELETE\",\n              headers: { Authorization: `Bearer ${token}` },\n            }\n        );\n\n        if (!response.ok) throw new Error(\"Failed to leave community\");\n\n        alert(\"You have left the community.\");\n        // Navigeer terug naar een communities-overzicht, of wat je wilt\n        this.$router.push({ name: \"Communities\" });\n      } catch (error) {\n        console.error(\"Error leaving community:\", error);\n      }\n    },\n  },\n\n  /**\n   * Bij het laden van de pagina (component), meteen fetchPosts aanroepen.\n   */\n  mounted() {\n    this.fetchPosts();\n  },\n};\n</script>\n\n\n\n\n\n\n<style>\n* {\n  font-family: \"Outfit\", sans-serif;\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\nhtml, body {\n  height: 100%;\n\n}\n\n.community-chat {\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n  align-items: center;\n  background-color: #F9F9F9;\n  color: #17003C;\n  width: 100vw;\n  height: 100vh;\n  padding: 1.5rem;\n  overflow: hidden;\n}\n\n.chat-header {\n  flex-shrink: 0;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  width: 100%;\n  max-width: 800px;\n  margin-bottom: 1rem;\n}\n\n.new-message-box {\n  flex-shrink: 0;\n  background-color: #17003C;\n  padding: 20px;\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n  margin-bottom: 20px;\n  width: 100%;\n  max-width: 800px;\n  border-radius: 10px;\n}\n\ntextarea {\n  width: 100%;\n  border-radius: 10px;\n  padding: 10px;\n  font-size: 1em;\n  margin: 10px 0;\n  border: none;\n  background-color: white;\n  color: black;\n}\n\n.post-button {\n  background-color: #FF9900;\n  color: white;\n  padding: 8px 20px;\n  border: none;\n  border-radius: 5px;\n  cursor: pointer;\n}\n\n.post-button:hover {\n  background-color: #E68A00;\n}\n\n.posts-container {\n  flex-grow: 1;\n  width: 100%;\n  max-width: 800px;\n  overflow-y: auto;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 10px;\n  padding: 10px 0;\n}\n\n.message-box {\n  background-color: #17003C;\n  color: white;\n  border-radius: 15px;\n  padding: 15px;\n  margin-bottom: 10px;\n  width: 90%;\n  max-width: 600px;\n}\n\n.user-info {\n  display: flex;\n  align-items: center;\n  margin-bottom: 10px;\n}\n\n.user-avatar {\n  width: 40px;\n  height: 40px;\n  border-radius: 50%;\n  background-color: gray;\n  margin-right: 10px;\n}\n\n.username {\n  font-weight: bold;\n  color: #FF9900;\n}\n\n.message-area {\n  background-color: white;\n  color: black;\n  padding: 10px;\n  border-radius: 10px;\n  font-size: 1em;\n  margin-top: 10px;\n}\n\n.message-image {\n  max-width: 50%;\n  border-radius: 10px;\n  margin-top: 10px;\n}\n\n.message-actions {\n  display: flex;\n  justify-content: space-around;\n  margin-top: 10px;\n}\n\n.message-actions button {\n  background: none;\n  border: none;\n  color: #FF9900;\n  cursor: pointer;\n  font-size: 1em;\n}\n\n.message-actions button:hover {\n  color: #E68A00;\n}\n\n.comments-section {\n  margin-top: 10px;\n  padding: 10px;\n  background-color: #2A1E54;\n  border-radius: 10px;\n}\n\n.comment {\n  margin-bottom: 5px;\n  padding: 10px;\n}\n\n.comment .username {\n  font-weight: bold;\n  color: #FF9900;\n}\n.comment-username{\n  color: yellow;\n  margin-top: 5px;\n  background-color: white;\n  border-radius: 8px;\n  padding: 10px;\n}\n\n.comment-text {\n  margin-top: 5px;\n  background-color: white;\n  color: black;\n  border-radius: 8px;\n  padding: 10px;\n}\n.comment-username{\n  color: #FF9900;\n}\n.new-comment-box input,button{\n  padding: 10px;\n}\n.new-comment-box button{\n  padding: 3px;\n  border-radius: 5px;\n}\n.leave-button {\n  background-color: #E74C3C;\n  color: white;\n  padding: 10px 20px;\n  border: none;\n  border-radius: 5px;\n  cursor: pointer;\n  font-size: 1em;\n}\n\n.leave-button:hover {\n  background-color: #C0392B;\n}\n\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}