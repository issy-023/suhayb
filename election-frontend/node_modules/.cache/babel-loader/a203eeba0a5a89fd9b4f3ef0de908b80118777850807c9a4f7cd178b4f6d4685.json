{"ast":null,"code":"import { Chart } from \"chart.js\";\nexport default {\n  name: \"VotesPerPartyPage\",\n  data() {\n    return {\n      parties: [],\n      largestParty: {\n        name: '',\n        totalVotes: 0,\n        seats: 0\n      },\n      secondLargestParty: {\n        name: '',\n        totalVotes: 0,\n        seats: 0\n      },\n      thirdLargestParty: {\n        name: '',\n        totalVotes: 0,\n        seats: 0\n      },\n      sortOrder: \"asc\",\n      sortType: \"votes\",\n      showChart: false,\n      barChart: null,\n      doughnutChart: null\n    };\n  },\n  mounted() {\n    this.fetchVotesPerParty();\n  },\n  methods: {\n    async fetchVotesPerParty() {\n      try {\n        const response = await fetch(\"http://localhost:8084/api/election-results/votes-per-party\");\n        if (!response.ok) {\n          throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        const data = await response.json();\n        const totalVotes = data.reduce((sum, party) => sum + party.totalVotes, 0);\n        const totalSeats = 150;\n        const kiesdeler = Math.floor(totalVotes / totalSeats);\n        this.parties = data.map(party => {\n          const seats = Math.floor(party.totalVotes / kiesdeler);\n          const remainingVotes = seats * kiesdeler + kiesdeler - party.totalVotes;\n          return {\n            name: party.name,\n            totalVotes: party.totalVotes,\n            seats,\n            remainingVotes: remainingVotes > 0 ? remainingVotes : 0\n          };\n        });\n        this.updateTopThreeParties();\n        if (this.showChart) {\n          this.$nextTick(() => {\n            this.renderCharts();\n          });\n        }\n      } catch (error) {\n        console.error(\"Error fetching votes per party:\", error);\n      }\n    },\n    updateTopThreeParties() {\n      const sortedParties = [...this.parties].sort((a, b) => b.totalVotes - a.totalVotes);\n      this.largestParty = sortedParties[0] || {\n        name: '',\n        totalVotes: 0,\n        seats: 0\n      };\n      this.secondLargestParty = sortedParties[1] || {\n        name: '',\n        totalVotes: 0,\n        seats: 0\n      };\n      this.thirdLargestParty = sortedParties[2] || {\n        name: '',\n        totalVotes: 0,\n        seats: 0\n      };\n    },\n    getPartyLogo(partyName) {\n      const nameMapping = {\n        \"VVD\": \"VVD\",\n        \"D66\": \"D66\",\n        \"GROENLINKS / Partij van de Arbeid (PvdA)\": \"GLPvdA\",\n        \"PVV (Partij voor de Vrijheid)\": \"PVV\",\n        \"CDA\": \"CDA\",\n        \"SP (Socialistische Partij)\": \"SP\",\n        \"Forum voor Democratie\": \"FVD\",\n        \"Partij voor de Dieren\": \"PvdD\",\n        \"ChristenUnie\": \"CU\",\n        \"Volt\": \"VOLT\",\n        \"JA21\": \"JA21\",\n        \"Staatkundig Gereformeerde Partij (SGP)\": \"SGP\",\n        \"DENK\": \"DENK\",\n        \"50PLUS\": \"50Plus\",\n        \"BBB\": \"BBB\",\n        \"BVNL / Groep Van Haga\": \"OPNL\",\n        \"Nieuw Sociaal Contract\": \"NSC\"\n      };\n      const normalizedName = nameMapping[partyName] || partyName;\n      const logos = {\n        \"50Plus\": require(\"@/assets/party/50plus.png\"),\n        \"BBB\": require(\"@/assets/party/bbb.png\"),\n        \"CDA\": require(\"@/assets/party/cda.png\"),\n        \"CU\": require(\"@/assets/party/cu.png\"),\n        \"D66\": require(\"@/assets/party/d66.png\"),\n        \"DENK\": require(\"@/assets/party/denk.png\"),\n        \"FVD\": require(\"@/assets/party/fvd.png\"),\n        \"GLPvdA\": require(\"@/assets/party/glpvda.png\"),\n        \"GroenLinks\": require(\"@/assets/party/groenLinks.png\"),\n        \"JA21\": require(\"@/assets/party/ja21.png\"),\n        \"NSC\": require(\"@/assets/party/nscDark.png\"),\n        \"OPNL\": require(\"@/assets/party/opnl.png\"),\n        \"PvdA\": require(\"@/assets/party/pvda.png\"),\n        \"PvdD\": require(\"@/assets/party/pvdd.png\"),\n        \"PVV\": require(\"@/assets/party/pvv.png\"),\n        \"SGP\": require(\"@/assets/party/sgp.png\"),\n        \"SP\": require(\"@/assets/party/sp.png\"),\n        \"VOLT\": require(\"@/assets/party/volt.png\"),\n        \"VVD\": require(\"@/assets/party/vvd.png\")\n      };\n      return logos[normalizedName] || null;\n    },\n    toggleView() {\n      this.showChart = !this.showChart;\n      if (this.showChart) {\n        this.$nextTick(() => {\n          this.renderCharts();\n        });\n      }\n    },\n    renderCharts() {\n      this.renderBarChart();\n      this.renderDoughnutChart();\n    },\n    renderBarChart() {\n      const sortedParties = [...this.parties].sort((a, b) => b.totalVotes - a.totalVotes);\n      const colors = sortedParties.map(() => `hsl(${Math.floor(Math.random() * 360)}, 70%, 50%)`);\n      const ctx = document.getElementById(\"votesBarChart\")?.getContext(\"2d\");\n      if (!ctx) {\n        console.error(\"Canvas context not found!\");\n        return;\n      }\n      if (this.barChart) this.barChart.destroy();\n      this.barChart = new Chart(ctx, {\n        type: \"bar\",\n        data: {\n          labels: sortedParties.map(party => party.name),\n          datasets: [{\n            label: \"Votes\",\n            data: sortedParties.map(party => party.totalVotes),\n            backgroundColor: colors\n          }]\n        },\n        options: {\n          responsive: true,\n          plugins: {\n            legend: {\n              display: false\n            },\n            tooltip: {\n              callbacks: {\n                label: context => `${context.raw.toLocaleString()} votes`\n              }\n            }\n          },\n          scales: {\n            y: {\n              beginAtZero: true\n            }\n          }\n        }\n      });\n    },\n    renderDoughnutChart() {\n      const sortedParties = [...this.parties].sort((a, b) => b.totalVotes - a.totalVotes);\n      const colors = sortedParties.map(() => `hsl(${Math.floor(Math.random() * 360)}, 70%, 50%)`);\n      const ctx = document.getElementById(\"votesDoughnutChart\")?.getContext(\"2d\");\n      if (!ctx) {\n        console.error(\"Canvas context not found!\");\n        return;\n      }\n      if (this.doughnutChart) this.doughnutChart.destroy();\n      this.doughnutChart = new Chart(ctx, {\n        type: \"doughnut\",\n        data: {\n          labels: sortedParties.map(party => party.name),\n          datasets: [{\n            data: sortedParties.map(party => party.totalVotes),\n            backgroundColor: colors\n          }]\n        },\n        options: {\n          responsive: true,\n          plugins: {\n            legend: {\n              position: \"right\"\n            },\n            tooltip: {\n              callbacks: {\n                label: context => {\n                  const total = context.dataset.data.reduce((sum, value) => sum + value, 0);\n                  const percentage = (context.raw / total * 100).toFixed(2);\n                  return `${context.label}: ${context.raw.toLocaleString()} votes (${percentage}%)`;\n                }\n              }\n            }\n          }\n        }\n      });\n    },\n    toggleSortOrder(type) {\n      if (this.sortType === type) {\n        this.sortOrder = this.sortOrder === \"asc\" ? \"desc\" : \"asc\";\n      } else {\n        this.sortType = type;\n        this.sortOrder = \"asc\";\n      }\n      this.sortParties();\n    },\n    sortParties() {\n      if (this.sortType === \"votes\") {\n        this.parties.sort((a, b) => this.sortOrder === \"asc\" ? a.totalVotes - b.totalVotes : b.totalVotes - a.totalVotes);\n      } else if (this.sortType === \"alphabet\") {\n        this.parties.sort((a, b) => this.sortOrder === \"asc\" ? a.name.localeCompare(b.name) : b.name.localeCompare(a.name));\n      }\n    },\n    formatVotes(votes) {\n      return votes.toLocaleString();\n    }\n  }\n};","map":{"version":3,"names":["Chart","name","data","parties","largestParty","totalVotes","seats","secondLargestParty","thirdLargestParty","sortOrder","sortType","showChart","barChart","doughnutChart","mounted","fetchVotesPerParty","methods","response","fetch","ok","Error","status","json","reduce","sum","party","totalSeats","kiesdeler","Math","floor","map","remainingVotes","updateTopThreeParties","$nextTick","renderCharts","error","console","sortedParties","sort","a","b","getPartyLogo","partyName","nameMapping","normalizedName","logos","require","toggleView","renderBarChart","renderDoughnutChart","colors","random","ctx","document","getElementById","getContext","destroy","type","labels","datasets","label","backgroundColor","options","responsive","plugins","legend","display","tooltip","callbacks","context","raw","toLocaleString","scales","y","beginAtZero","position","total","dataset","value","percentage","toFixed","toggleSortOrder","sortParties","localeCompare","formatVotes","votes"],"sources":["/Users/suhayb/MijnProjecten/cuuruuvoovii16/election-frontend/src/components/VotesPerPartyPage.vue"],"sourcesContent":["<template>\n  <div class=\"votes-per-party\">\n    <h1>Votes Per Party</h1>\n\n    <!-- Podium alleen in tabelweergave -->\n    <div v-if=\"!showChart\" class=\"podium\">\n      <div class=\"second-place\">\n        <img v-if=\"getPartyLogo(secondLargestParty.name)\" :src=\"getPartyLogo(secondLargestParty.name)\" alt=\"2nd Place Logo\" class=\"party-logo\" />\n        <h3>2nd Place</h3>\n        <h2>{{ secondLargestParty.name }}</h2>\n        <p>Votes: {{ formatVotes(secondLargestParty.totalVotes) }}</p>\n        <p>Seats: {{ secondLargestParty.seats }}</p>\n      </div>\n      <div class=\"first-place\">\n        <img v-if=\"getPartyLogo(largestParty.name)\" :src=\"getPartyLogo(largestParty.name)\" alt=\"1st Place Logo\" class=\"party-logo\" />\n        <h3>1st Place</h3>\n        <h2>{{ largestParty.name }}</h2>\n        <p>Votes: {{ formatVotes(largestParty.totalVotes) }}</p>\n        <p>Seats: {{ largestParty.seats }}</p>\n        <p class=\"lead-info\">Lead: {{ formatVotes(largestParty.totalVotes - secondLargestParty.totalVotes) }} votes</p>\n      </div>\n      <div class=\"third-place\">\n        <img v-if=\"getPartyLogo(thirdLargestParty.name)\" :src=\"getPartyLogo(thirdLargestParty.name)\" alt=\"3rd Place Logo\" class=\"party-logo\" />\n        <h3>3rd Place</h3>\n        <h2>{{ thirdLargestParty.name }}</h2>\n        <p>Votes: {{ formatVotes(thirdLargestParty.totalVotes) }}</p>\n        <p>Seats: {{ thirdLargestParty.seats }}</p>\n      </div>\n    </div>\n\n    <div class=\"toggle-buttons\">\n      <button @click=\"toggleView\">\n        {{ showChart ? \"Back to Table\" : \"More\" }}\n      </button>\n    </div>\n\n    <!-- Tabelweergave -->\n    <div v-if=\"!showChart\">\n      <div class=\"filter-buttons\">\n        <button @click=\"toggleSortOrder('votes')\">\n          Sort by Votes ({{ sortOrder === 'asc' && sortType === 'votes' ? 'Low to High' : 'High to Low' }})\n        </button>\n        <button @click=\"toggleSortOrder('alphabet')\">\n          Sort Alphabetically ({{ sortOrder === 'asc' && sortType === 'alphabet' ? 'A-Z' : 'Z-A' }})\n        </button>\n      </div>\n      <table>\n        <thead>\n        <tr>\n          <th>Logo</th>\n          <th>Party Name</th>\n          <th>Total Votes</th>\n          <th>Seats</th>\n          <th>Votes Needed for a Seat</th>\n        </tr>\n        </thead>\n        <tbody>\n        <tr v-for=\"party in parties\" :key=\"party.name\">\n          <td>\n            <img v-if=\"getPartyLogo(party.name)\" :src=\"getPartyLogo(party.name)\" alt=\"Party Logo\" class=\"party-logo\" />\n          </td>\n          <td>{{ party.name }}</td>\n          <td>{{ formatVotes(party.totalVotes) }}</td>\n          <td>{{ party.seats }}</td>\n          <td v-if=\"party.remainingVotes > 0\">{{ formatVotes(party.remainingVotes) }}</td>\n          <td v-else>-</td>\n        </tr>\n        </tbody>\n      </table>\n    </div>\n\n    <!-- Grafiekweergave -->\n    <div v-if=\"showChart\">\n      <canvas id=\"votesBarChart\"></canvas>\n      <canvas id=\"votesDoughnutChart\"></canvas>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { Chart } from \"chart.js\";\n\nexport default {\n  name: \"VotesPerPartyPage\",\n  data() {\n    return {\n      parties: [],\n      largestParty: { name: '', totalVotes: 0, seats: 0 },\n      secondLargestParty: { name: '', totalVotes: 0, seats: 0 },\n      thirdLargestParty: { name: '', totalVotes: 0, seats: 0 },\n      sortOrder: \"asc\",\n      sortType: \"votes\",\n      showChart: false,\n      barChart: null,\n      doughnutChart: null,\n    };\n  },\n  mounted() {\n    this.fetchVotesPerParty();\n  },\n  methods: {\n    async fetchVotesPerParty() {\n      try {\n        const response = await fetch(\n            \"http://localhost:8084/api/election-results/votes-per-party\"\n        );\n        if (!response.ok) {\n          throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        const data = await response.json();\n\n        const totalVotes = data.reduce((sum, party) => sum + party.totalVotes, 0);\n        const totalSeats = 150;\n        const kiesdeler = Math.floor(totalVotes / totalSeats);\n\n        this.parties = data.map((party) => {\n          const seats = Math.floor(party.totalVotes / kiesdeler);\n          const remainingVotes = seats * kiesdeler + kiesdeler - party.totalVotes;\n          return {\n            name: party.name,\n            totalVotes: party.totalVotes,\n            seats,\n            remainingVotes: remainingVotes > 0 ? remainingVotes : 0,\n          };\n        });\n\n        this.updateTopThreeParties();\n\n        if (this.showChart) {\n          this.$nextTick(() => {\n            this.renderCharts();\n          });\n        }\n      } catch (error) {\n        console.error(\"Error fetching votes per party:\", error);\n      }\n    },\n\n    updateTopThreeParties() {\n      const sortedParties = [...this.parties].sort((a, b) => b.totalVotes - a.totalVotes);\n      this.largestParty = sortedParties[0] || { name: '', totalVotes: 0, seats: 0 };\n      this.secondLargestParty = sortedParties[1] || { name: '', totalVotes: 0, seats: 0 };\n      this.thirdLargestParty = sortedParties[2] || { name: '', totalVotes: 0, seats: 0 };\n    },\n\n    getPartyLogo(partyName) {\n      const nameMapping = {\n        \"VVD\": \"VVD\",\n        \"D66\": \"D66\",\n        \"GROENLINKS / Partij van de Arbeid (PvdA)\": \"GLPvdA\",\n        \"PVV (Partij voor de Vrijheid)\": \"PVV\",\n        \"CDA\": \"CDA\",\n        \"SP (Socialistische Partij)\": \"SP\",\n        \"Forum voor Democratie\": \"FVD\",\n        \"Partij voor de Dieren\": \"PvdD\",\n        \"ChristenUnie\": \"CU\",\n        \"Volt\": \"VOLT\",\n        \"JA21\": \"JA21\",\n        \"Staatkundig Gereformeerde Partij (SGP)\": \"SGP\",\n        \"DENK\": \"DENK\",\n        \"50PLUS\": \"50Plus\",\n        \"BBB\": \"BBB\",\n        \"BVNL / Groep Van Haga\": \"OPNL\",\n        \"Nieuw Sociaal Contract\": \"NSC\",\n      };\n\n      const normalizedName = nameMapping[partyName] || partyName;\n\n      const logos = {\n        \"50Plus\": require(\"@/assets/party/50plus.png\"),\n        \"BBB\": require(\"@/assets/party/bbb.png\"),\n        \"CDA\": require(\"@/assets/party/cda.png\"),\n        \"CU\": require(\"@/assets/party/cu.png\"),\n        \"D66\": require(\"@/assets/party/d66.png\"),\n        \"DENK\": require(\"@/assets/party/denk.png\"),\n        \"FVD\": require(\"@/assets/party/fvd.png\"),\n        \"GLPvdA\": require(\"@/assets/party/glpvda.png\"),\n        \"GroenLinks\": require(\"@/assets/party/groenLinks.png\"),\n        \"JA21\": require(\"@/assets/party/ja21.png\"),\n        \"NSC\": require(\"@/assets/party/nscDark.png\"),\n        \"OPNL\": require(\"@/assets/party/opnl.png\"),\n        \"PvdA\": require(\"@/assets/party/pvda.png\"),\n        \"PvdD\": require(\"@/assets/party/pvdd.png\"),\n        \"PVV\": require(\"@/assets/party/pvv.png\"),\n        \"SGP\": require(\"@/assets/party/sgp.png\"),\n        \"SP\": require(\"@/assets/party/sp.png\"),\n        \"VOLT\": require(\"@/assets/party/volt.png\"),\n        \"VVD\": require(\"@/assets/party/vvd.png\"),\n      };\n\n      return logos[normalizedName] || null;\n    },\n\n    toggleView() {\n      this.showChart = !this.showChart;\n\n      if (this.showChart) {\n        this.$nextTick(() => {\n          this.renderCharts();\n        });\n      }\n    },\n\n    renderCharts() {\n      this.renderBarChart();\n      this.renderDoughnutChart();\n    },\n\n    renderBarChart() {\n      const sortedParties = [...this.parties].sort((a, b) => b.totalVotes - a.totalVotes);\n      const colors = sortedParties.map(() => `hsl(${Math.floor(Math.random() * 360)}, 70%, 50%)`);\n      const ctx = document.getElementById(\"votesBarChart\")?.getContext(\"2d\");\n      if (!ctx) {\n        console.error(\"Canvas context not found!\");\n        return;\n      }\n      if (this.barChart) this.barChart.destroy();\n\n      this.barChart = new Chart(ctx, {\n        type: \"bar\",\n        data: {\n          labels: sortedParties.map((party) => party.name),\n          datasets: [\n            {\n              label: \"Votes\",\n              data: sortedParties.map((party) => party.totalVotes),\n              backgroundColor: colors,\n            },\n          ],\n        },\n        options: {\n          responsive: true,\n          plugins: {\n            legend: {\n              display: false,\n            },\n            tooltip: {\n              callbacks: {\n                label: (context) => `${context.raw.toLocaleString()} votes`,\n              },\n            },\n          },\n          scales: {\n            y: {\n              beginAtZero: true,\n            },\n          },\n        },\n      });\n    },\n\n    renderDoughnutChart() {\n      const sortedParties = [...this.parties].sort((a, b) => b.totalVotes - a.totalVotes);\n      const colors = sortedParties.map(() => `hsl(${Math.floor(Math.random() * 360)}, 70%, 50%)`);\n      const ctx = document.getElementById(\"votesDoughnutChart\")?.getContext(\"2d\");\n      if (!ctx) {\n        console.error(\"Canvas context not found!\");\n        return;\n      }\n      if (this.doughnutChart) this.doughnutChart.destroy();\n\n      this.doughnutChart = new Chart(ctx, {\n        type: \"doughnut\",\n        data: {\n          labels: sortedParties.map((party) => party.name),\n          datasets: [\n            {\n              data: sortedParties.map((party) => party.totalVotes),\n              backgroundColor: colors,\n            },\n          ],\n        },\n        options: {\n          responsive: true,\n          plugins: {\n            legend: {\n              position: \"right\",\n            },\n            tooltip: {\n              callbacks: {\n                label: (context) => {\n                  const total = context.dataset.data.reduce((sum, value) => sum + value, 0);\n                  const percentage = ((context.raw / total) * 100).toFixed(2);\n                  return `${context.label}: ${context.raw.toLocaleString()} votes (${percentage}%)`;\n                },\n              },\n            },\n          },\n        },\n      });\n    },\n\n    toggleSortOrder(type) {\n      if (this.sortType === type) {\n        this.sortOrder = this.sortOrder === \"asc\" ? \"desc\" : \"asc\";\n      } else {\n        this.sortType = type;\n        this.sortOrder = \"asc\";\n      }\n      this.sortParties();\n    },\n\n    sortParties() {\n      if (this.sortType === \"votes\") {\n        this.parties.sort((a, b) =>\n            this.sortOrder === \"asc\" ? a.totalVotes - b.totalVotes : b.totalVotes - a.totalVotes\n        );\n      } else if (this.sortType === \"alphabet\") {\n        this.parties.sort((a, b) =>\n            this.sortOrder === \"asc\" ? a.name.localeCompare(b.name) : b.name.localeCompare(a.name)\n        );\n      }\n    },\n\n    formatVotes(votes) {\n      return votes.toLocaleString();\n    },\n  },\n};\n</script>\n\n<style scoped>\n.votes-per-party {\n  margin: 20px;\n  text-align: center;\n}\n\n.podium {\n  display: flex;\n  justify-content: space-around;\n  align-items: flex-end;\n  gap: 30px;\n  margin-bottom: 30px;\n}\n\n.first-place,\n.second-place,\n.third-place {\n  width: 250px;\n  padding: 20px;\n  background-color: #f9f9f9;\n  border-radius: 10px;\n  text-align: center;\n  box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.1);\n}\n\n.first-place {\n  background-color: gold;\n}\n\n.second-place {\n  background-color: silver;\n}\n\n.third-place {\n  background-color: #cd7f32;\n}\n\n.lead-info {\n  font-weight: bold;\n  color: darkgreen;\n}\n\n.party-logo {\n  width: 80px;\n  height: auto;\n  margin-bottom: 15px;\n}\n\nbutton {\n  margin: 10px;\n  padding: 10px 20px;\n  background-color: #ff9933;\n  border: none;\n  border-radius: 5px;\n  color: white;\n  font-size: 16px;\n  cursor: pointer;\n}\n\nbutton:hover {\n  background-color: #e68a00;\n}\n\ntable {\n  width: 90%;\n  margin: auto;\n  border-collapse: collapse;\n}\n\nth,\ntd {\n  border: 1px solid #ccc;\n  padding: 10px;\n  text-align: center;\n}\n\nth {\n  background-color: #f4f4f4;\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}