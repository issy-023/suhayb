{"ast":null,"code":"import { createElementVNode as _createElementVNode, vModelText as _vModelText, withDirectives as _withDirectives, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, toDisplayString as _toDisplayString } from \"vue\";\nconst _hoisted_1 = {\n  class: \"community-chat\"\n};\nconst _hoisted_2 = {\n  class: \"message-box new-message-box\"\n};\nconst _hoisted_3 = {\n  class: \"user-info\"\n};\nconst _hoisted_4 = {\n  class: \"user-avatar\"\n};\nconst _hoisted_5 = [\"src\"];\nconst _hoisted_6 = {\n  class: \"username\"\n};\nconst _hoisted_7 = {\n  class: \"message-actions\"\n};\nconst _hoisted_8 = {\n  key: 0,\n  class: \"comments-section\"\n};\nconst _hoisted_9 = {\n  class: \"username\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_cache[10] || (_cache[10] = _createElementVNode(\"div\", {\n    class: \"chat-header\"\n  }, [_createElementVNode(\"h2\", null, \"Community Chat App\")], -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_2, [_cache[9] || (_cache[9] = _createElementVNode(\"div\", {\n    class: \"user-info\"\n  }, [_createElementVNode(\"span\", {\n    class: \"user-avatar\"\n  })], -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"textarea\", {\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.newMessage = $event),\n    placeholder: \"type message here...\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $data.newMessage]]), _createElementVNode(\"input\", {\n    type: \"file\",\n    onChange: _cache[1] || (_cache[1] = (...args) => $options.handleFileChange && $options.handleFileChange(...args)),\n    accept: \"image/*\"\n  }, null, 32 /* NEED_HYDRATION */), _createElementVNode(\"button\", {\n    class: \"post-button\",\n    onClick: _cache[2] || (_cache[2] = (...args) => $options.postMessage && $options.postMessage(...args))\n  }, \"Post\")]), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.chatMessages, message => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: message.id,\n      class: \"message-box\"\n    }, [_createElementVNode(\"div\", _hoisted_3, [_createElementVNode(\"span\", _hoisted_4, [message.image ? (_openBlock(), _createElementBlock(\"img\", {\n      key: 0,\n      src: message.image,\n      alt: \"User Avatar\"\n    }, null, 8 /* PROPS */, _hoisted_5)) : _createCommentVNode(\"v-if\", true)]), _createElementVNode(\"span\", _hoisted_6, _toDisplayString(message.username), 1 /* TEXT */)]), _createElementVNode(\"p\", null, _toDisplayString(message.text), 1 /* TEXT */)]);\n  }), 128 /* KEYED_FRAGMENT */)), _createElementVNode(\"div\", _hoisted_7, [_createElementVNode(\"button\", {\n    onClick: _cache[3] || (_cache[3] = $event => _ctx.openComments(_ctx.message.id))\n  }, \"Comments\"), _createElementVNode(\"button\", {\n    onClick: _cache[4] || (_cache[4] = $event => _ctx.respondToMessage(_ctx.message.id))\n  }, \"Respond\"), _createElementVNode(\"button\", {\n    onClick: _cache[5] || (_cache[5] = $event => _ctx.likeMessage(_ctx.message.id))\n  }, \"Like\"), _createElementVNode(\"button\", {\n    onClick: _cache[6] || (_cache[6] = $event => _ctx.shareMessage(_ctx.message.id))\n  }, \"Share\")]), _ctx.message.showComments ? (_openBlock(), _createElementBlock(\"div\", _hoisted_8, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList(_ctx.message.comments, comment => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: comment.id,\n      class: \"comment\"\n    }, [_createElementVNode(\"span\", _hoisted_9, \"@\" + _toDisplayString(comment.username), 1 /* TEXT */), _createElementVNode(\"p\", null, _toDisplayString(comment.text), 1 /* TEXT */)]);\n  }), 128 /* KEYED_FRAGMENT */)), _withDirectives(_createElementVNode(\"textarea\", {\n    \"onUpdate:modelValue\": _cache[7] || (_cache[7] = $event => _ctx.message.newComment = $event),\n    placeholder: \"Add a comment\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, _ctx.message.newComment]]), _createElementVNode(\"button\", {\n    onClick: _cache[8] || (_cache[8] = $event => _ctx.postComment(_ctx.message.id))\n  }, \"Comment\")])) : _createCommentVNode(\"v-if\", true)]);\n}","map":{"version":3,"names":["class","key","_createElementBlock","_hoisted_1","_createElementVNode","_hoisted_2","_cache","$event","$data","newMessage","placeholder","type","onChange","args","$options","handleFileChange","accept","onClick","postMessage","_Fragment","_renderList","chatMessages","message","id","_hoisted_3","_hoisted_4","image","src","alt","_hoisted_5","_createCommentVNode","_hoisted_6","_toDisplayString","username","text","_hoisted_7","_ctx","openComments","respondToMessage","likeMessage","shareMessage","showComments","_hoisted_8","comments","comment","_hoisted_9","newComment","postComment"],"sources":["/Users/suhayb/Documenten/cuuruuvoovii16/election-frontend/src/components/CommunityChatPage.vue"],"sourcesContent":["<template>\n  <div class=\"community-chat\">\n    <div class=\"chat-header\">\n      <h2>Community Chat App</h2>\n    </div>\n    <div class=\"message-box new-message-box\">\n      <div class=\"user-info\">\n        <span class=\"user-avatar\"></span>\n\n      </div>\n      <textarea v-model=\"newMessage\" placeholder=\"type message here...\"></textarea>\n      <input type=\"file\" @change=\"handleFileChange\" accept=\"image/*\" />\n\n\n      <button class=\"post-button\" @click=\"postMessage\">Post</button>\n    </div>\n\n\n    <div v-for=\"message in chatMessages\" :key=\"message.id\" class=\"message-box\">\n      <div class=\"user-info\">\n    <span class=\"user-avatar\">\n      <img v-if=\"message.image\" :src=\"message.image\" alt=\"User Avatar\" />\n    </span>\n        <span class=\"username\">{{ message.username }}</span>\n      </div>\n      <p>{{ message.text }}</p>\n    </div>\n\n\n\n\n\n\n      <div class=\"message-actions\">\n        <button @click=\"openComments(message.id)\">Comments</button>\n        <button @click=\"respondToMessage(message.id)\">Respond</button>\n        <button @click=\"likeMessage(message.id)\">Like</button>\n        <button @click=\"shareMessage(message.id)\">Share</button>\n      </div>\n\n\n      <div v-if=\"message.showComments\" class=\"comments-section\">\n        <div v-for=\"comment in message.comments\" :key=\"comment.id\" class=\"comment\">\n          <span class=\"username\">@{{ comment.username }}</span>\n          <p>{{ comment.text }}</p>\n        </div>\n        <textarea v-model=\"message.newComment\" placeholder=\"Add a comment\"></textarea>\n        <button @click=\"postComment(message.id)\">Comment</button>\n      </div>\n    </div>\n  \n</template>\n\n<script>\nimport { mapGetters } from 'vuex';\nimport { API_URL } from \"@/config\";\nimport jwtDecode from \"jwt-decode\";\n\nexport default {\n  name: 'CommunityChatComponent',\n  props: ['communityId'],\n  data() {\n    return {\n      Users: [],          // Placeholder for user list to keep the UI layout\n      chatMessages: [],   // Placeholder for messages to keep the UI layout\n      newMessage: '',\n      selectedFile: null, // Store the selected image file here\n    };\n  },\n  computed: {\n    ...mapGetters(['userId']),\n  },\n  methods: {\n\n    handleFileChange(event) {\n      const file = event.target.files[0];\n\n      // Validate file type\n      if (!file.type.startsWith('image/')) {\n        alert('Please upload a valid image file.');\n        return;\n      }\n\n      // Validate file size (e.g., limit to 5MB)\n      const maxSize = 5 * 1024 * 1024; // 5MB\n      if (file.size > maxSize) {\n        alert('File size exceeds 5MB. Please upload a smaller file.');\n        return;\n      }\n\n      this.selectedFile = file;\n      console.log(\"Selected file:\", this.selectedFile);\n    },\n\n    async postMessage() {\n      const token = localStorage.getItem('token');\n      if (!this.newMessage.trim()) return;\n\n      const formData = new FormData();\n      formData.append('content', this.newMessage);\n      if (this.selectedFile) {\n        formData.append('image', this.selectedFile); // Attach image if selected\n      }\n\n      let username;\n      let userId;\n      if (token) {\n        try {\n          const decodedToken = jwtDecode(token);\n          username = decodedToken.username; // Assuming 'username' exists in the token\n          userId = decodedToken.id; // Assuming 'id' exists in the token\n          if (userId) {\n            formData.append('userid', userId); // Add userid directly if available\n          } else if (username) {\n            formData.append('username', username); // Otherwise, pass the username\n          }\n        } catch (error) {\n          console.error('Error decoding token:', error);\n        }\n      }\n\n      try {\n        const response = await fetch(`${API_URL}/api/communities/${this.communityId}/posts/create`, {\n          method: 'POST',\n          body: formData,\n        });\n\n        if (!response.ok) throw new Error('Failed to send message');\n\n        // Clear fields after posting successfully\n        this.newMessage = '';\n        this.selectedFile = null;\n      } catch (error) {\n        console.error('Error sending message:', error);\n      }\n    }\n    ,\n\n    async fetchPosts() {\n      try {\n        // Fetch posts from the backend API\n        const response = await fetch(`${API_URL}/api/communities/${this.communityId}/posts`);\n        if (!response.ok) {\n          throw new Error(\"Failed to fetch posts\");\n        }\n\n        // Parse the response JSON\n        const posts = await response.json();\n\n        // Map the fetched data to the chatMessages array\n        this.chatMessages = posts.map(post => ({\n          id: post.id, // Post ID\n          text: post.content, // Post content\n          username: post.user?.username || \"Anonymous\", // Safely access `user.username`\n          image: post.image ? `data:image/jpeg;base64,${post.image}` : null, // Handle Base64 images\n          responseTo: post.responseTo || null, // Handle optional `responseTo` field\n        }));\n\n        console.log(\"Chat messages loaded:\", this.chatMessages); // Debug log\n      } catch (error) {\n        console.error(\"Error fetching posts:\", error);\n      }\n    },\n\n  },\n  mounted() {\n    this.fetchPosts();\n  },\n\n};\n</script>\n\n\n<style scoped>\n* {\n  font-family: \"Outfit\", sans-serif;\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\nhtml, body {\n  height: 100%;\n  overflow: hidden;\n}\n\n.community-chat {\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n  align-items: center;\n  background-color: #F9F9F9;\n  color: #17003C;\n  width: 100vw;\n  height: 100vh;\n  padding: 1.5rem;\n  overflow: hidden;\n}\n\n.chat-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  width: 100%;\n  max-width: 800px;\n  margin-bottom: 1rem;\n}\n\n.leave-button {\n  background-color: #FF9900;\n  color: white;\n  border: 7px solid #17003C;\n  padding: 0.5rem 1rem;\n  font-size: 1.5rem;\n  cursor: pointer;\n  transition: background-color 0.3s ease, border-color 0.3s ease;\n  border-radius: 100px;\n}\n\n.leave-button:hover {\n  background-color: #17003C;\n  border-color: #FF9900;\n}\n\n.users-online {\n  background-color: #F1F1F1;\n  padding: 1rem;\n  border-radius: 12px;\n  margin-bottom: 1rem;\n  width: 100%;\n  max-width: 800px;\n}\n\n.users-online ul {\n  list-style: none;\n}\n\n.users-online li {\n  display: flex;\n  align-items: center;\n  margin-bottom: 0.5rem;\n  font-weight: 600;\n}\n\n.user-avatar {\n  width: 15px;\n  height: 15px;\n  border-radius: 50%;\n  margin-right: 0.5rem;\n}\n\n.chat-messages {\n  background-color: #F1F1F1;\n  padding: 1rem;\n  border-radius: 12px;\n  flex: 1;\n  width: 100%;\n  max-width: 800px;\n  overflow-y: auto;\n  margin-bottom: 1rem;\n}\n\n.chat-message {\n  display: flex;\n  align-items: center;\n  margin-bottom: 1rem;\n}\n\n.message-avatar {\n  width: 20px;\n  height: 20px;\n  border-radius: 50%;\n  margin-right: 0.75rem;\n}\n\n.message-content {\n  background-color: #E0E0E0;\n  padding: 0.5rem 1rem;\n  border-radius: 12px;\n}\n\n.own-message .message-content {\n  background-color: #D1EAFF;\n}\n\n.message-user {\n  font-weight: bold;\n  display: block;\n  margin-bottom: 0.3rem;\n}\n\n.message-input {\n  display: flex;\n  align-items: center;\n  width: 100%;\n  max-width: 800px;\n  padding-top: 1rem;\n  padding-bottom: 1rem;\n  background-color: #F9F9F9;\n  position: sticky;\n  bottom: 0;\n}\n\n.message-input input {\n  flex: 1;\n  padding: 1rem;\n  border-radius: 50px;\n  border: 1px solid #ccc;\n  margin-right: 1rem;\n  font-size: 1.2rem;\n}\n\n.message-box {\n  background-color: #17003C;\n  color: white;\n  border-radius: 15px;\n  padding: 15px;\n  margin: 10px auto;\n  width: 90%;\n  max-width: 600px;\n}\n\n.new-message-box {\n  background-color: #17003C;\n  padding: 20px;\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n  margin-bottom: 20px;\n}\n\n.user-info {\n  display: flex;\n  align-items: center;\n  margin-bottom: 10px;\n}\n\n.user-avatar {\n  width: 40px;\n  height: 40px;\n  border-radius: 50%;\n  background-color: gray;\n  margin-right: 10px;\n}\n\n.username {\n  font-weight: bold;\n  color: #FF9900;\n}\n\n.response-to {\n  font-size: 0.9em;\n  color: #FF9900;\n  margin-left: 5px;\n}\n\ntextarea {\n  width: 100%;\n  border-radius: 10px;\n  padding: 10px;\n  font-size: 1em;\n  margin: 10px 0;\n  border: none;\n}\n\n.post-button {\n  background-color: #FF9900;\n  color: white;\n  padding: 8px 20px;\n  border: none;\n  border-radius: 5px;\n  cursor: pointer;\n}\n\n.post-button:hover {\n  background-color: #E68A00;\n}\n\n/* Message Actions */\n.message-actions {\n  display: flex;\n  justify-content: space-around;\n  margin-top: 10px;\n}\n\n.message-actions button {\n  background: none;\n  border: none;\n  color: #FF9900;\n  cursor: pointer;\n  font-size: 1em;\n}\n\n.message-actions button:hover {\n  color: #E68A00;\n}\n\n/* Comments Section */\n.comments-section {\n  margin-top: 10px;\n  padding: 10px;\n  background-color: #2A1E54;\n  border-radius: 10px;\n}\n\n.comment {\n  margin-bottom: 5px;\n}\n\n.comment .username {\n  font-weight: bold;\n  color: #FF9900;\n}\n\n.comment textarea {\n  margin-top: 5px;\n}\n.user-avatar img {\n  width: 40px;\n  height: 40px;\n  border-radius: 50%;\n  object-fit: cover;\n}\n.message-area{\n  background-color: white;\n  color: black;\n  padding: 10px;\n  font-size: 1em;\n  margin: 10px 0;\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}