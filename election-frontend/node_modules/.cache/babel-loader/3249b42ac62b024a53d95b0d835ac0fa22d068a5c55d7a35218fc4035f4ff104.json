{"ast":null,"code":"import { API_URL } from \"@/config\";\nimport jwtDecode from \"jwt-decode\";\nexport default {\n  name: \"CommunityChatComponent\",\n  props: [\"communityId\"],\n  data() {\n    return {\n      chatMessages: [],\n      newMessage: \"\",\n      selectedFile: null,\n      openComments: {},\n      newComments: \"\"\n    };\n  },\n  methods: {\n    async fetchPosts() {\n      try {\n        const token = localStorage.getItem(\"token\");\n        if (!token) throw new Error(\"No token found.\");\n        const decodedToken = jwtDecode(token);\n        const userId = decodedToken.id;\n        const response = await fetch(`${API_URL}/api/communities/${this.communityId}/posts?userId=${userId}`, {\n          method: \"GET\",\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n        if (!response.ok) throw new Error(\"Failed to fetch posts\");\n        const posts = await response.json();\n\n        // Zorg dat we in de frontend 'isLiked' hebben\n        this.chatMessages = posts.map(post => ({\n          id: post.id,\n          text: post.content,\n          username: post.user?.username || \"Anonymous\",\n          image: post.image ? `data:image/jpeg;base64,${post.image}` : null,\n          likeCount: post.likeCount,\n          isLiked: post.likedByUser,\n          // Belangrijk\n          comments: post.comments || []\n        }));\n      } catch (error) {\n        console.error(\"Error fetching posts:\", error);\n      }\n    },\n    async toggleLike(messageId) {\n      const token = localStorage.getItem(\"token\");\n      if (!token) return alert(\"Not authenticated.\");\n      const decodedToken = jwtDecode(token);\n      const userId = decodedToken.id;\n      const post = this.chatMessages.find(msg => msg.id === messageId);\n      if (!post) return;\n\n      // Bepaal of we gaan liken of unliken\n      const method = post.isLiked ? \"DELETE\" : \"POST\";\n      const endpoint = `${API_URL}/api/communities/${this.communityId}/posts/${messageId}/like?userId=${userId}`;\n      try {\n        const response = await fetch(endpoint, {\n          method,\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n        if (!response.ok) {\n          const errorText = await response.text();\n          console.error(\"Error toggling like:\", errorText);\n          return;\n        }\n\n        // Optimistic update:\n        if (post.isLiked) {\n          post.isLiked = false;\n          post.likeCount--;\n        } else {\n          post.isLiked = true;\n          post.likeCount++;\n        }\n      } catch (error) {\n        console.error(\"Error toggling like:\", error);\n      }\n    },\n    // REST: Comments, PostMessage, etc.\n    async postMessage() {\n      const token = localStorage.getItem(\"token\");\n      if (!token) return alert(\"User not authenticated. Please log in.\");\n      try {\n        const decodedToken = jwtDecode(token);\n        const formData = new FormData();\n        formData.append(\"content\", this.newMessage);\n        formData.append(\"userid\", decodedToken.id);\n        if (this.selectedFile) formData.append(\"image\", this.selectedFile);\n        const response = await fetch(`${API_URL}/api/communities/${this.communityId}/posts/create`, {\n          method: \"POST\",\n          headers: {\n            Authorization: `Bearer ${token}`\n          },\n          body: formData\n        });\n        if (!response.ok) throw new Error(\"Failed to post message\");\n        this.newMessage = \"\";\n        this.selectedFile = null;\n        this.fetchPosts(); // Refresh de lijst met posts\n      } catch (error) {\n        console.error(\"Error posting message:\", error);\n      }\n    },\n    handleFileChange(event) {\n      const file = event.target.files[0];\n      if (!file.type.startsWith(\"image/\")) {\n        return alert(\"Please upload a valid image file.\");\n      }\n      if (file.size > 5 * 1024 * 1024) {\n        return alert(\"File size exceeds 5MB. Please upload a smaller file.\");\n      }\n      this.selectedFile = file;\n    },\n    // Comments logica, etc. (optioneel)\n    toggleComments(messageId) {\n      this.openComments[messageId] = !this.openComments[messageId];\n      if (this.openComments[messageId]) {\n        this.fetchComments(messageId);\n      }\n    },\n    async fetchComments(postId) {\n      // ...\n    },\n    async addComment(messageId) {\n      // ...\n    },\n    shareMessage(messageId) {\n      alert(\"Share logic for post \" + messageId);\n    },\n    isCommentsOpen(messageId) {\n      return !!this.openComments[messageId];\n    },\n    async leaveCommunity() {\n      // ...\n    }\n  },\n  mounted() {\n    this.fetchPosts();\n  }\n};","map":{"version":3,"names":["API_URL","jwtDecode","name","props","data","chatMessages","newMessage","selectedFile","openComments","newComments","methods","fetchPosts","token","localStorage","getItem","Error","decodedToken","userId","id","response","fetch","communityId","method","headers","Authorization","ok","posts","json","map","post","text","content","username","user","image","likeCount","isLiked","likedByUser","comments","error","console","toggleLike","messageId","alert","find","msg","endpoint","errorText","postMessage","formData","FormData","append","body","handleFileChange","event","file","target","files","type","startsWith","size","toggleComments","fetchComments","postId","addComment","shareMessage","isCommentsOpen","leaveCommunity","mounted"],"sources":["/Users/suhayb/MijnProjecten/cuuruuvoovii16/election-frontend/src/components/CommunityChatPage.vue"],"sourcesContent":["<template>\n  <div class=\"community-chat\">\n    <div class=\"chat-header\">\n      <h2>Community Chat App</h2>\n      <button class=\"leave-button\" @click=\"leaveCommunity\">Leave</button>\n    </div>\n\n    <div class=\"new-message-box\">\n      <textarea v-model=\"newMessage\" placeholder=\"Type message here...\"></textarea>\n      <input type=\"file\" @change=\"handleFileChange\" accept=\"image/*\" />\n      <button class=\"post-button\" @click=\"postMessage\">Post</button>\n    </div>\n\n    <div class=\"posts-container\">\n      <div v-for=\"message in chatMessages\" :key=\"message.id\" class=\"message-box\">\n        <div class=\"user-info\">\n          <span class=\"user-avatar\"></span>\n          <span class=\"username\">{{ message.username }}</span>\n        </div>\n        <img\n            v-if=\"message.image\"\n            :src=\"message.image\"\n            alt=\"Post Image\"\n            class=\"message-image\"\n        />\n        <p class=\"message-area\">{{ message.text }}</p>\n\n        <div class=\"message-actions\">\n          <!-- Toggle Like/Unlike-knop -->\n          <button @click=\"toggleLike(message.id)\">\n            {{ message.isLiked ? \"Unlike\" : \"Like\" }}\n          </button>\n          <span>{{ message.likeCount }} Likes</span>\n          <button @click=\"shareMessage(message.id)\">Share</button>\n          <button @click=\"toggleComments(message.id)\">\n            {{ isCommentsOpen(message.id) ? \"Hide\" : \"Show\" }} Comments\n          </button>\n        </div>\n\n        <div v-if=\"isCommentsOpen(message.id)\" class=\"comments-section\">\n          <div v-for=\"comment in message.comments\" :key=\"comment.id\" class=\"comment\">\n            <span class=\"comment-username\">{{ comment.username }}</span>\n            <p class=\"comment-text\">{{ comment.content }}</p>\n          </div>\n          <div class=\"new-comment-box\">\n            <textarea v-model=\"newComments\" placeholder=\"Add a comment...\" />\n            <button @click=\"addComment(message.id)\">Comment</button>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { API_URL } from \"@/config\";\nimport jwtDecode from \"jwt-decode\";\n\nexport default {\n  name: \"CommunityChatComponent\",\n  props: [\"communityId\"],\n  data() {\n    return {\n      chatMessages: [],\n      newMessage: \"\",\n      selectedFile: null,\n      openComments: {},\n      newComments: \"\",\n    };\n  },\n  methods: {\n    async fetchPosts() {\n      try {\n        const token = localStorage.getItem(\"token\");\n        if (!token) throw new Error(\"No token found.\");\n        const decodedToken = jwtDecode(token);\n        const userId = decodedToken.id;\n\n        const response = await fetch(\n            `${API_URL}/api/communities/${this.communityId}/posts?userId=${userId}`,\n            {\n              method: \"GET\",\n              headers: { Authorization: `Bearer ${token}` },\n            }\n        );\n        if (!response.ok) throw new Error(\"Failed to fetch posts\");\n        const posts = await response.json();\n\n        // Zorg dat we in de frontend 'isLiked' hebben\n        this.chatMessages = posts.map((post) => ({\n          id: post.id,\n          text: post.content,\n          username: post.user?.username || \"Anonymous\",\n          image: post.image ? `data:image/jpeg;base64,${post.image}` : null,\n          likeCount: post.likeCount,\n          isLiked: post.likedByUser, // Belangrijk\n          comments: post.comments || [],\n        }));\n      } catch (error) {\n        console.error(\"Error fetching posts:\", error);\n      }\n    },\n\n    async toggleLike(messageId) {\n      const token = localStorage.getItem(\"token\");\n      if (!token) return alert(\"Not authenticated.\");\n\n      const decodedToken = jwtDecode(token);\n      const userId = decodedToken.id;\n\n      const post = this.chatMessages.find((msg) => msg.id === messageId);\n      if (!post) return;\n\n      // Bepaal of we gaan liken of unliken\n      const method = post.isLiked ? \"DELETE\" : \"POST\";\n      const endpoint = `${API_URL}/api/communities/${this.communityId}/posts/${messageId}/like?userId=${userId}`;\n\n      try {\n        const response = await fetch(endpoint, {\n          method,\n          headers: { Authorization: `Bearer ${token}` },\n        });\n\n        if (!response.ok) {\n          const errorText = await response.text();\n          console.error(\"Error toggling like:\", errorText);\n          return;\n        }\n\n        // Optimistic update:\n        if (post.isLiked) {\n          post.isLiked = false;\n          post.likeCount--;\n        } else {\n          post.isLiked = true;\n          post.likeCount++;\n        }\n      } catch (error) {\n        console.error(\"Error toggling like:\", error);\n      }\n    },\n\n    // REST: Comments, PostMessage, etc.\n    async postMessage() {\n      const token = localStorage.getItem(\"token\");\n      if (!token) return alert(\"User not authenticated. Please log in.\");\n\n      try {\n        const decodedToken = jwtDecode(token);\n        const formData = new FormData();\n        formData.append(\"content\", this.newMessage);\n        formData.append(\"userid\", decodedToken.id);\n        if (this.selectedFile) formData.append(\"image\", this.selectedFile);\n\n        const response = await fetch(\n            `${API_URL}/api/communities/${this.communityId}/posts/create`,\n            {\n              method: \"POST\",\n              headers: { Authorization: `Bearer ${token}` },\n              body: formData,\n            }\n        );\n\n        if (!response.ok) throw new Error(\"Failed to post message\");\n\n        this.newMessage = \"\";\n        this.selectedFile = null;\n        this.fetchPosts(); // Refresh de lijst met posts\n      } catch (error) {\n        console.error(\"Error posting message:\", error);\n      }\n    },\n\n    handleFileChange(event) {\n      const file = event.target.files[0];\n      if (!file.type.startsWith(\"image/\")) {\n        return alert(\"Please upload a valid image file.\");\n      }\n      if (file.size > 5 * 1024 * 1024) {\n        return alert(\"File size exceeds 5MB. Please upload a smaller file.\");\n      }\n      this.selectedFile = file;\n    },\n\n    // Comments logica, etc. (optioneel)\n    toggleComments(messageId) {\n      this.openComments[messageId] = !this.openComments[messageId];\n      if (this.openComments[messageId]) {\n        this.fetchComments(messageId);\n      }\n    },\n\n    async fetchComments(postId) {\n      // ...\n    },\n    async addComment(messageId) {\n      // ...\n    },\n\n    shareMessage(messageId) {\n      alert(\"Share logic for post \" + messageId);\n    },\n\n    isCommentsOpen(messageId) {\n      return !!this.openComments[messageId];\n    },\n\n    async leaveCommunity() {\n      // ...\n    },\n  },\n  mounted() {\n    this.fetchPosts();\n  },\n};\n</script>\n\n\n\n\n\n<style>\n* {\n  font-family: \"Outfit\", sans-serif;\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\nhtml, body {\n  height: 100%;\n\n}\n\n.community-chat {\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n  align-items: center;\n  background-color: #F9F9F9;\n  color: #17003C;\n  width: 100vw;\n  height: 100vh;\n  padding: 1.5rem;\n  overflow: hidden;\n}\n\n.chat-header {\n  flex-shrink: 0;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  width: 100%;\n  max-width: 800px;\n  margin-bottom: 1rem;\n}\n\n.new-message-box {\n  flex-shrink: 0;\n  background-color: #17003C;\n  padding: 20px;\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n  margin-bottom: 20px;\n  width: 100%;\n  max-width: 800px;\n  border-radius: 10px;\n}\n\ntextarea {\n  width: 100%;\n  border-radius: 10px;\n  padding: 10px;\n  font-size: 1em;\n  margin: 10px 0;\n  border: none;\n  background-color: white;\n  color: black;\n}\n\n.post-button {\n  background-color: #FF9900;\n  color: white;\n  padding: 8px 20px;\n  border: none;\n  border-radius: 5px;\n  cursor: pointer;\n}\n\n.post-button:hover {\n  background-color: #E68A00;\n}\n\n.posts-container {\n  flex-grow: 1;\n  width: 100%;\n  max-width: 800px;\n  overflow-y: auto;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 10px;\n  padding: 10px 0;\n}\n\n.message-box {\n  background-color: #17003C;\n  color: white;\n  border-radius: 15px;\n  padding: 15px;\n  margin-bottom: 10px;\n  width: 90%;\n  max-width: 600px;\n}\n\n.user-info {\n  display: flex;\n  align-items: center;\n  margin-bottom: 10px;\n}\n\n.user-avatar {\n  width: 40px;\n  height: 40px;\n  border-radius: 50%;\n  background-color: gray;\n  margin-right: 10px;\n}\n\n.username {\n  font-weight: bold;\n  color: #FF9900;\n}\n\n.message-area {\n  background-color: white;\n  color: black;\n  padding: 10px;\n  border-radius: 10px;\n  font-size: 1em;\n  margin-top: 10px;\n}\n\n.message-image {\n  max-width: 50%;\n  border-radius: 10px;\n  margin-top: 10px;\n}\n\n.message-actions {\n  display: flex;\n  justify-content: space-around;\n  margin-top: 10px;\n}\n\n.message-actions button {\n  background: none;\n  border: none;\n  color: #FF9900;\n  cursor: pointer;\n  font-size: 1em;\n}\n\n.message-actions button:hover {\n  color: #E68A00;\n}\n\n.comments-section {\n  margin-top: 10px;\n  padding: 10px;\n  background-color: #2A1E54;\n  border-radius: 10px;\n}\n\n.comment {\n  margin-bottom: 5px;\n  padding: 10px;\n}\n\n.comment .username {\n  font-weight: bold;\n  color: #FF9900;\n}\n.comment-username{\n  color: yellow;\n  margin-top: 5px;\n  background-color: white;\n  border-radius: 8px;\n  padding: 10px;\n}\n\n.comment-text {\n  margin-top: 5px;\n  background-color: white;\n  color: black;\n  border-radius: 8px;\n  padding: 10px;\n}\n.comment-username{\n  color: #FF9900;\n}\n.new-comment-box input,button{\n  padding: 10px;\n}\n.new-comment-box button{\n  padding: 3px;\n  border-radius: 5px;\n}\n.leave-button {\n  background-color: #E74C3C;\n  color: white;\n  padding: 10px 20px;\n  border: none;\n  border-radius: 5px;\n  cursor: pointer;\n  font-size: 1em;\n}\n\n.leave-button:hover {\n  background-color: #C0392B;\n}\n\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}