{"ast":null,"code":"import { createCommentVNode as _createCommentVNode, createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString } from \"vue\";\nconst _hoisted_1 = {\n  class: \"votes-per-party\"\n};\nconst _hoisted_2 = {\n  class: \"podium\"\n};\nconst _hoisted_3 = {\n  class: \"second-place\"\n};\nconst _hoisted_4 = [\"src\"];\nconst _hoisted_5 = {\n  class: \"first-place\"\n};\nconst _hoisted_6 = [\"src\"];\nconst _hoisted_7 = {\n  class: \"lead-info\"\n};\nconst _hoisted_8 = {\n  class: \"third-place\"\n};\nconst _hoisted_9 = [\"src\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createCommentVNode(\" Button voor alle partijen bovenaan \"), _createElementVNode(\"button\", {\n    class: \"view-all-parties-btn\",\n    onClick: _cache[0] || (_cache[0] = (...args) => $options.navigateToParties && $options.navigateToParties(...args))\n  }, \"View All Parties\"), _cache[5] || (_cache[5] = _createElementVNode(\"h1\", null, \"Votes Per Party\", -1 /* HOISTED */)), _createCommentVNode(\" Podium voor top 3 winnaars \"), _createElementVNode(\"div\", _hoisted_2, [_createElementVNode(\"div\", _hoisted_3, [$options.getPartyLogo($data.secondLargestParty.name) ? (_openBlock(), _createElementBlock(\"img\", {\n    key: 0,\n    src: $options.getPartyLogo($data.secondLargestParty.name),\n    alt: \"2nd Place Logo\",\n    class: \"party-logo\"\n  }, null, 8 /* PROPS */, _hoisted_4)) : _createCommentVNode(\"v-if\", true), _cache[2] || (_cache[2] = _createElementVNode(\"h3\", null, \"2nd Place\", -1 /* HOISTED */)), _createElementVNode(\"h2\", null, _toDisplayString($data.secondLargestParty.name), 1 /* TEXT */), _createElementVNode(\"p\", null, \"Votes: \" + _toDisplayString($options.formatVotes($data.secondLargestParty.totalVotes)), 1 /* TEXT */), _createElementVNode(\"p\", null, \"Seats: \" + _toDisplayString($data.secondLargestParty.seats), 1 /* TEXT */)]), _createElementVNode(\"div\", _hoisted_5, [$options.getPartyLogo($data.largestParty.name) ? (_openBlock(), _createElementBlock(\"img\", {\n    key: 0,\n    src: $options.getPartyLogo($data.largestParty.name),\n    alt: \"1st Place Logo\",\n    class: \"party-logo\"\n  }, null, 8 /* PROPS */, _hoisted_6)) : _createCommentVNode(\"v-if\", true), _cache[3] || (_cache[3] = _createElementVNode(\"h3\", null, \"1st Place\", -1 /* HOISTED */)), _createElementVNode(\"h2\", null, _toDisplayString($data.largestParty.name), 1 /* TEXT */), _createElementVNode(\"p\", null, \"Votes: \" + _toDisplayString($options.formatVotes($data.largestParty.totalVotes)), 1 /* TEXT */), _createElementVNode(\"p\", null, \"Seats: \" + _toDisplayString($data.largestParty.seats), 1 /* TEXT */), _createElementVNode(\"p\", _hoisted_7, \"Lead: \" + _toDisplayString($options.formatVotes($data.largestParty.totalVotes - $data.secondLargestParty.totalVotes)) + \" votes\", 1 /* TEXT */)]), _createElementVNode(\"div\", _hoisted_8, [$options.getPartyLogo($data.thirdLargestParty.name) ? (_openBlock(), _createElementBlock(\"img\", {\n    key: 0,\n    src: $options.getPartyLogo($data.thirdLargestParty.name),\n    alt: \"3rd Place Logo\",\n    class: \"party-logo\"\n  }, null, 8 /* PROPS */, _hoisted_9)) : _createCommentVNode(\"v-if\", true), _cache[4] || (_cache[4] = _createElementVNode(\"h3\", null, \"3rd Place\", -1 /* HOISTED */)), _createElementVNode(\"h2\", null, _toDisplayString($data.thirdLargestParty.name), 1 /* TEXT */), _createElementVNode(\"p\", null, \"Votes: \" + _toDisplayString($options.formatVotes($data.thirdLargestParty.totalVotes)), 1 /* TEXT */), _createElementVNode(\"p\", null, \"Seats: \" + _toDisplayString($data.thirdLargestParty.seats), 1 /* TEXT */)])]), _createCommentVNode(\" Grafiek \"), _cache[6] || (_cache[6] = _createElementVNode(\"div\", {\n    class: \"chart-wrapper bar-chart\"\n  }, [_createElementVNode(\"canvas\", {\n    id: \"votesBarChart\"\n  })], -1 /* HOISTED */)), _createCommentVNode(\" Diagram \"), _cache[7] || (_cache[7] = _createElementVNode(\"div\", {\n    class: \"chart-wrapper doughnut-chart\"\n  }, [_createElementVNode(\"canvas\", {\n    id: \"votesDoughnutChart\"\n  })], -1 /* HOISTED */)), _createElementVNode(\"button\", {\n    class: \"view-all-parties-btn\",\n    onClick: _cache[1] || (_cache[1] = (...args) => $options.navigateToLocationVotes && $options.navigateToLocationVotes(...args))\n  }, \"View votes for specific locations\")]);\n}","map":{"version":3,"names":["class","_createElementBlock","_hoisted_1","_createCommentVNode","_createElementVNode","onClick","_cache","args","$options","navigateToParties","_hoisted_2","_hoisted_3","getPartyLogo","$data","secondLargestParty","name","key","src","alt","_hoisted_4","_toDisplayString","formatVotes","totalVotes","seats","_hoisted_5","largestParty","_hoisted_6","_hoisted_7","_hoisted_8","thirdLargestParty","_hoisted_9","id","navigateToLocationVotes"],"sources":["/Users/suhayb/MijnProjecten/cuuruuvoovii16/election-frontend/src/components/VotesPerPartyPage.vue"],"sourcesContent":["<template>\n  <div class=\"votes-per-party\">\n    <!-- Button voor alle partijen bovenaan -->\n    <button class=\"view-all-parties-btn\" @click=\"navigateToParties\">View All Parties</button>\n\n    <h1>Votes Per Party</h1>\n\n    <!-- Podium voor top 3 winnaars -->\n    <div class=\"podium\">\n      <div class=\"second-place\">\n        <img v-if=\"getPartyLogo(secondLargestParty.name)\" :src=\"getPartyLogo(secondLargestParty.name)\" alt=\"2nd Place Logo\" class=\"party-logo\" />\n        <h3>2nd Place</h3>\n        <h2>{{ secondLargestParty.name }}</h2>\n        <p>Votes: {{ formatVotes(secondLargestParty.totalVotes) }}</p>\n        <p>Seats: {{ secondLargestParty.seats }}</p>\n      </div>\n      <div class=\"first-place\">\n        <img v-if=\"getPartyLogo(largestParty.name)\" :src=\"getPartyLogo(largestParty.name)\" alt=\"1st Place Logo\" class=\"party-logo\" />\n        <h3>1st Place</h3>\n        <h2>{{ largestParty.name }}</h2>\n        <p>Votes: {{ formatVotes(largestParty.totalVotes) }}</p>\n        <p>Seats: {{ largestParty.seats }}</p>\n        <p class=\"lead-info\">Lead: {{ formatVotes(largestParty.totalVotes - secondLargestParty.totalVotes) }} votes</p>\n      </div>\n      <div class=\"third-place\">\n        <img v-if=\"getPartyLogo(thirdLargestParty.name)\" :src=\"getPartyLogo(thirdLargestParty.name)\" alt=\"3rd Place Logo\" class=\"party-logo\" />\n        <h3>3rd Place</h3>\n        <h2>{{ thirdLargestParty.name }}</h2>\n        <p>Votes: {{ formatVotes(thirdLargestParty.totalVotes) }}</p>\n        <p>Seats: {{ thirdLargestParty.seats }}</p>\n      </div>\n    </div>\n\n    <!-- Grafiek -->\n    <div class=\"chart-wrapper bar-chart\">\n      <canvas id=\"votesBarChart\"></canvas>\n    </div>\n\n    <!-- Diagram -->\n    <div class=\"chart-wrapper doughnut-chart\">\n      <canvas id=\"votesDoughnutChart\"></canvas>\n    </div>\n    <button class=\"view-all-parties-btn\" @click=\"navigateToLocationVotes\">View votes for specific locations</button>\n  </div>\n</template>\n\n<script>\nimport { Chart } from \"chart.js\";\nimport {API_URL} from \"@/config\";\n\nexport default {\n  name: \"VotesPerPartyPage\",\n  data() {\n    return {\n      parties: [],\n      largestParty: { name: '', totalVotes: 0, seats: 0 },\n      secondLargestParty: { name: '', totalVotes: 0, seats: 0 },\n      thirdLargestParty: { name: '', totalVotes: 0, seats: 0 },\n      barChart: null,\n      doughnutChart: null,\n    };\n  },\n\n  mounted() {\n    this.fetchVotesPerParty();\n  },\n\n  methods: {\n\n    navigateToParties() {\n      this.$router.push({ name: \"AllPartiesComponent\" });\n    },\n    navigateToLocationVotes(){\n      this.$router.push({ name: \"VotesPerLocation\" });\n    },\n\n    async fetchVotesPerParty() {\n      try {\n        const response = await fetch(`${API_URL}/api/election-results/votes-per-party`);\n        if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);\n        const data = await response.json();\n\n        const totalVotes = data.reduce((sum, party) => sum + party.totalVotes, 0);\n        const totalSeats = 150;\n        const kiesdeler = Math.floor(totalVotes / totalSeats);\n\n        this.parties = data.map((party) => ({\n          name: party.name,\n          totalVotes: party.totalVotes,\n          seats: Math.floor(party.totalVotes / kiesdeler),\n        })).sort((a, b) => b.totalVotes - a.totalVotes);\n\n        this.updateTopThreeParties();\n        this.$nextTick(() => this.renderCharts());\n      } catch (error) {\n        console.error(\"Error fetching votes per party:\", error);\n      }\n    },\n\n    updateTopThreeParties() {\n      const sortedParties = [...this.parties];\n      this.largestParty = sortedParties[0] || { name: '', totalVotes: 0, seats: 0 };\n      this.secondLargestParty = sortedParties[1] || { name: '', totalVotes: 0, seats: 0 };\n      this.thirdLargestParty = sortedParties[2] || { name: '', totalVotes: 0, seats: 0 };\n    },\n\n    getPartyLogo(partyName) {\n      const logos = {\n        SP: require(\"@/assets/party/sp.png\"),\n      };\n      return logos[partyName] || null;\n    },\n\n    renderCharts() {\n      this.renderBarChart();\n      this.renderDoughnutChart();\n    },\n\n    renderBarChart() {\n      const ctx = document.getElementById(\"votesBarChart\").getContext(\"2d\");\n      if (this.barChart) this.barChart.destroy();\n      this.barChart = new Chart(ctx, {\n        type: \"bar\",\n        data: {\n          labels: this.parties.map((party) => party.name),\n          datasets: [\n            {\n              label: \"Votes\",\n              data: this.parties.map((party) => party.totalVotes),\n              backgroundColor: this.parties.map(() => `hsl(${Math.random() * 360}, 70%, 50%)`),\n            },\n          ],\n        },\n        options: {\n          responsive: true,\n          maintainAspectRatio: false,\n          plugins: {\n            legend: { display: false },\n          },\n          scales: {\n            y: { beginAtZero: true },\n          },\n        },\n      });\n    },\n\n    renderDoughnutChart() {\n      const ctx = document.getElementById(\"votesDoughnutChart\").getContext(\"2d\");\n      if (this.doughnutChart) this.doughnutChart.destroy();\n      this.doughnutChart = new Chart(ctx, {\n        type: \"doughnut\",\n        data: {\n          labels: this.parties.map((party) => party.name),\n          datasets: [\n            {\n              data: this.parties.map((party) => party.totalVotes),\n              backgroundColor: this.parties.map(() => `hsl(${Math.random() * 360}, 70%, 50%)`),\n            },\n          ],\n        },\n        options: {\n          responsive: true,\n          maintainAspectRatio: false,\n          plugins: {\n            legend: {position: \"bottom\"},\n          },\n        },\n      });\n    },\n    formatVotes(votes) {\n      return votes.toLocaleString();\n    },\n  },\n};\n</script>\n\n<style scoped>\n.votes-per-party {\n  margin: 20px;\n  text-align: center;\n}\n\n.view-all-parties-btn {\n  display: block;\n  margin: 0 auto 20px;\n  padding: 15px 30px;\n  background-color: #ec7700;\n  border: none;\n  border-radius: 10px;\n  color: white;\n  font-size: 18px;\n  cursor: pointer;\n  font-weight: bold;\n}\n\n.view-all-parties-btn:hover {\n  background-color: #c26200;\n}\n\n.podium {\n  display: flex;\n  justify-content: center;\n  align-items: flex-end;\n  gap: 20px;\n  margin-bottom: 30px;\n  flex-wrap: wrap;\n}\n\n.first-place {\n  width: 350px;\n  padding: 20px;\n  background-color: #FFD700;\n  border-radius: 10px;\n  text-align: center;\n  box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.1);\n}\n\n.second-place {\n  width: 270px;\n  height: 130px;\n  font-size: 0.8rem;\n  padding: 15px;\n  background-color: silver;\n  border-radius: 10px;\n  text-align: center;\n  box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.1);\n}\n\n.third-place {\n  width: 250px;\n  padding: 10px;\n  font-size: 1rem;\n  background-color: #cd7f32;\n  border-radius: 10px;\n  text-align: center;\n  box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.1);\n}\n\n.party-logo {\n  width: 80px;\n  margin-bottom: 10px;\n}\n\n.bar-chart {\n  width: 75%;\n  max-width: 1500px;\n  height: 700px;\n  margin: 30px auto;\n}\n\n.doughnut-chart {\n  width: 100%;\n  max-width: 800px;\n  height: 400px;\n  margin: 30px auto;\n}\n\n@media (max-width: 768px) {\n  .first-place {\n    width: 100%;\n    margin-bottom: 20px;\n  }\n\n  .second-place, .third-place {\n    width: 100%;\n  }\n\n  .bar-chart {\n    width: 100%;\n    max-width: 1500px;\n    height: 400px;\n    margin: 30px auto;\n  }\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}